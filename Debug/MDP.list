
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ebc  0800c0a0  0800c0a0  0001c0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf5c  0800cf5c  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf5c  0800cf5c  0001cf5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf64  0800cf64  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf64  0800cf64  0001cf64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf68  0800cf68  0001cf68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800cf6c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          00005684  20000098  20000098  00020098  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000571c  2000571c  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d0b2  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003973  00000000  00000000  0003d17a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019b0  00000000  00000000  00040af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001870  00000000  00000000  000424a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000052b3  00000000  00000000  00043d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c444  00000000  00000000  00048fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da8f7  00000000  00000000  00065407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013fcfe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007b90  00000000  00000000  0013fd50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c088 	.word	0x0800c088

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800c088 	.word	0x0800c088

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b974 	b.w	8000e7c <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	468e      	mov	lr, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d14d      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4694      	mov	ip, r2
 8000bbe:	d969      	bls.n	8000c94 <__udivmoddi4+0xe8>
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	b152      	cbz	r2, 8000bdc <__udivmoddi4+0x30>
 8000bc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bca:	f1c2 0120 	rsb	r1, r2, #32
 8000bce:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bda:	4094      	lsls	r4, r2
 8000bdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be0:	0c21      	lsrs	r1, r4, #16
 8000be2:	fbbe f6f8 	udiv	r6, lr, r8
 8000be6:	fa1f f78c 	uxth.w	r7, ip
 8000bea:	fb08 e316 	mls	r3, r8, r6, lr
 8000bee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf2:	fb06 f107 	mul.w	r1, r6, r7
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c02:	f080 811f 	bcs.w	8000e44 <__udivmoddi4+0x298>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 811c 	bls.w	8000e44 <__udivmoddi4+0x298>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c18:	fb08 3310 	mls	r3, r8, r0, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb00 f707 	mul.w	r7, r0, r7
 8000c24:	42a7      	cmp	r7, r4
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x92>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c30:	f080 810a 	bcs.w	8000e48 <__udivmoddi4+0x29c>
 8000c34:	42a7      	cmp	r7, r4
 8000c36:	f240 8107 	bls.w	8000e48 <__udivmoddi4+0x29c>
 8000c3a:	4464      	add	r4, ip
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c42:	1be4      	subs	r4, r4, r7
 8000c44:	2600      	movs	r6, #0
 8000c46:	b11d      	cbz	r5, 8000c50 <__udivmoddi4+0xa4>
 8000c48:	40d4      	lsrs	r4, r2
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d909      	bls.n	8000c6e <__udivmoddi4+0xc2>
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	f000 80ef 	beq.w	8000e3e <__udivmoddi4+0x292>
 8000c60:	2600      	movs	r6, #0
 8000c62:	e9c5 0100 	strd	r0, r1, [r5]
 8000c66:	4630      	mov	r0, r6
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	fab3 f683 	clz	r6, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d14a      	bne.n	8000d0c <__udivmoddi4+0x160>
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d302      	bcc.n	8000c80 <__udivmoddi4+0xd4>
 8000c7a:	4282      	cmp	r2, r0
 8000c7c:	f200 80f9 	bhi.w	8000e72 <__udivmoddi4+0x2c6>
 8000c80:	1a84      	subs	r4, r0, r2
 8000c82:	eb61 0303 	sbc.w	r3, r1, r3
 8000c86:	2001      	movs	r0, #1
 8000c88:	469e      	mov	lr, r3
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d0e0      	beq.n	8000c50 <__udivmoddi4+0xa4>
 8000c8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c92:	e7dd      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000c94:	b902      	cbnz	r2, 8000c98 <__udivmoddi4+0xec>
 8000c96:	deff      	udf	#255	; 0xff
 8000c98:	fab2 f282 	clz	r2, r2
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	f040 8092 	bne.w	8000dc6 <__udivmoddi4+0x21a>
 8000ca2:	eba1 010c 	sub.w	r1, r1, ip
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f fe8c 	uxth.w	lr, ip
 8000cae:	2601      	movs	r6, #1
 8000cb0:	0c20      	lsrs	r0, r4, #16
 8000cb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cbe:	fb0e f003 	mul.w	r0, lr, r3
 8000cc2:	4288      	cmp	r0, r1
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x12c>
 8000cc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x12a>
 8000cd0:	4288      	cmp	r0, r1
 8000cd2:	f200 80cb 	bhi.w	8000e6c <__udivmoddi4+0x2c0>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	1a09      	subs	r1, r1, r0
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x156>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf8:	d202      	bcs.n	8000d00 <__udivmoddi4+0x154>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f200 80bb 	bhi.w	8000e76 <__udivmoddi4+0x2ca>
 8000d00:	4608      	mov	r0, r1
 8000d02:	eba4 040e 	sub.w	r4, r4, lr
 8000d06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0a:	e79c      	b.n	8000c46 <__udivmoddi4+0x9a>
 8000d0c:	f1c6 0720 	rsb	r7, r6, #32
 8000d10:	40b3      	lsls	r3, r6
 8000d12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d22:	431c      	orrs	r4, r3
 8000d24:	40f9      	lsrs	r1, r7
 8000d26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d32:	0c20      	lsrs	r0, r4, #16
 8000d34:	fa1f fe8c 	uxth.w	lr, ip
 8000d38:	fb09 1118 	mls	r1, r9, r8, r1
 8000d3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d40:	fb08 f00e 	mul.w	r0, r8, lr
 8000d44:	4288      	cmp	r0, r1
 8000d46:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4a:	d90b      	bls.n	8000d64 <__udivmoddi4+0x1b8>
 8000d4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d54:	f080 8088 	bcs.w	8000e68 <__udivmoddi4+0x2bc>
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	f240 8085 	bls.w	8000e68 <__udivmoddi4+0x2bc>
 8000d5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d62:	4461      	add	r1, ip
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d78:	458e      	cmp	lr, r1
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x1e2>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d84:	d26c      	bcs.n	8000e60 <__udivmoddi4+0x2b4>
 8000d86:	458e      	cmp	lr, r1
 8000d88:	d96a      	bls.n	8000e60 <__udivmoddi4+0x2b4>
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	4461      	add	r1, ip
 8000d8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d92:	fba0 9402 	umull	r9, r4, r0, r2
 8000d96:	eba1 010e 	sub.w	r1, r1, lr
 8000d9a:	42a1      	cmp	r1, r4
 8000d9c:	46c8      	mov	r8, r9
 8000d9e:	46a6      	mov	lr, r4
 8000da0:	d356      	bcc.n	8000e50 <__udivmoddi4+0x2a4>
 8000da2:	d053      	beq.n	8000e4c <__udivmoddi4+0x2a0>
 8000da4:	b15d      	cbz	r5, 8000dbe <__udivmoddi4+0x212>
 8000da6:	ebb3 0208 	subs.w	r2, r3, r8
 8000daa:	eb61 010e 	sbc.w	r1, r1, lr
 8000dae:	fa01 f707 	lsl.w	r7, r1, r7
 8000db2:	fa22 f306 	lsr.w	r3, r2, r6
 8000db6:	40f1      	lsrs	r1, r6
 8000db8:	431f      	orrs	r7, r3
 8000dba:	e9c5 7100 	strd	r7, r1, [r5]
 8000dbe:	2600      	movs	r6, #0
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	f1c2 0320 	rsb	r3, r2, #32
 8000dca:	40d8      	lsrs	r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	4301      	orrs	r1, r0
 8000dd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ddc:	fa1f fe8c 	uxth.w	lr, ip
 8000de0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de4:	fb07 3610 	mls	r6, r7, r0, r3
 8000de8:	0c0b      	lsrs	r3, r1, #16
 8000dea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dee:	fb00 f60e 	mul.w	r6, r0, lr
 8000df2:	429e      	cmp	r6, r3
 8000df4:	fa04 f402 	lsl.w	r4, r4, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x260>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e02:	d22f      	bcs.n	8000e64 <__udivmoddi4+0x2b8>
 8000e04:	429e      	cmp	r6, r3
 8000e06:	d92d      	bls.n	8000e64 <__udivmoddi4+0x2b8>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1b9b      	subs	r3, r3, r6
 8000e0e:	b289      	uxth	r1, r1
 8000e10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e14:	fb07 3316 	mls	r3, r7, r6, r3
 8000e18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e20:	428b      	cmp	r3, r1
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x28a>
 8000e24:	eb1c 0101 	adds.w	r1, ip, r1
 8000e28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e2c:	d216      	bcs.n	8000e5c <__udivmoddi4+0x2b0>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d914      	bls.n	8000e5c <__udivmoddi4+0x2b0>
 8000e32:	3e02      	subs	r6, #2
 8000e34:	4461      	add	r1, ip
 8000e36:	1ac9      	subs	r1, r1, r3
 8000e38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e3c:	e738      	b.n	8000cb0 <__udivmoddi4+0x104>
 8000e3e:	462e      	mov	r6, r5
 8000e40:	4628      	mov	r0, r5
 8000e42:	e705      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000e44:	4606      	mov	r6, r0
 8000e46:	e6e3      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e48:	4618      	mov	r0, r3
 8000e4a:	e6f8      	b.n	8000c3e <__udivmoddi4+0x92>
 8000e4c:	454b      	cmp	r3, r9
 8000e4e:	d2a9      	bcs.n	8000da4 <__udivmoddi4+0x1f8>
 8000e50:	ebb9 0802 	subs.w	r8, r9, r2
 8000e54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e58:	3801      	subs	r0, #1
 8000e5a:	e7a3      	b.n	8000da4 <__udivmoddi4+0x1f8>
 8000e5c:	4646      	mov	r6, r8
 8000e5e:	e7ea      	b.n	8000e36 <__udivmoddi4+0x28a>
 8000e60:	4620      	mov	r0, r4
 8000e62:	e794      	b.n	8000d8e <__udivmoddi4+0x1e2>
 8000e64:	4640      	mov	r0, r8
 8000e66:	e7d1      	b.n	8000e0c <__udivmoddi4+0x260>
 8000e68:	46d0      	mov	r8, sl
 8000e6a:	e77b      	b.n	8000d64 <__udivmoddi4+0x1b8>
 8000e6c:	3b02      	subs	r3, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	e732      	b.n	8000cd8 <__udivmoddi4+0x12c>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e709      	b.n	8000c8a <__udivmoddi4+0xde>
 8000e76:	4464      	add	r4, ip
 8000e78:	3802      	subs	r0, #2
 8000e7a:	e742      	b.n	8000d02 <__udivmoddi4+0x156>

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e84:	f002 f876 	bl	8002f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e88:	f000 f888 	bl	8000f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8c:	f000 fb9c 	bl	80015c8 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000e90:	f000 fac6 	bl	8001420 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000e94:	f000 f9ac 	bl	80011f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e98:	f000 f9fe 	bl	8001298 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000e9c:	f000 f90a 	bl	80010b4 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000ea0:	f000 fb68 	bl	8001574 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8000ea4:	f000 fa4c 	bl	8001340 <MX_TIM4_Init>
  MX_I2C1_Init();
 8000ea8:	f000 f8d6 	bl	8001058 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000eac:	f009 fd6c 	bl	800a988 <OLED_Init>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4822      	ldr	r0, [pc, #136]	; (8000f3c <main+0xbc>)
 8000eb4:	f004 fa70 	bl	8005398 <HAL_TIM_IC_Start_IT>

  HAL_UART_Transmit_IT(&huart3, (uint8_t *) aRxBuffer, 50);
 8000eb8:	2232      	movs	r2, #50	; 0x32
 8000eba:	4921      	ldr	r1, [pc, #132]	; (8000f40 <main+0xc0>)
 8000ebc:	4821      	ldr	r0, [pc, #132]	; (8000f44 <main+0xc4>)
 8000ebe:	f005 fe5c 	bl	8006b7a <HAL_UART_Transmit_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ec2:	f006 fe6b 	bl	8007b9c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ec6:	4a20      	ldr	r2, [pc, #128]	; (8000f48 <main+0xc8>)
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4820      	ldr	r0, [pc, #128]	; (8000f4c <main+0xcc>)
 8000ecc:	f006 feb0 	bl	8007c30 <osThreadNew>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4a1f      	ldr	r2, [pc, #124]	; (8000f50 <main+0xd0>)
 8000ed4:	6013      	str	r3, [r2, #0]

  /* creation of showTask */
  showTaskHandle = osThreadNew(show, NULL, &showTask_attributes);
 8000ed6:	4a1f      	ldr	r2, [pc, #124]	; (8000f54 <main+0xd4>)
 8000ed8:	2100      	movs	r1, #0
 8000eda:	481f      	ldr	r0, [pc, #124]	; (8000f58 <main+0xd8>)
 8000edc:	f006 fea8 	bl	8007c30 <osThreadNew>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4a1e      	ldr	r2, [pc, #120]	; (8000f5c <main+0xdc>)
 8000ee4:	6013      	str	r3, [r2, #0]

  /* creation of motorTask */
  motorTaskHandle = osThreadNew(motor, NULL, &motorTask_attributes);
 8000ee6:	4a1e      	ldr	r2, [pc, #120]	; (8000f60 <main+0xe0>)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	481e      	ldr	r0, [pc, #120]	; (8000f64 <main+0xe4>)
 8000eec:	f006 fea0 	bl	8007c30 <osThreadNew>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	4a1d      	ldr	r2, [pc, #116]	; (8000f68 <main+0xe8>)
 8000ef4:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(encoder, NULL, &encoderTask_attributes);
 8000ef6:	4a1d      	ldr	r2, [pc, #116]	; (8000f6c <main+0xec>)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	481d      	ldr	r0, [pc, #116]	; (8000f70 <main+0xf0>)
 8000efc:	f006 fe98 	bl	8007c30 <osThreadNew>
 8000f00:	4603      	mov	r3, r0
 8000f02:	4a1c      	ldr	r2, [pc, #112]	; (8000f74 <main+0xf4>)
 8000f04:	6013      	str	r3, [r2, #0]

  /* creation of ultraTask */
  ultraTaskHandle = osThreadNew(ultra, NULL, &ultraTask_attributes);
 8000f06:	4a1c      	ldr	r2, [pc, #112]	; (8000f78 <main+0xf8>)
 8000f08:	2100      	movs	r1, #0
 8000f0a:	481c      	ldr	r0, [pc, #112]	; (8000f7c <main+0xfc>)
 8000f0c:	f006 fe90 	bl	8007c30 <osThreadNew>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4a1b      	ldr	r2, [pc, #108]	; (8000f80 <main+0x100>)
 8000f14:	6013      	str	r3, [r2, #0]

  /* creation of uartTask */
  uartTaskHandle = osThreadNew(uart, NULL, &uartTask_attributes);
 8000f16:	4a1b      	ldr	r2, [pc, #108]	; (8000f84 <main+0x104>)
 8000f18:	2100      	movs	r1, #0
 8000f1a:	481b      	ldr	r0, [pc, #108]	; (8000f88 <main+0x108>)
 8000f1c:	f006 fe88 	bl	8007c30 <osThreadNew>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a1a      	ldr	r2, [pc, #104]	; (8000f8c <main+0x10c>)
 8000f24:	6013      	str	r3, [r2, #0]

  /* creation of icm20948_task */
  icm20948_taskHandle = osThreadNew(icm20948, NULL, &icm20948_task_attributes);
 8000f26:	4a1a      	ldr	r2, [pc, #104]	; (8000f90 <main+0x110>)
 8000f28:	2100      	movs	r1, #0
 8000f2a:	481a      	ldr	r0, [pc, #104]	; (8000f94 <main+0x114>)
 8000f2c:	f006 fe80 	bl	8007c30 <osThreadNew>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4a19      	ldr	r2, [pc, #100]	; (8000f98 <main+0x118>)
 8000f34:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f36:	f006 fe55 	bl	8007be4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <main+0xba>
 8000f3c:	200001e0 	.word	0x200001e0
 8000f40:	200002d0 	.word	0x200002d0
 8000f44:	20000270 	.word	0x20000270
 8000f48:	0800c198 	.word	0x0800c198
 8000f4c:	08002369 	.word	0x08002369
 8000f50:	200002b4 	.word	0x200002b4
 8000f54:	0800c1bc 	.word	0x0800c1bc
 8000f58:	080023b9 	.word	0x080023b9
 8000f5c:	200002b8 	.word	0x200002b8
 8000f60:	0800c1e0 	.word	0x0800c1e0
 8000f64:	08002439 	.word	0x08002439
 8000f68:	200002bc 	.word	0x200002bc
 8000f6c:	0800c204 	.word	0x0800c204
 8000f70:	08002479 	.word	0x08002479
 8000f74:	200002c0 	.word	0x200002c0
 8000f78:	0800c228 	.word	0x0800c228
 8000f7c:	080025ed 	.word	0x080025ed
 8000f80:	200002c4 	.word	0x200002c4
 8000f84:	0800c24c 	.word	0x0800c24c
 8000f88:	08002639 	.word	0x08002639
 8000f8c:	200002c8 	.word	0x200002c8
 8000f90:	0800c270 	.word	0x0800c270
 8000f94:	0800277d 	.word	0x0800277d
 8000f98:	200002cc 	.word	0x200002cc

08000f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b094      	sub	sp, #80	; 0x50
 8000fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	f107 0320 	add.w	r3, r7, #32
 8000fa6:	2230      	movs	r2, #48	; 0x30
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f009 fdbc 	bl	800ab28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	4b22      	ldr	r3, [pc, #136]	; (8001050 <SystemClock_Config+0xb4>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	4a21      	ldr	r2, [pc, #132]	; (8001050 <SystemClock_Config+0xb4>)
 8000fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fce:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <SystemClock_Config+0xb4>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <SystemClock_Config+0xb8>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	; (8001054 <SystemClock_Config+0xb8>)
 8000fe6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <SystemClock_Config+0xb8>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001000:	2310      	movs	r3, #16
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001004:	2300      	movs	r3, #0
 8001006:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001008:	f107 0320 	add.w	r3, r7, #32
 800100c:	4618      	mov	r0, r3
 800100e:	f003 fba1 	bl	8004754 <HAL_RCC_OscConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001018:	f001 fc38 	bl	800288c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800101c:	230f      	movs	r3, #15
 800101e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f003 fe04 	bl	8004c44 <HAL_RCC_ClockConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001042:	f001 fc23 	bl	800288c <Error_Handler>
  }
}
 8001046:	bf00      	nop
 8001048:	3750      	adds	r7, #80	; 0x50
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800
 8001054:	40007000 	.word	0x40007000

08001058 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_I2C1_Init+0x50>)
 800105e:	4a13      	ldr	r2, [pc, #76]	; (80010ac <MX_I2C1_Init+0x54>)
 8001060:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_I2C1_Init+0x50>)
 8001064:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <MX_I2C1_Init+0x58>)
 8001066:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_I2C1_Init+0x50>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_I2C1_Init+0x50>)
 8001070:	2200      	movs	r2, #0
 8001072:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_I2C1_Init+0x50>)
 8001076:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800107a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <MX_I2C1_Init+0x50>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_I2C1_Init+0x50>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <MX_I2C1_Init+0x50>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_I2C1_Init+0x50>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <MX_I2C1_Init+0x50>)
 8001096:	f002 fb75 	bl	8003784 <HAL_I2C_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010a0:	f001 fbf4 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200000b4 	.word	0x200000b4
 80010ac:	40005400 	.word	0x40005400
 80010b0:	00061a80 	.word	0x00061a80

080010b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b096      	sub	sp, #88	; 0x58
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]
 80010e2:	615a      	str	r2, [r3, #20]
 80010e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2220      	movs	r2, #32
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f009 fd1b 	bl	800ab28 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010f2:	4b3d      	ldr	r3, [pc, #244]	; (80011e8 <MX_TIM1_Init+0x134>)
 80010f4:	4a3d      	ldr	r2, [pc, #244]	; (80011ec <MX_TIM1_Init+0x138>)
 80010f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80010f8:	4b3b      	ldr	r3, [pc, #236]	; (80011e8 <MX_TIM1_Init+0x134>)
 80010fa:	22a0      	movs	r2, #160	; 0xa0
 80010fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fe:	4b3a      	ldr	r3, [pc, #232]	; (80011e8 <MX_TIM1_Init+0x134>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001104:	4b38      	ldr	r3, [pc, #224]	; (80011e8 <MX_TIM1_Init+0x134>)
 8001106:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800110a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110c:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <MX_TIM1_Init+0x134>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001112:	4b35      	ldr	r3, [pc, #212]	; (80011e8 <MX_TIM1_Init+0x134>)
 8001114:	2200      	movs	r2, #0
 8001116:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001118:	4b33      	ldr	r3, [pc, #204]	; (80011e8 <MX_TIM1_Init+0x134>)
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800111e:	4832      	ldr	r0, [pc, #200]	; (80011e8 <MX_TIM1_Init+0x134>)
 8001120:	f003 ff70 	bl	8005004 <HAL_TIM_Base_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800112a:	f001 fbaf 	bl	800288c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800112e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001132:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001134:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001138:	4619      	mov	r1, r3
 800113a:	482b      	ldr	r0, [pc, #172]	; (80011e8 <MX_TIM1_Init+0x134>)
 800113c:	f004 fdee 	bl	8005d1c <HAL_TIM_ConfigClockSource>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001146:	f001 fba1 	bl	800288c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800114a:	4827      	ldr	r0, [pc, #156]	; (80011e8 <MX_TIM1_Init+0x134>)
 800114c:	f003 ffa9 	bl	80050a2 <HAL_TIM_PWM_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001156:	f001 fb99 	bl	800288c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001162:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001166:	4619      	mov	r1, r3
 8001168:	481f      	ldr	r0, [pc, #124]	; (80011e8 <MX_TIM1_Init+0x134>)
 800116a:	f005 fb45 	bl	80067f8 <HAL_TIMEx_MasterConfigSynchronization>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001174:	f001 fb8a 	bl	800288c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001178:	2360      	movs	r3, #96	; 0x60
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001180:	2300      	movs	r3, #0
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800118c:	2300      	movs	r3, #0
 800118e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001194:	220c      	movs	r2, #12
 8001196:	4619      	mov	r1, r3
 8001198:	4813      	ldr	r0, [pc, #76]	; (80011e8 <MX_TIM1_Init+0x134>)
 800119a:	f004 fcfd 	bl	8005b98 <HAL_TIM_PWM_ConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80011a4:	f001 fb72 	bl	800288c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	4619      	mov	r1, r3
 80011ca:	4807      	ldr	r0, [pc, #28]	; (80011e8 <MX_TIM1_Init+0x134>)
 80011cc:	f005 fb90 	bl	80068f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80011d6:	f001 fb59 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011da:	4803      	ldr	r0, [pc, #12]	; (80011e8 <MX_TIM1_Init+0x134>)
 80011dc:	f001 fd06 	bl	8002bec <HAL_TIM_MspPostInit>

}
 80011e0:	bf00      	nop
 80011e2:	3758      	adds	r7, #88	; 0x58
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000108 	.word	0x20000108
 80011ec:	40010000 	.word	0x40010000

080011f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08c      	sub	sp, #48	; 0x30
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	2224      	movs	r2, #36	; 0x24
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f009 fc92 	bl	800ab28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800120c:	4b21      	ldr	r3, [pc, #132]	; (8001294 <MX_TIM2_Init+0xa4>)
 800120e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001212:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001214:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <MX_TIM2_Init+0xa4>)
 8001216:	2200      	movs	r2, #0
 8001218:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121a:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <MX_TIM2_Init+0xa4>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001220:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <MX_TIM2_Init+0xa4>)
 8001222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001226:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <MX_TIM2_Init+0xa4>)
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <MX_TIM2_Init+0xa4>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001234:	2303      	movs	r3, #3
 8001236:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800123c:	2301      	movs	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001244:	230a      	movs	r3, #10
 8001246:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800124c:	2301      	movs	r3, #1
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001254:	230a      	movs	r3, #10
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	4619      	mov	r1, r3
 800125e:	480d      	ldr	r0, [pc, #52]	; (8001294 <MX_TIM2_Init+0xa4>)
 8001260:	f004 f9c2 	bl	80055e8 <HAL_TIM_Encoder_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800126a:	f001 fb0f 	bl	800288c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	4619      	mov	r1, r3
 800127a:	4806      	ldr	r0, [pc, #24]	; (8001294 <MX_TIM2_Init+0xa4>)
 800127c:	f005 fabc 	bl	80067f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001286:	f001 fb01 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	3730      	adds	r7, #48	; 0x30
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000150 	.word	0x20000150

08001298 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	; 0x30
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800129e:	f107 030c 	add.w	r3, r7, #12
 80012a2:	2224      	movs	r2, #36	; 0x24
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f009 fc3e 	bl	800ab28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012b4:	4b20      	ldr	r3, [pc, #128]	; (8001338 <MX_TIM3_Init+0xa0>)
 80012b6:	4a21      	ldr	r2, [pc, #132]	; (800133c <MX_TIM3_Init+0xa4>)
 80012b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012ba:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <MX_TIM3_Init+0xa0>)
 80012bc:	2200      	movs	r2, #0
 80012be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c0:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <MX_TIM3_Init+0xa0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <MX_TIM3_Init+0xa0>)
 80012c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ce:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <MX_TIM3_Init+0xa0>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <MX_TIM3_Init+0xa0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012da:	2303      	movs	r3, #3
 80012dc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012e2:	2301      	movs	r3, #1
 80012e4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80012ea:	230a      	movs	r3, #10
 80012ec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012f2:	2301      	movs	r3, #1
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80012fa:	230a      	movs	r3, #10
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	4619      	mov	r1, r3
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <MX_TIM3_Init+0xa0>)
 8001306:	f004 f96f 	bl	80055e8 <HAL_TIM_Encoder_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001310:	f001 fabc 	bl	800288c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001314:	2300      	movs	r3, #0
 8001316:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4619      	mov	r1, r3
 8001320:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_TIM3_Init+0xa0>)
 8001322:	f005 fa69 	bl	80067f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800132c:	f001 faae 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	3730      	adds	r7, #48	; 0x30
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000198 	.word	0x20000198
 800133c:	40000400 	.word	0x40000400

08001340 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001346:	f107 0318 	add.w	r3, r7, #24
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001354:	f107 0310 	add.w	r3, r7, #16
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800135e:	463b      	mov	r3, r7
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800136a:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <MX_TIM4_Init+0xd8>)
 800136c:	4a2b      	ldr	r2, [pc, #172]	; (800141c <MX_TIM4_Init+0xdc>)
 800136e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001370:	4b29      	ldr	r3, [pc, #164]	; (8001418 <MX_TIM4_Init+0xd8>)
 8001372:	220f      	movs	r2, #15
 8001374:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001376:	4b28      	ldr	r3, [pc, #160]	; (8001418 <MX_TIM4_Init+0xd8>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 800137c:	4b26      	ldr	r3, [pc, #152]	; (8001418 <MX_TIM4_Init+0xd8>)
 800137e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001382:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001384:	4b24      	ldr	r3, [pc, #144]	; (8001418 <MX_TIM4_Init+0xd8>)
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <MX_TIM4_Init+0xd8>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001390:	4821      	ldr	r0, [pc, #132]	; (8001418 <MX_TIM4_Init+0xd8>)
 8001392:	f003 fe37 	bl	8005004 <HAL_TIM_Base_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 800139c:	f001 fa76 	bl	800288c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013a6:	f107 0318 	add.w	r3, r7, #24
 80013aa:	4619      	mov	r1, r3
 80013ac:	481a      	ldr	r0, [pc, #104]	; (8001418 <MX_TIM4_Init+0xd8>)
 80013ae:	f004 fcb5 	bl	8005d1c <HAL_TIM_ConfigClockSource>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80013b8:	f001 fa68 	bl	800288c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80013bc:	4816      	ldr	r0, [pc, #88]	; (8001418 <MX_TIM4_Init+0xd8>)
 80013be:	f003 ff91 	bl	80052e4 <HAL_TIM_IC_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80013c8:	f001 fa60 	bl	800288c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013cc:	2300      	movs	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4619      	mov	r1, r3
 80013da:	480f      	ldr	r0, [pc, #60]	; (8001418 <MX_TIM4_Init+0xd8>)
 80013dc:	f005 fa0c 	bl	80067f8 <HAL_TIMEx_MasterConfigSynchronization>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80013e6:	f001 fa51 	bl	800288c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013ea:	2300      	movs	r3, #0
 80013ec:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013ee:	2301      	movs	r3, #1
 80013f0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013fa:	463b      	mov	r3, r7
 80013fc:	2200      	movs	r2, #0
 80013fe:	4619      	mov	r1, r3
 8001400:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_TIM4_Init+0xd8>)
 8001402:	f004 fb2d 	bl	8005a60 <HAL_TIM_IC_ConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 800140c:	f001 fa3e 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	3728      	adds	r7, #40	; 0x28
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200001e0 	.word	0x200001e0
 800141c:	40000800 	.word	0x40000800

08001420 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b096      	sub	sp, #88	; 0x58
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001426:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001434:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800143e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]
 800144e:	615a      	str	r2, [r3, #20]
 8001450:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2220      	movs	r2, #32
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f009 fb65 	bl	800ab28 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800145e:	4b43      	ldr	r3, [pc, #268]	; (800156c <MX_TIM8_Init+0x14c>)
 8001460:	4a43      	ldr	r2, [pc, #268]	; (8001570 <MX_TIM8_Init+0x150>)
 8001462:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001464:	4b41      	ldr	r3, [pc, #260]	; (800156c <MX_TIM8_Init+0x14c>)
 8001466:	2200      	movs	r2, #0
 8001468:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146a:	4b40      	ldr	r3, [pc, #256]	; (800156c <MX_TIM8_Init+0x14c>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001470:	4b3e      	ldr	r3, [pc, #248]	; (800156c <MX_TIM8_Init+0x14c>)
 8001472:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001476:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001478:	4b3c      	ldr	r3, [pc, #240]	; (800156c <MX_TIM8_Init+0x14c>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800147e:	4b3b      	ldr	r3, [pc, #236]	; (800156c <MX_TIM8_Init+0x14c>)
 8001480:	2200      	movs	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001484:	4b39      	ldr	r3, [pc, #228]	; (800156c <MX_TIM8_Init+0x14c>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800148a:	4838      	ldr	r0, [pc, #224]	; (800156c <MX_TIM8_Init+0x14c>)
 800148c:	f003 fdba 	bl	8005004 <HAL_TIM_Base_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001496:	f001 f9f9 	bl	800288c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80014a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014a4:	4619      	mov	r1, r3
 80014a6:	4831      	ldr	r0, [pc, #196]	; (800156c <MX_TIM8_Init+0x14c>)
 80014a8:	f004 fc38 	bl	8005d1c <HAL_TIM_ConfigClockSource>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80014b2:	f001 f9eb 	bl	800288c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80014b6:	482d      	ldr	r0, [pc, #180]	; (800156c <MX_TIM8_Init+0x14c>)
 80014b8:	f003 fdf3 	bl	80050a2 <HAL_TIM_PWM_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80014c2:	f001 f9e3 	bl	800288c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014d2:	4619      	mov	r1, r3
 80014d4:	4825      	ldr	r0, [pc, #148]	; (800156c <MX_TIM8_Init+0x14c>)
 80014d6:	f005 f98f 	bl	80067f8 <HAL_TIMEx_MasterConfigSynchronization>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80014e0:	f001 f9d4 	bl	800288c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e4:	2360      	movs	r3, #96	; 0x60
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014f0:	2300      	movs	r3, #0
 80014f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014fc:	2300      	movs	r3, #0
 80014fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001504:	2200      	movs	r2, #0
 8001506:	4619      	mov	r1, r3
 8001508:	4818      	ldr	r0, [pc, #96]	; (800156c <MX_TIM8_Init+0x14c>)
 800150a:	f004 fb45 	bl	8005b98 <HAL_TIM_PWM_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001514:	f001 f9ba 	bl	800288c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151c:	2204      	movs	r2, #4
 800151e:	4619      	mov	r1, r3
 8001520:	4812      	ldr	r0, [pc, #72]	; (800156c <MX_TIM8_Init+0x14c>)
 8001522:	f004 fb39 	bl	8005b98 <HAL_TIM_PWM_ConfigChannel>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800152c:	f001 f9ae 	bl	800288c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001548:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	4619      	mov	r1, r3
 8001552:	4806      	ldr	r0, [pc, #24]	; (800156c <MX_TIM8_Init+0x14c>)
 8001554:	f005 f9cc 	bl	80068f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800155e:	f001 f995 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	3758      	adds	r7, #88	; 0x58
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000228 	.word	0x20000228
 8001570:	40010400 	.word	0x40010400

08001574 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <MX_USART3_UART_Init+0x4c>)
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <MX_USART3_UART_Init+0x50>)
 800157c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <MX_USART3_UART_Init+0x4c>)
 8001580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001584:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <MX_USART3_UART_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <MX_USART3_UART_Init+0x4c>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <MX_USART3_UART_Init+0x4c>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <MX_USART3_UART_Init+0x4c>)
 800159a:	220c      	movs	r2, #12
 800159c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <MX_USART3_UART_Init+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <MX_USART3_UART_Init+0x4c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015aa:	4805      	ldr	r0, [pc, #20]	; (80015c0 <MX_USART3_UART_Init+0x4c>)
 80015ac:	f005 fa06 	bl	80069bc <HAL_UART_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015b6:	f001 f969 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000270 	.word	0x20000270
 80015c4:	40004800 	.word	0x40004800

080015c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b63      	ldr	r3, [pc, #396]	; (8001770 <MX_GPIO_Init+0x1a8>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a62      	ldr	r2, [pc, #392]	; (8001770 <MX_GPIO_Init+0x1a8>)
 80015e8:	f043 0310 	orr.w	r3, r3, #16
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b60      	ldr	r3, [pc, #384]	; (8001770 <MX_GPIO_Init+0x1a8>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0310 	and.w	r3, r3, #16
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b5c      	ldr	r3, [pc, #368]	; (8001770 <MX_GPIO_Init+0x1a8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a5b      	ldr	r2, [pc, #364]	; (8001770 <MX_GPIO_Init+0x1a8>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b59      	ldr	r3, [pc, #356]	; (8001770 <MX_GPIO_Init+0x1a8>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	4b55      	ldr	r3, [pc, #340]	; (8001770 <MX_GPIO_Init+0x1a8>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a54      	ldr	r2, [pc, #336]	; (8001770 <MX_GPIO_Init+0x1a8>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b52      	ldr	r3, [pc, #328]	; (8001770 <MX_GPIO_Init+0x1a8>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	4b4e      	ldr	r3, [pc, #312]	; (8001770 <MX_GPIO_Init+0x1a8>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a4d      	ldr	r2, [pc, #308]	; (8001770 <MX_GPIO_Init+0x1a8>)
 800163c:	f043 0308 	orr.w	r3, r3, #8
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b4b      	ldr	r3, [pc, #300]	; (8001770 <MX_GPIO_Init+0x1a8>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	4b47      	ldr	r3, [pc, #284]	; (8001770 <MX_GPIO_Init+0x1a8>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a46      	ldr	r2, [pc, #280]	; (8001770 <MX_GPIO_Init+0x1a8>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b44      	ldr	r3, [pc, #272]	; (8001770 <MX_GPIO_Init+0x1a8>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800166a:	2200      	movs	r2, #0
 800166c:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8001670:	4840      	ldr	r0, [pc, #256]	; (8001774 <MX_GPIO_Init+0x1ac>)
 8001672:	f002 f86d 	bl	8003750 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001676:	2200      	movs	r2, #0
 8001678:	213c      	movs	r1, #60	; 0x3c
 800167a:	483f      	ldr	r0, [pc, #252]	; (8001778 <MX_GPIO_Init+0x1b0>)
 800167c:	f002 f868 	bl	8003750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001686:	483d      	ldr	r0, [pc, #244]	; (800177c <MX_GPIO_Init+0x1b4>)
 8001688:	f002 f862 	bl	8003750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001692:	483b      	ldr	r0, [pc, #236]	; (8001780 <MX_GPIO_Init+0x1b8>)
 8001694:	f002 f85c 	bl	8003750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001698:	2201      	movs	r2, #1
 800169a:	2102      	movs	r1, #2
 800169c:	4835      	ldr	r0, [pc, #212]	; (8001774 <MX_GPIO_Init+0x1ac>)
 800169e:	f002 f857 	bl	8003750 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80016a2:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 80016a6:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4619      	mov	r1, r3
 80016ba:	482e      	ldr	r0, [pc, #184]	; (8001774 <MX_GPIO_Init+0x1ac>)
 80016bc:	f001 fe94 	bl	80033e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 80016c0:	233c      	movs	r3, #60	; 0x3c
 80016c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c4:	2301      	movs	r3, #1
 80016c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016cc:	2302      	movs	r3, #2
 80016ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	4828      	ldr	r0, [pc, #160]	; (8001778 <MX_GPIO_Init+0x1b0>)
 80016d8:	f001 fe86 	bl	80033e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 80016dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016ea:	2301      	movs	r3, #1
 80016ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	4821      	ldr	r0, [pc, #132]	; (800177c <MX_GPIO_Init+0x1b4>)
 80016f6:	f001 fe77 	bl	80033e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 80016fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001700:	2300      	movs	r3, #0
 8001702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4619      	mov	r1, r3
 800170e:	481c      	ldr	r0, [pc, #112]	; (8001780 <MX_GPIO_Init+0x1b8>)
 8001710:	f001 fe6a 	bl	80033e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171a:	2301      	movs	r3, #1
 800171c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	4814      	ldr	r0, [pc, #80]	; (8001780 <MX_GPIO_Init+0x1b8>)
 800172e:	f001 fe5b 	bl	80033e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_SW_Pin */
  GPIO_InitStruct.Pin = ENABLE_SW_Pin;
 8001732:	2301      	movs	r3, #1
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENABLE_SW_GPIO_Port, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	480b      	ldr	r0, [pc, #44]	; (8001774 <MX_GPIO_Init+0x1ac>)
 8001746:	f001 fe4f 	bl	80033e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800174a:	2302      	movs	r3, #2
 800174c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174e:	2301      	movs	r3, #1
 8001750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001756:	2302      	movs	r3, #2
 8001758:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	4804      	ldr	r0, [pc, #16]	; (8001774 <MX_GPIO_Init+0x1ac>)
 8001762:	f001 fe41 	bl	80033e8 <HAL_GPIO_Init>

}
 8001766:	bf00      	nop
 8001768:	3728      	adds	r7, #40	; 0x28
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	40021000 	.word	0x40021000
 8001778:	40020000 	.word	0x40020000
 800177c:	40020400 	.word	0x40020400
 8001780:	40020c00 	.word	0x40020c00

08001784 <realignWheels>:

/* USER CODE BEGIN 4 */
//User functions
void userFunctions(){}
void realignWheels(){
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	htim1.Instance->CCR4 = 170; //right
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <realignWheels+0x28>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	22aa      	movs	r2, #170	; 0xaa
 800178e:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(400);
 8001790:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001794:	f006 fadf 	bl	8007d56 <osDelay>
	htim1.Instance->CCR4 = 147; //left
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <realignWheels+0x28>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2293      	movs	r2, #147	; 0x93
 800179e:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(300);
 80017a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80017a4:	f006 fad7 	bl	8007d56 <osDelay>
//	htim1.Instance->CCR4 = ; //center
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000108 	.word	0x20000108

080017b0 <motorActivate>:

//void motorActivate(double pwmVal_L, double pwmVal_R, uint8_t dir, float duration, uint8_t servoVal){
void motorActivate(){
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
//	duration = 2363; //1m
	if(dir == 1){
 80017b6:	4b36      	ldr	r3, [pc, #216]	; (8001890 <motorActivate+0xe0>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d114      	bne.n	80017e8 <motorActivate+0x38>
		HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 80017be:	2201      	movs	r2, #1
 80017c0:	2108      	movs	r1, #8
 80017c2:	4834      	ldr	r0, [pc, #208]	; (8001894 <motorActivate+0xe4>)
 80017c4:	f001 ffc4 	bl	8003750 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
 80017c8:	2201      	movs	r2, #1
 80017ca:	2110      	movs	r1, #16
 80017cc:	4831      	ldr	r0, [pc, #196]	; (8001894 <motorActivate+0xe4>)
 80017ce:	f001 ffbf 	bl	8003750 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2104      	movs	r1, #4
 80017d6:	482f      	ldr	r0, [pc, #188]	; (8001894 <motorActivate+0xe4>)
 80017d8:	f001 ffba 	bl	8003750 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	2120      	movs	r1, #32
 80017e0:	482c      	ldr	r0, [pc, #176]	; (8001894 <motorActivate+0xe4>)
 80017e2:	f001 ffb5 	bl	8003750 <HAL_GPIO_WritePin>
 80017e6:	e013      	b.n	8001810 <motorActivate+0x60>
	}else{
		HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2108      	movs	r1, #8
 80017ec:	4829      	ldr	r0, [pc, #164]	; (8001894 <motorActivate+0xe4>)
 80017ee:	f001 ffaf 	bl	8003750 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2110      	movs	r1, #16
 80017f6:	4827      	ldr	r0, [pc, #156]	; (8001894 <motorActivate+0xe4>)
 80017f8:	f001 ffaa 	bl	8003750 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
 80017fc:	2201      	movs	r2, #1
 80017fe:	2104      	movs	r1, #4
 8001800:	4824      	ldr	r0, [pc, #144]	; (8001894 <motorActivate+0xe4>)
 8001802:	f001 ffa5 	bl	8003750 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
 8001806:	2201      	movs	r2, #1
 8001808:	2120      	movs	r1, #32
 800180a:	4822      	ldr	r0, [pc, #136]	; (8001894 <motorActivate+0xe4>)
 800180c:	f001 ffa0 	bl	8003750 <HAL_GPIO_WritePin>
	}
	htim1.Instance->CCR4 = servoVal;
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <motorActivate+0xe8>)
 8001812:	781a      	ldrb	r2, [r3, #0]
 8001814:	4b21      	ldr	r3, [pc, #132]	; (800189c <motorActivate+0xec>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	641a      	str	r2, [r3, #64]	; 0x40
//	osDelay(400);

	uint32_t tick = HAL_GetTick();
 800181a:	f001 fc11 	bl	8003040 <HAL_GetTick>
 800181e:	6178      	str	r0, [r7, #20]

	double pwml = pwmVal_L;
 8001820:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <motorActivate+0xf0>)
 8001822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001826:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double pwmr = pwmVal_R;
 800182a:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <motorActivate+0xf4>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	e9c7 2300 	strd	r2, r3, [r7]

	while((HAL_GetTick()-tick)<=(duration)){
 8001834:	e00f      	b.n	8001856 <motorActivate+0xa6>
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1,pwml);
 8001836:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <motorActivate+0xf8>)
 8001838:	681c      	ldr	r4, [r3, #0]
 800183a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800183e:	f7ff f97d 	bl	8000b3c <__aeabi_d2uiz>
 8001842:	4603      	mov	r3, r0
 8001844:	6363      	str	r3, [r4, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2,pwmr);
 8001846:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <motorActivate+0xf8>)
 8001848:	681c      	ldr	r4, [r3, #0]
 800184a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800184e:	f7ff f975 	bl	8000b3c <__aeabi_d2uiz>
 8001852:	4603      	mov	r3, r0
 8001854:	63a3      	str	r3, [r4, #56]	; 0x38
	while((HAL_GetTick()-tick)<=(duration)){
 8001856:	f001 fbf3 	bl	8003040 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fe57 	bl	8000514 <__aeabi_ui2d>
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <motorActivate+0xfc>)
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	f7ff f948 	bl	8000b00 <__aeabi_dcmple>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1df      	bne.n	8001836 <motorActivate+0x86>
	}

	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1,0);
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <motorActivate+0xf8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2200      	movs	r2, #0
 800187c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2,0);
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <motorActivate+0xf8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2200      	movs	r2, #0
 8001884:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001886:	bf00      	nop
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	bd90      	pop	{r4, r7, pc}
 800188e:	bf00      	nop
 8001890:	20000020 	.word	0x20000020
 8001894:	40020000 	.word	0x40020000
 8001898:	20000021 	.word	0x20000021
 800189c:	20000108 	.word	0x20000108
 80018a0:	20000010 	.word	0x20000010
 80018a4:	20000018 	.word	0x20000018
 80018a8:	20000228 	.word	0x20000228
 80018ac:	20000308 	.word	0x20000308

080018b0 <gyrostraight>:
	servoVal = 150; //set servo dir
	duration = distance * 30 *0.415;
	motorActivate();
}

void gyrostraight(double local_pwmVal_L, double local_pwmVal_R, uint8_t local_dir, double distance){
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	ed87 0b06 	vstr	d0, [r7, #24]
 80018ba:	ed87 1b04 	vstr	d1, [r7, #16]
 80018be:	4603      	mov	r3, r0
 80018c0:	ed87 2b00 	vstr	d2, [r7]
 80018c4:	73fb      	strb	r3, [r7, #15]
	pwmVal_L = local_pwmVal_L; // pwm values
 80018c6:	49a4      	ldr	r1, [pc, #656]	; (8001b58 <gyrostraight+0x2a8>)
 80018c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018cc:	e9c1 2300 	strd	r2, r3, [r1]
	pwmVal_R = local_pwmVal_R;
 80018d0:	49a2      	ldr	r1, [pc, #648]	; (8001b5c <gyrostraight+0x2ac>)
 80018d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018d6:	e9c1 2300 	strd	r2, r3, [r1]
	dir = local_dir;
 80018da:	4aa1      	ldr	r2, [pc, #644]	; (8001b60 <gyrostraight+0x2b0>)
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	7013      	strb	r3, [r2, #0]
	reqduration = distance * 33 *0.415;
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	4b9f      	ldr	r3, [pc, #636]	; (8001b64 <gyrostraight+0x2b4>)
 80018e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018ea:	f7fe fe8d 	bl	8000608 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	a394      	add	r3, pc, #592	; (adr r3, 8001b48 <gyrostraight+0x298>)
 80018f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fc:	f7fe fe84 	bl	8000608 <__aeabi_dmul>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4998      	ldr	r1, [pc, #608]	; (8001b68 <gyrostraight+0x2b8>)
 8001906:	e9c1 2300 	strd	r2, r3, [r1]
	curduration = 0;
 800190a:	4998      	ldr	r1, [pc, #608]	; (8001b6c <gyrostraight+0x2bc>)
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	e9c1 2300 	strd	r2, r3, [r1]
	gyrosumsigned = 0;
 8001918:	4995      	ldr	r1, [pc, #596]	; (8001b70 <gyrostraight+0x2c0>)
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	e9c1 2300 	strd	r2, r3, [r1]
	servodefault = 147;
 8001926:	4b93      	ldr	r3, [pc, #588]	; (8001b74 <gyrostraight+0x2c4>)
 8001928:	2293      	movs	r2, #147	; 0x93
 800192a:	701a      	strb	r2, [r3, #0]
	while(curduration<=(reqduration)*0.8){
 800192c:	e0ac      	b.n	8001a88 <gyrostraight+0x1d8>
		servoVal = servodefault;
 800192e:	4b91      	ldr	r3, [pc, #580]	; (8001b74 <gyrostraight+0x2c4>)
 8001930:	781a      	ldrb	r2, [r3, #0]
 8001932:	4b91      	ldr	r3, [pc, #580]	; (8001b78 <gyrostraight+0x2c8>)
 8001934:	701a      	strb	r2, [r3, #0]
		if(dir==1){
 8001936:	4b8a      	ldr	r3, [pc, #552]	; (8001b60 <gyrostraight+0x2b0>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d143      	bne.n	80019c6 <gyrostraight+0x116>
			if(gyrosumsigned>250){ //going left
 800193e:	4b8c      	ldr	r3, [pc, #560]	; (8001b70 <gyrostraight+0x2c0>)
 8001940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001944:	2afb      	cmp	r2, #251	; 0xfb
 8001946:	f173 0300 	sbcs.w	r3, r3, #0
 800194a:	db15      	blt.n	8001978 <gyrostraight+0xc8>
				//servoVal = correctionright;
				servodefault+=1;
 800194c:	4b89      	ldr	r3, [pc, #548]	; (8001b74 <gyrostraight+0x2c4>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	3301      	adds	r3, #1
 8001952:	b2da      	uxtb	r2, r3
 8001954:	4b87      	ldr	r3, [pc, #540]	; (8001b74 <gyrostraight+0x2c4>)
 8001956:	701a      	strb	r2, [r3, #0]
				duration = 30;
 8001958:	4988      	ldr	r1, [pc, #544]	; (8001b7c <gyrostraight+0x2cc>)
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	4b88      	ldr	r3, [pc, #544]	; (8001b80 <gyrostraight+0x2d0>)
 8001960:	e9c1 2300 	strd	r2, r3, [r1]
				motorActivate();
 8001964:	f7ff ff24 	bl	80017b0 <motorActivate>
				gyrosumsigned=0;
 8001968:	4981      	ldr	r1, [pc, #516]	; (8001b70 <gyrostraight+0x2c0>)
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	e9c1 2300 	strd	r2, r3, [r1]
 8001976:	e06b      	b.n	8001a50 <gyrostraight+0x1a0>
			}else if(gyrosumsigned<-250){ //going right
 8001978:	4b7d      	ldr	r3, [pc, #500]	; (8001b70 <gyrostraight+0x2c0>)
 800197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197e:	f112 0ffa 	cmn.w	r2, #250	; 0xfa
 8001982:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8001986:	da15      	bge.n	80019b4 <gyrostraight+0x104>
				//servoVal = correctionright;
				servodefault-=1;
 8001988:	4b7a      	ldr	r3, [pc, #488]	; (8001b74 <gyrostraight+0x2c4>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	3b01      	subs	r3, #1
 800198e:	b2da      	uxtb	r2, r3
 8001990:	4b78      	ldr	r3, [pc, #480]	; (8001b74 <gyrostraight+0x2c4>)
 8001992:	701a      	strb	r2, [r3, #0]
				duration = 30;
 8001994:	4979      	ldr	r1, [pc, #484]	; (8001b7c <gyrostraight+0x2cc>)
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	4b79      	ldr	r3, [pc, #484]	; (8001b80 <gyrostraight+0x2d0>)
 800199c:	e9c1 2300 	strd	r2, r3, [r1]
				motorActivate();
 80019a0:	f7ff ff06 	bl	80017b0 <motorActivate>
				gyrosumsigned=0;
 80019a4:	4972      	ldr	r1, [pc, #456]	; (8001b70 <gyrostraight+0x2c0>)
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	e9c1 2300 	strd	r2, r3, [r1]
 80019b2:	e04d      	b.n	8001a50 <gyrostraight+0x1a0>
			}else{
				duration = 30;
 80019b4:	4971      	ldr	r1, [pc, #452]	; (8001b7c <gyrostraight+0x2cc>)
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	4b71      	ldr	r3, [pc, #452]	; (8001b80 <gyrostraight+0x2d0>)
 80019bc:	e9c1 2300 	strd	r2, r3, [r1]
				motorActivate();
 80019c0:	f7ff fef6 	bl	80017b0 <motorActivate>
 80019c4:	e044      	b.n	8001a50 <gyrostraight+0x1a0>
			}
		}else{
			if(gyrosumsigned>500){ //going left
 80019c6:	4b6a      	ldr	r3, [pc, #424]	; (8001b70 <gyrostraight+0x2c0>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	f240 11f5 	movw	r1, #501	; 0x1f5
 80019d0:	428a      	cmp	r2, r1
 80019d2:	f173 0300 	sbcs.w	r3, r3, #0
 80019d6:	db15      	blt.n	8001a04 <gyrostraight+0x154>
				//servoVal = correctionright;
				servodefault-=1;
 80019d8:	4b66      	ldr	r3, [pc, #408]	; (8001b74 <gyrostraight+0x2c4>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	3b01      	subs	r3, #1
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	4b64      	ldr	r3, [pc, #400]	; (8001b74 <gyrostraight+0x2c4>)
 80019e2:	701a      	strb	r2, [r3, #0]
				duration = 30;
 80019e4:	4965      	ldr	r1, [pc, #404]	; (8001b7c <gyrostraight+0x2cc>)
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	4b65      	ldr	r3, [pc, #404]	; (8001b80 <gyrostraight+0x2d0>)
 80019ec:	e9c1 2300 	strd	r2, r3, [r1]
				motorActivate();
 80019f0:	f7ff fede 	bl	80017b0 <motorActivate>
				gyrosumsigned=0;
 80019f4:	495e      	ldr	r1, [pc, #376]	; (8001b70 <gyrostraight+0x2c0>)
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	e9c1 2300 	strd	r2, r3, [r1]
 8001a02:	e025      	b.n	8001a50 <gyrostraight+0x1a0>
			}else if(gyrosumsigned<-500){ //going right
 8001a04:	4b5a      	ldr	r3, [pc, #360]	; (8001b70 <gyrostraight+0x2c0>)
 8001a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0a:	f512 7ffa 	cmn.w	r2, #500	; 0x1f4
 8001a0e:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8001a12:	da15      	bge.n	8001a40 <gyrostraight+0x190>
				//servoVal = correctionright;
				servodefault+=1;
 8001a14:	4b57      	ldr	r3, [pc, #348]	; (8001b74 <gyrostraight+0x2c4>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	4b55      	ldr	r3, [pc, #340]	; (8001b74 <gyrostraight+0x2c4>)
 8001a1e:	701a      	strb	r2, [r3, #0]
				duration = 30;
 8001a20:	4956      	ldr	r1, [pc, #344]	; (8001b7c <gyrostraight+0x2cc>)
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	4b56      	ldr	r3, [pc, #344]	; (8001b80 <gyrostraight+0x2d0>)
 8001a28:	e9c1 2300 	strd	r2, r3, [r1]
				motorActivate();
 8001a2c:	f7ff fec0 	bl	80017b0 <motorActivate>
				gyrosumsigned=0;
 8001a30:	494f      	ldr	r1, [pc, #316]	; (8001b70 <gyrostraight+0x2c0>)
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	e9c1 2300 	strd	r2, r3, [r1]
 8001a3e:	e007      	b.n	8001a50 <gyrostraight+0x1a0>
			}else{
				duration = 30;
 8001a40:	494e      	ldr	r1, [pc, #312]	; (8001b7c <gyrostraight+0x2cc>)
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	4b4e      	ldr	r3, [pc, #312]	; (8001b80 <gyrostraight+0x2d0>)
 8001a48:	e9c1 2300 	strd	r2, r3, [r1]
				motorActivate();
 8001a4c:	f7ff feb0 	bl	80017b0 <motorActivate>
			}
		}

		sprintf(icmTempMsg,"G:%+07d,",gyro[2]);
 8001a50:	4b4c      	ldr	r3, [pc, #304]	; (8001b84 <gyrostraight+0x2d4>)
 8001a52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a56:	461a      	mov	r2, r3
 8001a58:	494b      	ldr	r1, [pc, #300]	; (8001b88 <gyrostraight+0x2d8>)
 8001a5a:	484c      	ldr	r0, [pc, #304]	; (8001b8c <gyrostraight+0x2dc>)
 8001a5c:	f009 f95c 	bl	800ad18 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)&icmTempMsg, 10, 0xFFFF);
 8001a60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a64:	220a      	movs	r2, #10
 8001a66:	4949      	ldr	r1, [pc, #292]	; (8001b8c <gyrostraight+0x2dc>)
 8001a68:	4849      	ldr	r0, [pc, #292]	; (8001b90 <gyrostraight+0x2e0>)
 8001a6a:	f004 fff4 	bl	8006a56 <HAL_UART_Transmit>

		curduration+=30;
 8001a6e:	4b3f      	ldr	r3, [pc, #252]	; (8001b6c <gyrostraight+0x2bc>)
 8001a70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	4b41      	ldr	r3, [pc, #260]	; (8001b80 <gyrostraight+0x2d0>)
 8001a7a:	f7fe fc0f 	bl	800029c <__adddf3>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	493a      	ldr	r1, [pc, #232]	; (8001b6c <gyrostraight+0x2bc>)
 8001a84:	e9c1 2300 	strd	r2, r3, [r1]
	while(curduration<=(reqduration)*0.8){
 8001a88:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <gyrostraight+0x2b8>)
 8001a8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a8e:	a330      	add	r3, pc, #192	; (adr r3, 8001b50 <gyrostraight+0x2a0>)
 8001a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a94:	f7fe fdb8 	bl	8000608 <__aeabi_dmul>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4b32      	ldr	r3, [pc, #200]	; (8001b6c <gyrostraight+0x2bc>)
 8001aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa6:	f7ff f835 	bl	8000b14 <__aeabi_dcmpge>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f47f af3e 	bne.w	800192e <gyrostraight+0x7e>
	}
	while(curduration<=reqduration){
 8001ab2:	e032      	b.n	8001b1a <gyrostraight+0x26a>
		servoVal = 147;
 8001ab4:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <gyrostraight+0x2c8>)
 8001ab6:	2293      	movs	r2, #147	; 0x93
 8001ab8:	701a      	strb	r2, [r3, #0]
		pwmVal_L = 1800;
 8001aba:	4927      	ldr	r1, [pc, #156]	; (8001b58 <gyrostraight+0x2a8>)
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	4b34      	ldr	r3, [pc, #208]	; (8001b94 <gyrostraight+0x2e4>)
 8001ac2:	e9c1 2300 	strd	r2, r3, [r1]
				pwmVal_R = 2000;
 8001ac6:	4925      	ldr	r1, [pc, #148]	; (8001b5c <gyrostraight+0x2ac>)
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	4b32      	ldr	r3, [pc, #200]	; (8001b98 <gyrostraight+0x2e8>)
 8001ace:	e9c1 2300 	strd	r2, r3, [r1]
				duration = 30;
 8001ad2:	492a      	ldr	r1, [pc, #168]	; (8001b7c <gyrostraight+0x2cc>)
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	4b29      	ldr	r3, [pc, #164]	; (8001b80 <gyrostraight+0x2d0>)
 8001ada:	e9c1 2300 	strd	r2, r3, [r1]
				motorActivate();
 8001ade:	f7ff fe67 	bl	80017b0 <motorActivate>


		sprintf(icmTempMsg,"G:%+07d,",gyro[2]);
 8001ae2:	4b28      	ldr	r3, [pc, #160]	; (8001b84 <gyrostraight+0x2d4>)
 8001ae4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4927      	ldr	r1, [pc, #156]	; (8001b88 <gyrostraight+0x2d8>)
 8001aec:	4827      	ldr	r0, [pc, #156]	; (8001b8c <gyrostraight+0x2dc>)
 8001aee:	f009 f913 	bl	800ad18 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)&icmTempMsg, 10, 0xFFFF);
 8001af2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001af6:	220a      	movs	r2, #10
 8001af8:	4924      	ldr	r1, [pc, #144]	; (8001b8c <gyrostraight+0x2dc>)
 8001afa:	4825      	ldr	r0, [pc, #148]	; (8001b90 <gyrostraight+0x2e0>)
 8001afc:	f004 ffab 	bl	8006a56 <HAL_UART_Transmit>

		curduration+=30;
 8001b00:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <gyrostraight+0x2bc>)
 8001b02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <gyrostraight+0x2d0>)
 8001b0c:	f7fe fbc6 	bl	800029c <__adddf3>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4915      	ldr	r1, [pc, #84]	; (8001b6c <gyrostraight+0x2bc>)
 8001b16:	e9c1 2300 	strd	r2, r3, [r1]
	while(curduration<=reqduration){
 8001b1a:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <gyrostraight+0x2bc>)
 8001b1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <gyrostraight+0x2b8>)
 8001b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b26:	f7fe ffeb 	bl	8000b00 <__aeabi_dcmple>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1c1      	bne.n	8001ab4 <gyrostraight+0x204>
	}
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 10, 0xFFFF);
 8001b30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b34:	220a      	movs	r2, #10
 8001b36:	4919      	ldr	r1, [pc, #100]	; (8001b9c <gyrostraight+0x2ec>)
 8001b38:	4815      	ldr	r0, [pc, #84]	; (8001b90 <gyrostraight+0x2e0>)
 8001b3a:	f004 ff8c 	bl	8006a56 <HAL_UART_Transmit>
}
 8001b3e:	bf00      	nop
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	28f5c28f 	.word	0x28f5c28f
 8001b4c:	3fda8f5c 	.word	0x3fda8f5c
 8001b50:	9999999a 	.word	0x9999999a
 8001b54:	3fe99999 	.word	0x3fe99999
 8001b58:	20000010 	.word	0x20000010
 8001b5c:	20000018 	.word	0x20000018
 8001b60:	20000020 	.word	0x20000020
 8001b64:	40408000 	.word	0x40408000
 8001b68:	20000310 	.word	0x20000310
 8001b6c:	20000318 	.word	0x20000318
 8001b70:	20000370 	.word	0x20000370
 8001b74:	20000022 	.word	0x20000022
 8001b78:	20000021 	.word	0x20000021
 8001b7c:	20000308 	.word	0x20000308
 8001b80:	403e0000 	.word	0x403e0000
 8001b84:	20000358 	.word	0x20000358
 8001b88:	0800c0f8 	.word	0x0800c0f8
 8001b8c:	20000330 	.word	0x20000330
 8001b90:	20000270 	.word	0x20000270
 8001b94:	409c2000 	.word	0x409c2000
 8001b98:	409f4000 	.word	0x409f4000
 8001b9c:	20000000 	.word	0x20000000

08001ba0 <gyroturn>:
	}//end lab


}

void gyroturn(uint8_t local_dir, int leftright, int angle){ //23,580 for 90 degrees
 8001ba0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ba4:	b084      	sub	sp, #16
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
 8001bae:	73fb      	strb	r3, [r7, #15]
	gyrosum = 0;
 8001bb0:	495f      	ldr	r1, [pc, #380]	; (8001d30 <gyroturn+0x190>)
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	e9c1 2300 	strd	r2, r3, [r1]
	dir = local_dir;
 8001bbe:	4a5d      	ldr	r2, [pc, #372]	; (8001d34 <gyroturn+0x194>)
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	7013      	strb	r3, [r2, #0]
	if(leftright==0) htim1.Instance->CCR4 = 105;
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d104      	bne.n	8001bd4 <gyroturn+0x34>
 8001bca:	4b5b      	ldr	r3, [pc, #364]	; (8001d38 <gyroturn+0x198>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2269      	movs	r2, #105	; 0x69
 8001bd0:	641a      	str	r2, [r3, #64]	; 0x40
 8001bd2:	e003      	b.n	8001bdc <gyroturn+0x3c>
	else htim1.Instance->CCR4 = 210;
 8001bd4:	4b58      	ldr	r3, [pc, #352]	; (8001d38 <gyroturn+0x198>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	22d2      	movs	r2, #210	; 0xd2
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(300);
 8001bdc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001be0:	f006 f8b9 	bl	8007d56 <osDelay>
	while (gyrosum<=(angle*245*4*0.7)){
 8001be4:	e031      	b.n	8001c4a <gyroturn+0xaa>
			if(leftright==0){//left
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d117      	bne.n	8001c1c <gyroturn+0x7c>
				duration = 10;
 8001bec:	4953      	ldr	r1, [pc, #332]	; (8001d3c <gyroturn+0x19c>)
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	4b53      	ldr	r3, [pc, #332]	; (8001d40 <gyroturn+0x1a0>)
 8001bf4:	e9c1 2300 	strd	r2, r3, [r1]
				pwmVal_L = 1200; // pwm values
 8001bf8:	4952      	ldr	r1, [pc, #328]	; (8001d44 <gyroturn+0x1a4>)
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	4b52      	ldr	r3, [pc, #328]	; (8001d48 <gyroturn+0x1a8>)
 8001c00:	e9c1 2300 	strd	r2, r3, [r1]
				pwmVal_R = 2400;
 8001c04:	4951      	ldr	r1, [pc, #324]	; (8001d4c <gyroturn+0x1ac>)
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	4b51      	ldr	r3, [pc, #324]	; (8001d50 <gyroturn+0x1b0>)
 8001c0c:	e9c1 2300 	strd	r2, r3, [r1]
				servoVal = 105; //set servo dir
 8001c10:	4b50      	ldr	r3, [pc, #320]	; (8001d54 <gyroturn+0x1b4>)
 8001c12:	2269      	movs	r2, #105	; 0x69
 8001c14:	701a      	strb	r2, [r3, #0]
				motorActivate();
 8001c16:	f7ff fdcb 	bl	80017b0 <motorActivate>
 8001c1a:	e016      	b.n	8001c4a <gyroturn+0xaa>
//				sprintf(icmTempMsg,"%+09d,",gyrosum);
//				HAL_UART_Transmit(&huart3, (uint8_t *)&icmTempMsg, 10, 0xFFFF);
			}else{//right
				duration = 10;
 8001c1c:	4947      	ldr	r1, [pc, #284]	; (8001d3c <gyroturn+0x19c>)
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	4b47      	ldr	r3, [pc, #284]	; (8001d40 <gyroturn+0x1a0>)
 8001c24:	e9c1 2300 	strd	r2, r3, [r1]
				pwmVal_L = 2400; // pwm values
 8001c28:	4946      	ldr	r1, [pc, #280]	; (8001d44 <gyroturn+0x1a4>)
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	4b48      	ldr	r3, [pc, #288]	; (8001d50 <gyroturn+0x1b0>)
 8001c30:	e9c1 2300 	strd	r2, r3, [r1]
				pwmVal_R = 1200;
 8001c34:	4945      	ldr	r1, [pc, #276]	; (8001d4c <gyroturn+0x1ac>)
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	4b43      	ldr	r3, [pc, #268]	; (8001d48 <gyroturn+0x1a8>)
 8001c3c:	e9c1 2300 	strd	r2, r3, [r1]
				servoVal = 210; //set servo dir
 8001c40:	4b44      	ldr	r3, [pc, #272]	; (8001d54 <gyroturn+0x1b4>)
 8001c42:	22d2      	movs	r2, #210	; 0xd2
 8001c44:	701a      	strb	r2, [r3, #0]
				motorActivate();
 8001c46:	f7ff fdb3 	bl	80017b0 <motorActivate>
	while (gyrosum<=(angle*245*4*0.7)){
 8001c4a:	4b39      	ldr	r3, [pc, #228]	; (8001d30 <gyroturn+0x190>)
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	f7fe fca2 	bl	800059c <__aeabi_ul2d>
 8001c58:	4680      	mov	r8, r0
 8001c5a:	4689      	mov	r9, r1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 8001c62:	fb02 f303 	mul.w	r3, r2, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fc64 	bl	8000534 <__aeabi_i2d>
 8001c6c:	a32e      	add	r3, pc, #184	; (adr r3, 8001d28 <gyroturn+0x188>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	f7fe fcc9 	bl	8000608 <__aeabi_dmul>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4640      	mov	r0, r8
 8001c7c:	4649      	mov	r1, r9
 8001c7e:	f7fe ff3f 	bl	8000b00 <__aeabi_dcmple>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1ae      	bne.n	8001be6 <gyroturn+0x46>
//				sprintf(icmTempMsg,"%+09d,",gyrosum);
//				HAL_UART_Transmit(&huart3, (uint8_t *)&icmTempMsg, 10, 0xFFFF);
			}
	}
	while (gyrosum<=(angle*245*4)){ //last 30%
 8001c88:	e031      	b.n	8001cee <gyroturn+0x14e>
			if(leftright==0){//left
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d117      	bne.n	8001cc0 <gyroturn+0x120>
				duration = 10;
 8001c90:	492a      	ldr	r1, [pc, #168]	; (8001d3c <gyroturn+0x19c>)
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	4b2a      	ldr	r3, [pc, #168]	; (8001d40 <gyroturn+0x1a0>)
 8001c98:	e9c1 2300 	strd	r2, r3, [r1]
				pwmVal_L = 600; // pwm values
 8001c9c:	4929      	ldr	r1, [pc, #164]	; (8001d44 <gyroturn+0x1a4>)
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <gyroturn+0x1b8>)
 8001ca4:	e9c1 2300 	strd	r2, r3, [r1]
				pwmVal_R = 1200;
 8001ca8:	4928      	ldr	r1, [pc, #160]	; (8001d4c <gyroturn+0x1ac>)
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	4b26      	ldr	r3, [pc, #152]	; (8001d48 <gyroturn+0x1a8>)
 8001cb0:	e9c1 2300 	strd	r2, r3, [r1]
				servoVal = 105; //set servo dir
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <gyroturn+0x1b4>)
 8001cb6:	2269      	movs	r2, #105	; 0x69
 8001cb8:	701a      	strb	r2, [r3, #0]
				motorActivate();
 8001cba:	f7ff fd79 	bl	80017b0 <motorActivate>
 8001cbe:	e016      	b.n	8001cee <gyroturn+0x14e>
//				sprintf(icmTempMsg,"%+09d,",gyrosum);
//				HAL_UART_Transmit(&huart3, (uint8_t *)&icmTempMsg, 10, 0xFFFF);
			}else{//right
				duration = 10;
 8001cc0:	491e      	ldr	r1, [pc, #120]	; (8001d3c <gyroturn+0x19c>)
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <gyroturn+0x1a0>)
 8001cc8:	e9c1 2300 	strd	r2, r3, [r1]
				pwmVal_L = 1200; // pwm values
 8001ccc:	491d      	ldr	r1, [pc, #116]	; (8001d44 <gyroturn+0x1a4>)
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <gyroturn+0x1a8>)
 8001cd4:	e9c1 2300 	strd	r2, r3, [r1]
				pwmVal_R = 600;
 8001cd8:	491c      	ldr	r1, [pc, #112]	; (8001d4c <gyroturn+0x1ac>)
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <gyroturn+0x1b8>)
 8001ce0:	e9c1 2300 	strd	r2, r3, [r1]
				servoVal = 210; //set servo dir
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <gyroturn+0x1b4>)
 8001ce6:	22d2      	movs	r2, #210	; 0xd2
 8001ce8:	701a      	strb	r2, [r3, #0]
				motorActivate();
 8001cea:	f7ff fd61 	bl	80017b0 <motorActivate>
	while (gyrosum<=(angle*245*4)){ //last 30%
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 8001cf4:	fb02 f303 	mul.w	r3, r2, r3
 8001cf8:	17da      	asrs	r2, r3, #31
 8001cfa:	461c      	mov	r4, r3
 8001cfc:	4615      	mov	r5, r2
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <gyroturn+0x190>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	4294      	cmp	r4, r2
 8001d06:	eb75 0303 	sbcs.w	r3, r5, r3
 8001d0a:	d2be      	bcs.n	8001c8a <gyroturn+0xea>
//				sprintf(icmTempMsg,"%+09d,",gyrosum);
//				HAL_UART_Transmit(&huart3, (uint8_t *)&icmTempMsg, 10, 0xFFFF);
			}
	}
	realignWheels();
 8001d0c:	f7ff fd3a 	bl	8001784 <realignWheels>
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 10, 0xFFFF);
 8001d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d14:	220a      	movs	r2, #10
 8001d16:	4911      	ldr	r1, [pc, #68]	; (8001d5c <gyroturn+0x1bc>)
 8001d18:	4811      	ldr	r0, [pc, #68]	; (8001d60 <gyroturn+0x1c0>)
 8001d1a:	f004 fe9c 	bl	8006a56 <HAL_UART_Transmit>
}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d28:	66666666 	.word	0x66666666
 8001d2c:	3fe66666 	.word	0x3fe66666
 8001d30:	20000360 	.word	0x20000360
 8001d34:	20000020 	.word	0x20000020
 8001d38:	20000108 	.word	0x20000108
 8001d3c:	20000308 	.word	0x20000308
 8001d40:	40240000 	.word	0x40240000
 8001d44:	20000010 	.word	0x20000010
 8001d48:	4092c000 	.word	0x4092c000
 8001d4c:	20000018 	.word	0x20000018
 8001d50:	40a2c000 	.word	0x40a2c000
 8001d54:	20000021 	.word	0x20000021
 8001d58:	4082c000 	.word	0x4082c000
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	20000270 	.word	0x20000270

08001d64 <ICMWriteOneByte>:
	}
}


void ICMWriteOneByte(uint8_t RegAddr, uint8_t Data)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af04      	add	r7, sp, #16
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	460a      	mov	r2, r1
 8001d6e:	71fb      	strb	r3, [r7, #7]
 8001d70:	4613      	mov	r3, r2
 8001d72:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, I2C_ADD_ICM20948, RegAddr, I2C_MEMADD_SIZE_8BIT, &Data, 1, 0xffff);
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d7c:	9302      	str	r3, [sp, #8]
 8001d7e:	2301      	movs	r3, #1
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	1dbb      	adds	r3, r7, #6
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	2301      	movs	r3, #1
 8001d88:	21d0      	movs	r1, #208	; 0xd0
 8001d8a:	4803      	ldr	r0, [pc, #12]	; (8001d98 <ICMWriteOneByte+0x34>)
 8001d8c:	f001 fe3e 	bl	8003a0c <HAL_I2C_Mem_Write>
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	200000b4 	.word	0x200000b4

08001d9c <ICMReadOneByte>:

uint8_t ICMReadOneByte(uint8_t RegAddr)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af04      	add	r7, sp, #16
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
	uint8_t TempVal = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c1, I2C_ADD_ICM20948, RegAddr, I2C_MEMADD_SIZE_8BIT, &TempVal, 1, 0xffff);
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001db2:	9302      	str	r3, [sp, #8]
 8001db4:	2301      	movs	r3, #1
 8001db6:	9301      	str	r3, [sp, #4]
 8001db8:	f107 030f 	add.w	r3, r7, #15
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	21d0      	movs	r1, #208	; 0xd0
 8001dc2:	4804      	ldr	r0, [pc, #16]	; (8001dd4 <ICMReadOneByte+0x38>)
 8001dc4:	f001 ff1c 	bl	8003c00 <HAL_I2C_Mem_Read>
	return TempVal;
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200000b4 	.word	0x200000b4

08001dd8 <ICMWriteSecondary>:
    ICMWriteOneByte(REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0); //swtich bank0

}

void ICMWriteSecondary(uint8_t u8I2CAddr, uint8_t u8RegAddr, uint8_t u8data)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
 8001de2:	460b      	mov	r3, r1
 8001de4:	71bb      	strb	r3, [r7, #6]
 8001de6:	4613      	mov	r3, r2
 8001de8:	717b      	strb	r3, [r7, #5]
    uint8_t u8Temp;
    ICMWriteOneByte(REG_ADD_REG_BANK_SEL,  REG_VAL_REG_BANK_3); //swtich bank3
 8001dea:	2130      	movs	r1, #48	; 0x30
 8001dec:	207f      	movs	r0, #127	; 0x7f
 8001dee:	f7ff ffb9 	bl	8001d64 <ICMWriteOneByte>
    ICMWriteOneByte(REG_ADD_I2C_SLV1_ADDR, u8I2CAddr);
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	4619      	mov	r1, r3
 8001df6:	2007      	movs	r0, #7
 8001df8:	f7ff ffb4 	bl	8001d64 <ICMWriteOneByte>
    ICMWriteOneByte(REG_ADD_I2C_SLV1_REG,  u8RegAddr);
 8001dfc:	79bb      	ldrb	r3, [r7, #6]
 8001dfe:	4619      	mov	r1, r3
 8001e00:	2008      	movs	r0, #8
 8001e02:	f7ff ffaf 	bl	8001d64 <ICMWriteOneByte>
    ICMWriteOneByte(REG_ADD_I2C_SLV1_DO,   u8data);
 8001e06:	797b      	ldrb	r3, [r7, #5]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	200a      	movs	r0, #10
 8001e0c:	f7ff ffaa 	bl	8001d64 <ICMWriteOneByte>
    ICMWriteOneByte(REG_ADD_I2C_SLV1_CTRL, REG_VAL_BIT_SLV0_EN|1);
 8001e10:	2181      	movs	r1, #129	; 0x81
 8001e12:	2009      	movs	r0, #9
 8001e14:	f7ff ffa6 	bl	8001d64 <ICMWriteOneByte>

    ICMWriteOneByte(REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0); //swtich bank0
 8001e18:	2100      	movs	r1, #0
 8001e1a:	207f      	movs	r0, #127	; 0x7f
 8001e1c:	f7ff ffa2 	bl	8001d64 <ICMWriteOneByte>

    u8Temp = ICMReadOneByte(REG_ADD_USER_CTRL);
 8001e20:	2003      	movs	r0, #3
 8001e22:	f7ff ffbb 	bl	8001d9c <ICMReadOneByte>
 8001e26:	4603      	mov	r3, r0
 8001e28:	73fb      	strb	r3, [r7, #15]
    u8Temp |= REG_VAL_BIT_I2C_MST_EN;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	f043 0320 	orr.w	r3, r3, #32
 8001e30:	73fb      	strb	r3, [r7, #15]
    ICMWriteOneByte(REG_ADD_USER_CTRL, u8Temp);
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	4619      	mov	r1, r3
 8001e36:	2003      	movs	r0, #3
 8001e38:	f7ff ff94 	bl	8001d64 <ICMWriteOneByte>
    osDelay(5);
 8001e3c:	2005      	movs	r0, #5
 8001e3e:	f005 ff8a 	bl	8007d56 <osDelay>
    u8Temp &= ~REG_VAL_BIT_I2C_MST_EN;
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	f023 0320 	bic.w	r3, r3, #32
 8001e48:	73fb      	strb	r3, [r7, #15]
    ICMWriteOneByte(REG_ADD_USER_CTRL, u8Temp);
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	2003      	movs	r0, #3
 8001e50:	f7ff ff88 	bl	8001d64 <ICMWriteOneByte>

    ICMWriteOneByte(REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_3); //swtich bank3
 8001e54:	2130      	movs	r1, #48	; 0x30
 8001e56:	207f      	movs	r0, #127	; 0x7f
 8001e58:	f7ff ff84 	bl	8001d64 <ICMWriteOneByte>

    u8Temp = ICMReadOneByte(REG_ADD_I2C_SLV0_CTRL);
 8001e5c:	2005      	movs	r0, #5
 8001e5e:	f7ff ff9d 	bl	8001d9c <ICMReadOneByte>
 8001e62:	4603      	mov	r3, r0
 8001e64:	73fb      	strb	r3, [r7, #15]
    u8Temp &= ~((REG_VAL_BIT_I2C_MST_EN)&(REG_VAL_BIT_MASK_LEN));
    ICMWriteOneByte(REG_ADD_I2C_SLV0_CTRL,  u8Temp);
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	2005      	movs	r0, #5
 8001e6c:	f7ff ff7a 	bl	8001d64 <ICMWriteOneByte>

   ICMWriteOneByte(REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0); //swtich bank0
 8001e70:	2100      	movs	r1, #0
 8001e72:	207f      	movs	r0, #127	; 0x7f
 8001e74:	f7ff ff76 	bl	8001d64 <ICMWriteOneByte>

    return;
 8001e78:	bf00      	nop
}
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <ICMCalAvgValue>:
		OLED_ShowString(0,20,ICM_OK_Msg);
	}
}

void ICMCalAvgValue(uint8_t *pIndex, int16_t *pAvgBuffer, int16_t InVal, int32_t *pOutVal)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	80fb      	strh	r3, [r7, #6]
	uint8_t i;

	*(pAvgBuffer + ((*pIndex) ++)) = InVal;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	b2d1      	uxtb	r1, r2
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	7011      	strb	r1, [r2, #0]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	88fa      	ldrh	r2, [r7, #6]
 8001ea4:	801a      	strh	r2, [r3, #0]
  	*pIndex &= 0x07;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	701a      	strb	r2, [r3, #0]

  	*pOutVal = 0;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
	for(i = 0; i < 8; i ++)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	75fb      	strb	r3, [r7, #23]
 8001ebe:	e00d      	b.n	8001edc <ICMCalAvgValue+0x5c>
  	{
    	*pOutVal += *(pAvgBuffer + i);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	7dfa      	ldrb	r2, [r7, #23]
 8001ec6:	0052      	lsls	r2, r2, #1
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	440a      	add	r2, r1
 8001ecc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001ed0:	441a      	add	r2, r3
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	601a      	str	r2, [r3, #0]
	for(i = 0; i < 8; i ++)
 8001ed6:	7dfb      	ldrb	r3, [r7, #23]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	75fb      	strb	r3, [r7, #23]
 8001edc:	7dfb      	ldrb	r3, [r7, #23]
 8001ede:	2b07      	cmp	r3, #7
 8001ee0:	d9ee      	bls.n	8001ec0 <ICMCalAvgValue+0x40>
  	}
  	*pOutVal >>= 3;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	10da      	asrs	r2, r3, #3
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	601a      	str	r2, [r3, #0]
}
 8001eec:	bf00      	nop
 8001eee:	371c      	adds	r7, #28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <ICMGyroRead>:

void ICMGyroRead(int16_t* ps16X, int16_t* ps16Y, int16_t* ps16Z)
{
 8001ef8:	b590      	push	{r4, r7, lr}
 8001efa:	b08d      	sub	sp, #52	; 0x34
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
    uint8_t u8Buf[6];
    int16_t s16Buf[3] = {0};
 8001f04:	f107 0320 	add.w	r3, r7, #32
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	809a      	strh	r2, [r3, #4]
    uint8_t i;
    int32_t s32OutBuf[3] = {0};
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
    static ICM20948_ST_AVG_DATA sstAvgBuf[3];
    static int16_t ss16c = 0;
    ss16c++;
 8001f1a:	4b4f      	ldr	r3, [pc, #316]	; (8002058 <ICMGyroRead+0x160>)
 8001f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	3301      	adds	r3, #1
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	b21a      	sxth	r2, r3
 8001f28:	4b4b      	ldr	r3, [pc, #300]	; (8002058 <ICMGyroRead+0x160>)
 8001f2a:	801a      	strh	r2, [r3, #0]

    u8Buf[0] = ICMReadOneByte(REG_ADD_GYRO_XOUT_L);
 8001f2c:	2034      	movs	r0, #52	; 0x34
 8001f2e:	f7ff ff35 	bl	8001d9c <ICMReadOneByte>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    u8Buf[1] = ICMReadOneByte(REG_ADD_GYRO_XOUT_H);
 8001f38:	2033      	movs	r0, #51	; 0x33
 8001f3a:	f7ff ff2f 	bl	8001d9c <ICMReadOneByte>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    s16Buf[0] =	(u8Buf[1]<<8)|u8Buf[0];
 8001f44:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001f48:	021b      	lsls	r3, r3, #8
 8001f4a:	b21a      	sxth	r2, r3
 8001f4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f50:	b21b      	sxth	r3, r3
 8001f52:	4313      	orrs	r3, r2
 8001f54:	b21b      	sxth	r3, r3
 8001f56:	843b      	strh	r3, [r7, #32]

    u8Buf[0] = ICMReadOneByte(REG_ADD_GYRO_YOUT_L);
 8001f58:	2036      	movs	r0, #54	; 0x36
 8001f5a:	f7ff ff1f 	bl	8001d9c <ICMReadOneByte>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    u8Buf[1] = ICMReadOneByte(REG_ADD_GYRO_YOUT_H);
 8001f64:	2035      	movs	r0, #53	; 0x35
 8001f66:	f7ff ff19 	bl	8001d9c <ICMReadOneByte>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    s16Buf[1] =	(u8Buf[1]<<8)|u8Buf[0];
 8001f70:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001f74:	021b      	lsls	r3, r3, #8
 8001f76:	b21a      	sxth	r2, r3
 8001f78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f7c:	b21b      	sxth	r3, r3
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	b21b      	sxth	r3, r3
 8001f82:	847b      	strh	r3, [r7, #34]	; 0x22

    u8Buf[0] = ICMReadOneByte(REG_ADD_GYRO_ZOUT_L);
 8001f84:	2038      	movs	r0, #56	; 0x38
 8001f86:	f7ff ff09 	bl	8001d9c <ICMReadOneByte>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    u8Buf[1] = ICMReadOneByte(REG_ADD_GYRO_ZOUT_H);
 8001f90:	2037      	movs	r0, #55	; 0x37
 8001f92:	f7ff ff03 	bl	8001d9c <ICMReadOneByte>
 8001f96:	4603      	mov	r3, r0
 8001f98:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    s16Buf[2] =	(u8Buf[1]<<8)|u8Buf[0];
 8001f9c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	b21a      	sxth	r2, r3
 8001fa4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001fa8:	b21b      	sxth	r3, r3
 8001faa:	4313      	orrs	r3, r2
 8001fac:	b21b      	sxth	r3, r3
 8001fae:	84bb      	strh	r3, [r7, #36]	; 0x24

#if 1
    for(i = 0; i < 3; i ++)
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001fb6:	e025      	b.n	8002004 <ICMGyroRead+0x10c>
    {
        ICMCalAvgValue(&sstAvgBuf[i].u8Index, sstAvgBuf[i].s16AvgBuffer, s16Buf[i], s32OutBuf + i);
 8001fb8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4a25      	ldr	r2, [pc, #148]	; (800205c <ICMGyroRead+0x164>)
 8001fc6:	1898      	adds	r0, r3, r2
 8001fc8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4a21      	ldr	r2, [pc, #132]	; (800205c <ICMGyroRead+0x164>)
 8001fd6:	4413      	add	r3, r2
 8001fd8:	1c99      	adds	r1, r3, #2
 8001fda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	3330      	adds	r3, #48	; 0x30
 8001fe2:	443b      	add	r3, r7
 8001fe4:	f933 4c10 	ldrsh.w	r4, [r3, #-16]
 8001fe8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	f107 0214 	add.w	r2, r7, #20
 8001ff2:	4413      	add	r3, r2
 8001ff4:	4622      	mov	r2, r4
 8001ff6:	f7ff ff43 	bl	8001e80 <ICMCalAvgValue>
    for(i = 0; i < 3; i ++)
 8001ffa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ffe:	3301      	adds	r3, #1
 8002000:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002004:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002008:	2b02      	cmp	r3, #2
 800200a:	d9d5      	bls.n	8001fb8 <ICMGyroRead+0xc0>
    }
    *ps16X = s32OutBuf[0] - gstGyroOffset.s16X;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	b29a      	uxth	r2, r3
 8002010:	4b13      	ldr	r3, [pc, #76]	; (8002060 <ICMGyroRead+0x168>)
 8002012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002016:	b29b      	uxth	r3, r3
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	b29b      	uxth	r3, r3
 800201c:	b21a      	sxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	801a      	strh	r2, [r3, #0]
    *ps16Y = s32OutBuf[1] - gstGyroOffset.s16Y;
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	b29a      	uxth	r2, r3
 8002026:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <ICMGyroRead+0x168>)
 8002028:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800202c:	b29b      	uxth	r3, r3
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	b29b      	uxth	r3, r3
 8002032:	b21a      	sxth	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	801a      	strh	r2, [r3, #0]
    *ps16Z = s32OutBuf[2] - gstGyroOffset.s16Z;
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	b29a      	uxth	r2, r3
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <ICMGyroRead+0x168>)
 800203e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002042:	b29b      	uxth	r3, r3
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	b29b      	uxth	r3, r3
 8002048:	b21a      	sxth	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	801a      	strh	r2, [r3, #0]
#else
    *ps16X = s16Buf[0];
    *ps16Y = s16Buf[1];
    *ps16Z = s16Buf[2];
#endif
    return;
 800204e:	bf00      	nop
}
 8002050:	3734      	adds	r7, #52	; 0x34
 8002052:	46bd      	mov	sp, r7
 8002054:	bd90      	pop	{r4, r7, pc}
 8002056:	bf00      	nop
 8002058:	20000378 	.word	0x20000378
 800205c:	2000037c 	.word	0x2000037c
 8002060:	20000340 	.word	0x20000340

08002064 <ICMGyroOffset>:
#endif
   return;
}

void ICMGyroOffset()
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
	uint8_t i;
    int16_t	s16Gx = 0, s16Gy = 0, s16Gz = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	80fb      	strh	r3, [r7, #6]
 800206e:	2300      	movs	r3, #0
 8002070:	80bb      	strh	r3, [r7, #4]
 8002072:	2300      	movs	r3, #0
 8002074:	807b      	strh	r3, [r7, #2]
	int32_t	s32TempGx = 0, s32TempGy = 0, s32TempGz = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	2300      	movs	r3, #0
 8002080:	60bb      	str	r3, [r7, #8]
    for(i = 0; i < 32; i ++)
 8002082:	2300      	movs	r3, #0
 8002084:	75fb      	strb	r3, [r7, #23]
 8002086:	e01d      	b.n	80020c4 <ICMGyroOffset+0x60>
 	{
        ICMGyroRead(&s16Gx, &s16Gy, &s16Gz);
 8002088:	1cba      	adds	r2, r7, #2
 800208a:	1d39      	adds	r1, r7, #4
 800208c:	1dbb      	adds	r3, r7, #6
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff ff32 	bl	8001ef8 <ICMGyroRead>
        s32TempGx += s16Gx;
 8002094:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002098:	461a      	mov	r2, r3
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4413      	add	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
		s32TempGy += s16Gy;
 80020a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020a4:	461a      	mov	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4413      	add	r3, r2
 80020aa:	60fb      	str	r3, [r7, #12]
		s32TempGz += s16Gz;
 80020ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80020b0:	461a      	mov	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	4413      	add	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]
        osDelay(10);
 80020b8:	200a      	movs	r0, #10
 80020ba:	f005 fe4c 	bl	8007d56 <osDelay>
    for(i = 0; i < 32; i ++)
 80020be:	7dfb      	ldrb	r3, [r7, #23]
 80020c0:	3301      	adds	r3, #1
 80020c2:	75fb      	strb	r3, [r7, #23]
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	2b1f      	cmp	r3, #31
 80020c8:	d9de      	bls.n	8002088 <ICMGyroOffset+0x24>
    }
    gstGyroOffset.s16X = s32TempGx >> 5;
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	115b      	asrs	r3, r3, #5
 80020ce:	b21a      	sxth	r2, r3
 80020d0:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <ICMGyroOffset+0x8c>)
 80020d2:	801a      	strh	r2, [r3, #0]
	gstGyroOffset.s16Y = s32TempGy >> 5;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	115b      	asrs	r3, r3, #5
 80020d8:	b21a      	sxth	r2, r3
 80020da:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <ICMGyroOffset+0x8c>)
 80020dc:	805a      	strh	r2, [r3, #2]
	gstGyroOffset.s16Z = s32TempGz >> 5;
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	115b      	asrs	r3, r3, #5
 80020e2:	b21a      	sxth	r2, r3
 80020e4:	4b02      	ldr	r3, [pc, #8]	; (80020f0 <ICMGyroOffset+0x8c>)
 80020e6:	809a      	strh	r2, [r3, #4]
    return;
 80020e8:	bf00      	nop
}
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20000340 	.word	0x20000340

080020f4 <MPU_Get_Gyroscope>:

void MPU_Get_Gyroscope(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
	ICMGyroRead(&gyro[0], &gyro[1], &gyro[2]);
 80020f8:	4a1e      	ldr	r2, [pc, #120]	; (8002174 <MPU_Get_Gyroscope+0x80>)
 80020fa:	491f      	ldr	r1, [pc, #124]	; (8002178 <MPU_Get_Gyroscope+0x84>)
 80020fc:	481f      	ldr	r0, [pc, #124]	; (800217c <MPU_Get_Gyroscope+0x88>)
 80020fe:	f7ff fefb 	bl	8001ef8 <ICMGyroRead>
	//if(Deviation_Count==CONTROL_DELAY)
	//{
		//Save the raw data to update zero by clicking the user button
		Original_gyro[0] = gyro[0];
 8002102:	4b1e      	ldr	r3, [pc, #120]	; (800217c <MPU_Get_Gyroscope+0x88>)
 8002104:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002108:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <MPU_Get_Gyroscope+0x8c>)
 800210a:	801a      	strh	r2, [r3, #0]
		Original_gyro[1] = gyro[1];
 800210c:	4b1b      	ldr	r3, [pc, #108]	; (800217c <MPU_Get_Gyroscope+0x88>)
 800210e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002112:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <MPU_Get_Gyroscope+0x8c>)
 8002114:	805a      	strh	r2, [r3, #2]
		Original_gyro[2] = gyro[2];
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <MPU_Get_Gyroscope+0x88>)
 8002118:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800211c:	4b18      	ldr	r3, [pc, #96]	; (8002180 <MPU_Get_Gyroscope+0x8c>)
 800211e:	809a      	strh	r2, [r3, #4]

		//Removes zero drift data
		gyro[0] = Original_gyro[0]-Deviation_gyro[0];
 8002120:	4b17      	ldr	r3, [pc, #92]	; (8002180 <MPU_Get_Gyroscope+0x8c>)
 8002122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002126:	b29a      	uxth	r2, r3
 8002128:	4b16      	ldr	r3, [pc, #88]	; (8002184 <MPU_Get_Gyroscope+0x90>)
 800212a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800212e:	b29b      	uxth	r3, r3
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	b29b      	uxth	r3, r3
 8002134:	b21a      	sxth	r2, r3
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <MPU_Get_Gyroscope+0x88>)
 8002138:	801a      	strh	r2, [r3, #0]
		gyro[1] = Original_gyro[1]-Deviation_gyro[1];
 800213a:	4b11      	ldr	r3, [pc, #68]	; (8002180 <MPU_Get_Gyroscope+0x8c>)
 800213c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002140:	b29a      	uxth	r2, r3
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <MPU_Get_Gyroscope+0x90>)
 8002144:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002148:	b29b      	uxth	r3, r3
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	b29b      	uxth	r3, r3
 800214e:	b21a      	sxth	r2, r3
 8002150:	4b0a      	ldr	r3, [pc, #40]	; (800217c <MPU_Get_Gyroscope+0x88>)
 8002152:	805a      	strh	r2, [r3, #2]
		gyro[2] = Original_gyro[2]-Deviation_gyro[2];
 8002154:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <MPU_Get_Gyroscope+0x8c>)
 8002156:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800215a:	b29a      	uxth	r2, r3
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <MPU_Get_Gyroscope+0x90>)
 800215e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002162:	b29b      	uxth	r3, r3
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	b29b      	uxth	r3, r3
 8002168:	b21a      	sxth	r2, r3
 800216a:	4b04      	ldr	r3, [pc, #16]	; (800217c <MPU_Get_Gyroscope+0x88>)
 800216c:	809a      	strh	r2, [r3, #4]
	//}
	return;
 800216e:	bf00      	nop
}
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	2000035c 	.word	0x2000035c
 8002178:	2000035a 	.word	0x2000035a
 800217c:	20000358 	.word	0x20000358
 8002180:	20000350 	.word	0x20000350
 8002184:	20000348 	.word	0x20000348

08002188 <ICMInit>:

void ICMInit()
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
	/* user bank 0 register */
	ICMWriteOneByte(REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 800218c:	2100      	movs	r1, #0
 800218e:	207f      	movs	r0, #127	; 0x7f
 8002190:	f7ff fde8 	bl	8001d64 <ICMWriteOneByte>
	//ICMWriteOneByte(REG_ADD_PWR_MIGMT_1, REG_VAL_ALL_RGE_RESET);
	ICMWriteOneByte(REG_ADD_PWR_MIGMT_1, REG_VAL_DEVICE_RESET);
 8002194:	2141      	movs	r1, #65	; 0x41
 8002196:	2006      	movs	r0, #6
 8002198:	f7ff fde4 	bl	8001d64 <ICMWriteOneByte>
	osDelay(10);
 800219c:	200a      	movs	r0, #10
 800219e:	f005 fdda 	bl	8007d56 <osDelay>
	ICMWriteOneByte(REG_ADD_PWR_MIGMT_1, REG_VAL_RUN_MODE);
 80021a2:	2101      	movs	r1, #1
 80021a4:	2006      	movs	r0, #6
 80021a6:	f7ff fddd 	bl	8001d64 <ICMWriteOneByte>


	/* user bank 2 register */

	ICMWriteOneByte(REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_2);
 80021aa:	2120      	movs	r1, #32
 80021ac:	207f      	movs	r0, #127	; 0x7f
 80021ae:	f7ff fdd9 	bl	8001d64 <ICMWriteOneByte>

	ICMWriteOneByte(REG_ADD_GYRO_SMPLRT_DIV, 0x07);
 80021b2:	2107      	movs	r1, #7
 80021b4:	2000      	movs	r0, #0
 80021b6:	f7ff fdd5 	bl	8001d64 <ICMWriteOneByte>
	ICMWriteOneByte(REG_ADD_GYRO_CONFIG_1,REG_VAL_BIT_GYRO_DLPCFG_6 | REG_VAL_BIT_GYRO_FS_500DPS | REG_VAL_BIT_GYRO_DLPF);
 80021ba:	2133      	movs	r1, #51	; 0x33
 80021bc:	2001      	movs	r0, #1
 80021be:	f7ff fdd1 	bl	8001d64 <ICMWriteOneByte>

	ICMWriteOneByte(REG_ADD_ACCEL_SMPLRT_DIV_2,  0x07);
 80021c2:	2107      	movs	r1, #7
 80021c4:	2011      	movs	r0, #17
 80021c6:	f7ff fdcd 	bl	8001d64 <ICMWriteOneByte>
	ICMWriteOneByte(REG_ADD_ACCEL_CONFIG,REG_VAL_BIT_ACCEL_DLPCFG_6 | REG_VAL_BIT_ACCEL_FS_2g | REG_VAL_BIT_ACCEL_DLPF);
 80021ca:	2131      	movs	r1, #49	; 0x31
 80021cc:	2014      	movs	r0, #20
 80021ce:	f7ff fdc9 	bl	8001d64 <ICMWriteOneByte>

	/* user bank 0 register */
	ICMWriteOneByte(REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 80021d2:	2100      	movs	r1, #0
 80021d4:	207f      	movs	r0, #127	; 0x7f
 80021d6:	f7ff fdc5 	bl	8001d64 <ICMWriteOneByte>

	osDelay(100);
 80021da:	2064      	movs	r0, #100	; 0x64
 80021dc:	f005 fdbb 	bl	8007d56 <osDelay>
	/* offset */
	ICMGyroOffset();
 80021e0:	f7ff ff40 	bl	8002064 <ICMGyroOffset>

	ICMWriteSecondary(I2C_ADD_ICM20948_AK09916|I2C_ADD_ICM20948_AK09916_WRITE,REG_ADD_MAG_CNTL2, REG_VAL_MAG_MODE_100HZ);
 80021e4:	2208      	movs	r2, #8
 80021e6:	2131      	movs	r1, #49	; 0x31
 80021e8:	200c      	movs	r0, #12
 80021ea:	f7ff fdf5 	bl	8001dd8 <ICMWriteSecondary>
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	0000      	movs	r0, r0
 80021f4:	0000      	movs	r0, r0
	...

080021f8 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
	if (htim->Instance==htim4.Instance && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b46      	ldr	r3, [pc, #280]	; (8002320 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d17e      	bne.n	800230a <HAL_TIM_IC_CaptureCallback+0x112>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	7f1b      	ldrb	r3, [r3, #28]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d17a      	bne.n	800230a <HAL_TIM_IC_CaptureCallback+0x112>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8002214:	4b43      	ldr	r3, [pc, #268]	; (8002324 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d11a      	bne.n	8002252 <HAL_TIM_IC_CaptureCallback+0x5a>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1); // read the first value
 800221c:	2100      	movs	r1, #0
 800221e:	4840      	ldr	r0, [pc, #256]	; (8002320 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002220:	f003 fe44 	bl	8005eac <HAL_TIM_ReadCapturedValue>
 8002224:	4603      	mov	r3, r0
 8002226:	4a40      	ldr	r2, [pc, #256]	; (8002328 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002228:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 800222a:	4b3e      	ldr	r3, [pc, #248]	; (8002324 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800222c:	2201      	movs	r2, #1
 800222e:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002230:	4b3b      	ldr	r3, [pc, #236]	; (8002320 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6a1a      	ldr	r2, [r3, #32]
 8002236:	4b3a      	ldr	r3, [pc, #232]	; (8002320 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 020a 	bic.w	r2, r2, #10
 800223e:	621a      	str	r2, [r3, #32]
 8002240:	4b37      	ldr	r3, [pc, #220]	; (8002320 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6a1a      	ldr	r2, [r3, #32]
 8002246:	4b36      	ldr	r3, [pc, #216]	; (8002320 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0202 	orr.w	r2, r2, #2
 800224e:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
//			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 8002250:	e05b      	b.n	800230a <HAL_TIM_IC_CaptureCallback+0x112>
		else if (Is_First_Captured==1)   // if the first is already captured
 8002252:	4b34      	ldr	r3, [pc, #208]	; (8002324 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d157      	bne.n	800230a <HAL_TIM_IC_CaptureCallback+0x112>
			IC_Val2 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);  // read second value
 800225a:	2100      	movs	r1, #0
 800225c:	4830      	ldr	r0, [pc, #192]	; (8002320 <HAL_TIM_IC_CaptureCallback+0x128>)
 800225e:	f003 fe25 	bl	8005eac <HAL_TIM_ReadCapturedValue>
 8002262:	4603      	mov	r3, r0
 8002264:	4a31      	ldr	r2, [pc, #196]	; (800232c <HAL_TIM_IC_CaptureCallback+0x134>)
 8002266:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(&htim4, 0);  // reset the counter
 8002268:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <HAL_TIM_IC_CaptureCallback+0x128>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2200      	movs	r2, #0
 800226e:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8002270:	4b2e      	ldr	r3, [pc, #184]	; (800232c <HAL_TIM_IC_CaptureCallback+0x134>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4b2c      	ldr	r3, [pc, #176]	; (8002328 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d907      	bls.n	800228c <HAL_TIM_IC_CaptureCallback+0x94>
				Difference = IC_Val2-IC_Val1;
 800227c:	4b2b      	ldr	r3, [pc, #172]	; (800232c <HAL_TIM_IC_CaptureCallback+0x134>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4b29      	ldr	r3, [pc, #164]	; (8002328 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	4a2a      	ldr	r2, [pc, #168]	; (8002330 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	e00f      	b.n	80022ac <HAL_TIM_IC_CaptureCallback+0xb4>
			else if (IC_Val1 > IC_Val2)
 800228c:	4b26      	ldr	r3, [pc, #152]	; (8002328 <HAL_TIM_IC_CaptureCallback+0x130>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b26      	ldr	r3, [pc, #152]	; (800232c <HAL_TIM_IC_CaptureCallback+0x134>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d909      	bls.n	80022ac <HAL_TIM_IC_CaptureCallback+0xb4>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8002298:	4b24      	ldr	r3, [pc, #144]	; (800232c <HAL_TIM_IC_CaptureCallback+0x134>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4b22      	ldr	r3, [pc, #136]	; (8002328 <HAL_TIM_IC_CaptureCallback+0x130>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80022a6:	33ff      	adds	r3, #255	; 0xff
 80022a8:	4a21      	ldr	r2, [pc, #132]	; (8002330 <HAL_TIM_IC_CaptureCallback+0x138>)
 80022aa:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 80022ac:	4b20      	ldr	r3, [pc, #128]	; (8002330 <HAL_TIM_IC_CaptureCallback+0x138>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe f92f 	bl	8000514 <__aeabi_ui2d>
 80022b6:	a318      	add	r3, pc, #96	; (adr r3, 8002318 <HAL_TIM_IC_CaptureCallback+0x120>)
 80022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022bc:	f7fe f9a4 	bl	8000608 <__aeabi_dmul>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4610      	mov	r0, r2
 80022c6:	4619      	mov	r1, r3
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022d0:	f7fe fac4 	bl	800085c <__aeabi_ddiv>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	f7fe fc2e 	bl	8000b3c <__aeabi_d2uiz>
 80022e0:	4603      	mov	r3, r0
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	4b13      	ldr	r3, [pc, #76]	; (8002334 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80022e6:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 80022e8:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <HAL_TIM_IC_CaptureCallback+0x128>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6a1a      	ldr	r2, [r3, #32]
 80022f4:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <HAL_TIM_IC_CaptureCallback+0x128>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 020a 	bic.w	r2, r2, #10
 80022fc:	621a      	str	r2, [r3, #32]
 80022fe:	4b08      	ldr	r3, [pc, #32]	; (8002320 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6a12      	ldr	r2, [r2, #32]
 8002308:	621a      	str	r2, [r3, #32]
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	f3af 8000 	nop.w
 8002318:	b020c49c 	.word	0xb020c49c
 800231c:	3fa16872 	.word	0x3fa16872
 8002320:	200001e0 	.word	0x200001e0
 8002324:	2000032c 	.word	0x2000032c
 8002328:	20000320 	.word	0x20000320
 800232c:	20000324 	.word	0x20000324
 8002330:	20000328 	.word	0x20000328
 8002334:	2000032d 	.word	0x2000032d

08002338 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	//prevent unused argument(s) compilation warning
	UNUSED(huart);
	HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 20);
 8002340:	2214      	movs	r2, #20
 8002342:	4907      	ldr	r1, [pc, #28]	; (8002360 <HAL_UART_RxCpltCallback+0x28>)
 8002344:	4807      	ldr	r0, [pc, #28]	; (8002364 <HAL_UART_RxCpltCallback+0x2c>)
 8002346:	f004 fc5d 	bl	8006c04 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart3,(uint8_t *)aRxBuffer, 20, 0xFFFF);
 800234a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800234e:	2214      	movs	r2, #20
 8002350:	4903      	ldr	r1, [pc, #12]	; (8002360 <HAL_UART_RxCpltCallback+0x28>)
 8002352:	4804      	ldr	r0, [pc, #16]	; (8002364 <HAL_UART_RxCpltCallback+0x2c>)
 8002354:	f004 fb7f 	bl	8006a56 <HAL_UART_Transmit>

}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	200002d0 	.word	0x200002d0
 8002364:	20000270 	.word	0x20000270

08002368 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOD, USER_BTN_Pin)==0){
 8002370:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002374:	480e      	ldr	r0, [pc, #56]	; (80023b0 <StartDefaultTask+0x48>)
 8002376:	f001 f9d3 	bl	8003720 <HAL_GPIO_ReadPin>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d113      	bne.n	80023a8 <StartDefaultTask+0x40>
		  if(userBtnCount<13){
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <StartDefaultTask+0x4c>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b0c      	cmp	r3, #12
 8002386:	d809      	bhi.n	800239c <StartDefaultTask+0x34>
			  userBtnCount++;
 8002388:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <StartDefaultTask+0x4c>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	3301      	adds	r3, #1
 800238e:	b2da      	uxtb	r2, r3
 8002390:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <StartDefaultTask+0x4c>)
 8002392:	701a      	strb	r2, [r3, #0]
			  osDelay(100);
 8002394:	2064      	movs	r0, #100	; 0x64
 8002396:	f005 fcde 	bl	8007d56 <osDelay>
 800239a:	e005      	b.n	80023a8 <StartDefaultTask+0x40>
		  }else{
			  userBtnCount=0;
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <StartDefaultTask+0x4c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
			  osDelay(100);
 80023a2:	2064      	movs	r0, #100	; 0x64
 80023a4:	f005 fcd7 	bl	8007d56 <osDelay>
		  }
	  }


	  osDelay(100);
 80023a8:	2064      	movs	r0, #100	; 0x64
 80023aa:	f005 fcd4 	bl	8007d56 <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOD, USER_BTN_Pin)==0){
 80023ae:	e7df      	b.n	8002370 <StartDefaultTask+0x8>
 80023b0:	40020c00 	.word	0x40020c00
 80023b4:	2000032e 	.word	0x2000032e

080023b8 <show>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_show */
void show(void *argument)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08c      	sub	sp, #48	; 0x30
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN show */
  /* Infinite loop */
//	uint8_t hello[20] = "";
	uint8_t disp[20] = "";
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
 80023c4:	f107 0320 	add.w	r3, r7, #32
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
	uint8_t disp2[20] = "";
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	f107 030c 	add.w	r3, r7, #12
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	605a      	str	r2, [r3, #4]
 80023e0:	609a      	str	r2, [r3, #8]
 80023e2:	60da      	str	r2, [r3, #12]
	{




	sprintf(disp2,"%s",aRxBuffer);
 80023e4:	f107 0308 	add.w	r3, r7, #8
 80023e8:	4a0f      	ldr	r2, [pc, #60]	; (8002428 <show+0x70>)
 80023ea:	4910      	ldr	r1, [pc, #64]	; (800242c <show+0x74>)
 80023ec:	4618      	mov	r0, r3
 80023ee:	f008 fc93 	bl	800ad18 <siprintf>
	OLED_ShowString(0,40,disp2);
 80023f2:	f107 0308 	add.w	r3, r7, #8
 80023f6:	461a      	mov	r2, r3
 80023f8:	2128      	movs	r1, #40	; 0x28
 80023fa:	2000      	movs	r0, #0
 80023fc:	f008 fa92 	bl	800a924 <OLED_ShowString>

//Ultrasonic Distance reading
	sprintf(disp,"Dist:%5d",Distance);
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <show+0x78>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	f107 031c 	add.w	r3, r7, #28
 800240a:	490a      	ldr	r1, [pc, #40]	; (8002434 <show+0x7c>)
 800240c:	4618      	mov	r0, r3
 800240e:	f008 fc83 	bl	800ad18 <siprintf>
	OLED_ShowString(0,30,disp);
 8002412:	f107 031c 	add.w	r3, r7, #28
 8002416:	461a      	mov	r2, r3
 8002418:	211e      	movs	r1, #30
 800241a:	2000      	movs	r0, #0
 800241c:	f008 fa82 	bl	800a924 <OLED_ShowString>
	OLED_Refresh_Gram();
 8002420:	f008 f90c 	bl	800a63c <OLED_Refresh_Gram>
	{
 8002424:	e7de      	b.n	80023e4 <show+0x2c>
 8002426:	bf00      	nop
 8002428:	200002d0 	.word	0x200002d0
 800242c:	0800c120 	.word	0x0800c120
 8002430:	2000032d 	.word	0x2000032d
 8002434:	0800c124 	.word	0x0800c124

08002438 <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */
	//initialize timers
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 8002440:	2100      	movs	r1, #0
 8002442:	480b      	ldr	r0, [pc, #44]	; (8002470 <motor+0x38>)
 8002444:	f002 fe86 	bl	8005154 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8002448:	2104      	movs	r1, #4
 800244a:	4809      	ldr	r0, [pc, #36]	; (8002470 <motor+0x38>)
 800244c:	f002 fe82 	bl	8005154 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002450:	210c      	movs	r1, #12
 8002452:	4808      	ldr	r0, [pc, #32]	; (8002474 <motor+0x3c>)
 8002454:	f002 fe7e 	bl	8005154 <HAL_TIM_PWM_Start>

	/* Infinite loop */
	int count=0;
 8002458:	2300      	movs	r3, #0
 800245a:	60bb      	str	r3, [r7, #8]
	int reset=1;
 800245c:	2301      	movs	r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		if(reset==1){
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d1fc      	bne.n	8002460 <motor+0x28>
			realignWheels();
 8002466:	f7ff f98d 	bl	8001784 <realignWheels>
			reset=0;
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
		if(reset==1){
 800246e:	e7f7      	b.n	8002460 <motor+0x28>
 8002470:	20000228 	.word	0x20000228
 8002474:	20000108 	.word	0x20000108

08002478 <encoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder */
void encoder(void *argument)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b090      	sub	sp, #64	; 0x40
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder */
  /* Infinite loop */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //MOTORA Encoder
 8002480:	213c      	movs	r1, #60	; 0x3c
 8002482:	4856      	ldr	r0, [pc, #344]	; (80025dc <encoder+0x164>)
 8002484:	f003 f956 	bl	8005734 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); //MOTORB Encoder
 8002488:	213c      	movs	r1, #60	; 0x3c
 800248a:	4855      	ldr	r0, [pc, #340]	; (80025e0 <encoder+0x168>)
 800248c:	f003 f952 	bl	8005734 <HAL_TIM_Encoder_Start>
  int tim2Cnt1, tim2Cnt2, tim2Diff; //initiate some counters and a diff variable
  int tim3Cnt1, tim3Cnt2, tim3Diff;
  int expected;
  uint32_t tick;

  tim2Cnt1 = __HAL_TIM_GET_COUNTER(&htim2); //Get count at rising edge
 8002490:	4b52      	ldr	r3, [pc, #328]	; (80025dc <encoder+0x164>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	63fb      	str	r3, [r7, #60]	; 0x3c
  tim3Cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 8002498:	4b51      	ldr	r3, [pc, #324]	; (80025e0 <encoder+0x168>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	637b      	str	r3, [r7, #52]	; 0x34
  tick = HAL_GetTick(); //Grab current tick and slap it into tick
 80024a0:	f000 fdce 	bl	8003040 <HAL_GetTick>
 80024a4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint16_t dir2, dir3;


  for(;;)
  {
	if(HAL_GetTick()-tick > 1000L){
 80024a6:	f000 fdcb 	bl	8003040 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024b4:	d9f7      	bls.n	80024a6 <encoder+0x2e>
		tim2Cnt2 = __HAL_TIM_GET_COUNTER(&htim2); //get updated no of counts
 80024b6:	4b49      	ldr	r3, [pc, #292]	; (80025dc <encoder+0x164>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	62bb      	str	r3, [r7, #40]	; 0x28
		tim3Cnt2 = __HAL_TIM_GET_COUNTER(&htim3);
 80024be:	4b48      	ldr	r3, [pc, #288]	; (80025e0 <encoder+0x168>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
		//
		//tim2
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 80024c6:	4b45      	ldr	r3, [pc, #276]	; (80025dc <encoder+0x164>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	d110      	bne.n	80024f6 <encoder+0x7e>
			if(tim2Cnt2<tim2Cnt1) //underflow
 80024d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024d8:	429a      	cmp	r2, r3
 80024da:	da04      	bge.n	80024e6 <encoder+0x6e>
				tim2Diff = tim2Cnt1 - tim2Cnt2;
 80024dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e4:	e016      	b.n	8002514 <encoder+0x9c>
			else
				tim2Diff = (65535 - tim2Cnt2)+tim2Cnt1;
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80024ec:	33ff      	adds	r3, #255	; 0xff
 80024ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024f0:	4413      	add	r3, r2
 80024f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80024f4:	e00e      	b.n	8002514 <encoder+0x9c>
		}
		else{
			if(tim2Cnt2 > tim2Cnt1)
 80024f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024fa:	429a      	cmp	r2, r3
 80024fc:	dd04      	ble.n	8002508 <encoder+0x90>
				tim2Diff = tim2Cnt2 - tim2Cnt1;
 80024fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	63bb      	str	r3, [r7, #56]	; 0x38
 8002506:	e005      	b.n	8002514 <encoder+0x9c>
			else
				tim2Diff = (65536 - tim2Cnt1)+tim2Cnt2;
 8002508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800250a:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 800250e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002510:	4413      	add	r3, r2
 8002512:	63bb      	str	r3, [r7, #56]	; 0x38
		}
		//
		//tim3 doesnt work
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)){
 8002514:	4b32      	ldr	r3, [pc, #200]	; (80025e0 <encoder+0x168>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0310 	and.w	r3, r3, #16
 800251e:	2b10      	cmp	r3, #16
 8002520:	d110      	bne.n	8002544 <encoder+0xcc>
			if(tim3Cnt2<tim3Cnt1) //underflow
 8002522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002526:	429a      	cmp	r2, r3
 8002528:	da04      	bge.n	8002534 <encoder+0xbc>
				tim3Diff = tim3Cnt1 - tim3Cnt2;
 800252a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	633b      	str	r3, [r7, #48]	; 0x30
 8002532:	e016      	b.n	8002562 <encoder+0xea>
			else
				tim3Diff = (65535 - tim3Cnt2)+tim3Cnt1;
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800253a:	33ff      	adds	r3, #255	; 0xff
 800253c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800253e:	4413      	add	r3, r2
 8002540:	633b      	str	r3, [r7, #48]	; 0x30
 8002542:	e00e      	b.n	8002562 <encoder+0xea>
		}
		else{
			if(tim3Cnt2 > tim3Cnt1)
 8002544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002548:	429a      	cmp	r2, r3
 800254a:	dd04      	ble.n	8002556 <encoder+0xde>
				tim3Diff = tim3Cnt2 - tim3Cnt1;
 800254c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	633b      	str	r3, [r7, #48]	; 0x30
 8002554:	e005      	b.n	8002562 <encoder+0xea>
			else
				tim3Diff = (65536 - tim3Cnt1)+tim3Cnt2;
 8002556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002558:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 800255c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255e:	4413      	add	r3, r2
 8002560:	633b      	str	r3, [r7, #48]	; 0x30
		}

		sprintf(disp,"LSpeed:%5d",tim2Diff);
 8002562:	f107 030c 	add.w	r3, r7, #12
 8002566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002568:	491e      	ldr	r1, [pc, #120]	; (80025e4 <encoder+0x16c>)
 800256a:	4618      	mov	r0, r3
 800256c:	f008 fbd4 	bl	800ad18 <siprintf>
		OLED_ShowString(0,0,disp);
 8002570:	f107 030c 	add.w	r3, r7, #12
 8002574:	461a      	mov	r2, r3
 8002576:	2100      	movs	r1, #0
 8002578:	2000      	movs	r0, #0
 800257a:	f008 f9d3 	bl	800a924 <OLED_ShowString>
		sprintf(disp,"RSpeed:%5d",tim3Diff);
 800257e:	f107 030c 	add.w	r3, r7, #12
 8002582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002584:	4918      	ldr	r1, [pc, #96]	; (80025e8 <encoder+0x170>)
 8002586:	4618      	mov	r0, r3
 8002588:	f008 fbc6 	bl	800ad18 <siprintf>
		OLED_ShowString(0,10,disp);
 800258c:	f107 030c 	add.w	r3, r7, #12
 8002590:	461a      	mov	r2, r3
 8002592:	210a      	movs	r1, #10
 8002594:	2000      	movs	r0, #0
 8002596:	f008 f9c5 	bl	800a924 <OLED_ShowString>

		expected = (tim2Diff+tim3Diff)/2;
 800259a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259e:	4413      	add	r3, r2
 80025a0:	0fda      	lsrs	r2, r3, #31
 80025a2:	4413      	add	r3, r2
 80025a4:	105b      	asrs	r3, r3, #1
 80025a6:	623b      	str	r3, [r7, #32]
		if(tim2Diff>expected){
 80025a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	dc02      	bgt.n	80025b6 <encoder+0x13e>
			pwmVal_L - 15;
		}else if(tim2Diff<expected){
 80025b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	429a      	cmp	r2, r3
			pwmVal_L + 15;
		}
		if(tim3Diff>expected){
 80025b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	dc02      	bgt.n	80025c4 <encoder+0x14c>
			pwmVal_R - 15;
		}else if(tim3Diff<expected){
 80025be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	429a      	cmp	r2, r3
//		sprintf(disp,"Direct:%5d",dir2);
//		OLED_ShowString(0,20,disp);
//		sprintf(disp,"RDir:%5d",dir3);
//		OLED_ShowString(0,30,disp);
		//repeat
		tim2Cnt1 = __HAL_TIM_GET_COUNTER(&htim2); //Get count at rising edge
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <encoder+0x164>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	    tim3Cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <encoder+0x168>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	637b      	str	r3, [r7, #52]	; 0x34
	    tick = HAL_GetTick(); //Grab current time and slap it into tick
 80025d4:	f000 fd34 	bl	8003040 <HAL_GetTick>
 80025d8:	62f8      	str	r0, [r7, #44]	; 0x2c
	if(HAL_GetTick()-tick > 1000L){
 80025da:	e764      	b.n	80024a6 <encoder+0x2e>
 80025dc:	20000150 	.word	0x20000150
 80025e0:	20000198 	.word	0x20000198
 80025e4:	0800c130 	.word	0x0800c130
 80025e8:	0800c13c 	.word	0x0800c13c

080025ec <ultra>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ultra */
void ultra(void *argument)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ultra */
  /* Infinite loop */

	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 80025f4:	4b0d      	ldr	r3, [pc, #52]	; (800262c <ultra+0x40>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	4b0c      	ldr	r3, [pc, #48]	; (800262c <ultra+0x40>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0202 	orr.w	r2, r2, #2
 8002602:	60da      	str	r2, [r3, #12]
  for(;;)
  {
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8002604:	2201      	movs	r2, #1
 8002606:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800260a:	4809      	ldr	r0, [pc, #36]	; (8002630 <ultra+0x44>)
 800260c:	f001 f8a0 	bl	8003750 <HAL_GPIO_WritePin>
	osDelay(1);  // wait for 10 us
 8002610:	2001      	movs	r0, #1
 8002612:	f005 fba0 	bl	8007d56 <osDelay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8002616:	2200      	movs	r2, #0
 8002618:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800261c:	4804      	ldr	r0, [pc, #16]	; (8002630 <ultra+0x44>)
 800261e:	f001 f897 	bl	8003750 <HAL_GPIO_WritePin>

    osDelay(10);
 8002622:	200a      	movs	r0, #10
 8002624:	f005 fb97 	bl	8007d56 <osDelay>
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8002628:	e7ec      	b.n	8002604 <ultra+0x18>
 800262a:	bf00      	nop
 800262c:	200001e0 	.word	0x200001e0
 8002630:	40020c00 	.word	0x40020c00
 8002634:	00000000 	.word	0x00000000

08002638 <uart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart */
void uart(void *argument)
{
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {
	  //if (userBtnCount == 8){
	  	  HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 20);
 8002640:	2214      	movs	r2, #20
 8002642:	4945      	ldr	r1, [pc, #276]	; (8002758 <uart+0x120>)
 8002644:	4845      	ldr	r0, [pc, #276]	; (800275c <uart+0x124>)
 8002646:	f004 fadd 	bl	8006c04 <HAL_UART_Receive_IT>


		  char * pch = malloc(20);
 800264a:	2014      	movs	r0, #20
 800264c:	f008 fa56 	bl	800aafc <malloc>
 8002650:	4603      	mov	r3, r0
 8002652:	60bb      	str	r3, [r7, #8]
		  pch = strtok (aRxBuffer," ");
 8002654:	4942      	ldr	r1, [pc, #264]	; (8002760 <uart+0x128>)
 8002656:	4840      	ldr	r0, [pc, #256]	; (8002758 <uart+0x120>)
 8002658:	f008 fb7e 	bl	800ad58 <strtok>
 800265c:	4603      	mov	r3, r0
 800265e:	60bb      	str	r3, [r7, #8]


		  if(strcmp(pch, "FORWARD")==0){
 8002660:	4940      	ldr	r1, [pc, #256]	; (8002764 <uart+0x12c>)
 8002662:	68b8      	ldr	r0, [r7, #8]
 8002664:	f7fd fdb4 	bl	80001d0 <strcmp>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d103      	bne.n	8002676 <uart+0x3e>
			  dir=1;
 800266e:	4b3e      	ldr	r3, [pc, #248]	; (8002768 <uart+0x130>)
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
 8002674:	e002      	b.n	800267c <uart+0x44>
		  }else{
			  dir=0;
 8002676:	4b3c      	ldr	r3, [pc, #240]	; (8002768 <uart+0x130>)
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
		  }

		  pch = strtok (NULL, " ");
 800267c:	4938      	ldr	r1, [pc, #224]	; (8002760 <uart+0x128>)
 800267e:	2000      	movs	r0, #0
 8002680:	f008 fb6a 	bl	800ad58 <strtok>
 8002684:	4603      	mov	r3, r0
 8002686:	60bb      	str	r3, [r7, #8]

		  if(strcmp(pch,"TURN")==0){ //IF TURN
 8002688:	4938      	ldr	r1, [pc, #224]	; (800276c <uart+0x134>)
 800268a:	68b8      	ldr	r0, [r7, #8]
 800268c:	f7fd fda0 	bl	80001d0 <strcmp>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d122      	bne.n	80026dc <uart+0xa4>
			  pch = strtok (NULL, " "); //Next word first
 8002696:	4932      	ldr	r1, [pc, #200]	; (8002760 <uart+0x128>)
 8002698:	2000      	movs	r0, #0
 800269a:	f008 fb5d 	bl	800ad58 <strtok>
 800269e:	4603      	mov	r3, r0
 80026a0:	60bb      	str	r3, [r7, #8]
			  if(strcmp(pch,"LEFT")==0){//IF TURN LEFT
 80026a2:	4933      	ldr	r1, [pc, #204]	; (8002770 <uart+0x138>)
 80026a4:	68b8      	ldr	r0, [r7, #8]
 80026a6:	f7fd fd93 	bl	80001d0 <strcmp>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d106      	bne.n	80026be <uart+0x86>
				  //if (dir=1) //straight(DEFAULTPWM,DEFAULTPWM,1,50);
				  gyroturn(dir, 0, 90);
 80026b0:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <uart+0x130>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	225a      	movs	r2, #90	; 0x5a
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fa71 	bl	8001ba0 <gyroturn>
				  //straight(DEFAULTPWM, DEFAULTPWM, 1, 10);
				  //HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 10, 0xFFFF);
			  }
			  if(strcmp(pch,"RIGHT")==0){//IF TURN RIGHT
 80026be:	492d      	ldr	r1, [pc, #180]	; (8002774 <uart+0x13c>)
 80026c0:	68b8      	ldr	r0, [r7, #8]
 80026c2:	f7fd fd85 	bl	80001d0 <strcmp>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d128      	bne.n	800271e <uart+0xe6>
				  gyroturn(dir,1,90);
 80026cc:	4b26      	ldr	r3, [pc, #152]	; (8002768 <uart+0x130>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	225a      	movs	r2, #90	; 0x5a
 80026d2:	2101      	movs	r1, #1
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff fa63 	bl	8001ba0 <gyroturn>
 80026da:	e020      	b.n	800271e <uart+0xe6>
				  //HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 10, 0xFFFF);
			  }
		  }
		  else if(strcmp(pch,"MOVE")==0){
 80026dc:	4926      	ldr	r1, [pc, #152]	; (8002778 <uart+0x140>)
 80026de:	68b8      	ldr	r0, [r7, #8]
 80026e0:	f7fd fd76 	bl	80001d0 <strcmp>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d119      	bne.n	800271e <uart+0xe6>
			  pch = strtok (NULL, " "); //Next word first
 80026ea:	491d      	ldr	r1, [pc, #116]	; (8002760 <uart+0x128>)
 80026ec:	2000      	movs	r0, #0
 80026ee:	f008 fb33 	bl	800ad58 <strtok>
 80026f2:	4603      	mov	r3, r0
 80026f4:	60bb      	str	r3, [r7, #8]
			  gyrostraight(4500,DEFAULTPWM,dir,atoi(pch));
 80026f6:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <uart+0x130>)
 80026f8:	781c      	ldrb	r4, [r3, #0]
 80026fa:	68b8      	ldr	r0, [r7, #8]
 80026fc:	f008 f9d0 	bl	800aaa0 <atoi>
 8002700:	4603      	mov	r3, r0
 8002702:	4618      	mov	r0, r3
 8002704:	f7fd ff16 	bl	8000534 <__aeabi_i2d>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	ec43 2b12 	vmov	d2, r2, r3
 8002710:	4620      	mov	r0, r4
 8002712:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8002748 <uart+0x110>
 8002716:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8002750 <uart+0x118>
 800271a:	f7ff f8c9 	bl	80018b0 <gyrostraight>
		  }

		  for(int i =0; i<20;i++){
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	e00a      	b.n	800273a <uart+0x102>
			  sprintf(aRxBuffer[i], ' ');
 8002724:	4a0c      	ldr	r2, [pc, #48]	; (8002758 <uart+0x120>)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4413      	add	r3, r2
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2120      	movs	r1, #32
 800272e:	4618      	mov	r0, r3
 8002730:	f008 faf2 	bl	800ad18 <siprintf>
		  for(int i =0; i<20;i++){
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	3301      	adds	r3, #1
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2b13      	cmp	r3, #19
 800273e:	ddf1      	ble.n	8002724 <uart+0xec>
		  } //????? DOES THIS EVEN WORK

    osDelay(100);
 8002740:	2064      	movs	r0, #100	; 0x64
 8002742:	f005 fb08 	bl	8007d56 <osDelay>
  {
 8002746:	e77b      	b.n	8002640 <uart+0x8>
 8002748:	00000000 	.word	0x00000000
 800274c:	40b38800 	.word	0x40b38800
 8002750:	00000000 	.word	0x00000000
 8002754:	40b19400 	.word	0x40b19400
 8002758:	200002d0 	.word	0x200002d0
 800275c:	20000270 	.word	0x20000270
 8002760:	0800c148 	.word	0x0800c148
 8002764:	0800c14c 	.word	0x0800c14c
 8002768:	20000020 	.word	0x20000020
 800276c:	0800c154 	.word	0x0800c154
 8002770:	0800c15c 	.word	0x0800c15c
 8002774:	0800c164 	.word	0x0800c164
 8002778:	0800c16c 	.word	0x0800c16c

0800277c <icm20948>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_icm20948 */
void icm20948(void *argument)
{
 800277c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002780:	b088      	sub	sp, #32
 8002782:	af00      	add	r7, sp, #0
 8002784:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN icm20948 */
	uint8_t mag_count = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	77fb      	strb	r3, [r7, #31]
	uint32_t lastWakeTime = HAL_GetTick();
 800278a:	f000 fc59 	bl	8003040 <HAL_GetTick>
 800278e:	61b8      	str	r0, [r7, #24]
	ICMInit(); //initialize ICM
 8002790:	f7ff fcfa 	bl	8002188 <ICMInit>
  /* Infinite loop */
  for(;;)
  {
	  //vTaskDelayUntil(&lastWakeTime, 0.01);
	  if(Deviation_Count<CONTROL_DELAY)
 8002794:	4b35      	ldr	r3, [pc, #212]	; (800286c <icm20948+0xf0>)
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800279c:	d20c      	bcs.n	80027b8 <icm20948+0x3c>
	  {
		  Deviation_Count++;
 800279e:	4b33      	ldr	r3, [pc, #204]	; (800286c <icm20948+0xf0>)
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	4b31      	ldr	r3, [pc, #196]	; (800286c <icm20948+0xf0>)
 80027a8:	801a      	strh	r2, [r3, #0]
		  memcpy(Deviation_gyro,gyro,sizeof(gyro));
 80027aa:	4b31      	ldr	r3, [pc, #196]	; (8002870 <icm20948+0xf4>)
 80027ac:	4a31      	ldr	r2, [pc, #196]	; (8002874 <icm20948+0xf8>)
 80027ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027b2:	6018      	str	r0, [r3, #0]
 80027b4:	3304      	adds	r3, #4
 80027b6:	8019      	strh	r1, [r3, #0]
	  }
	  //Get acceleration sensor data
//	  ICMAccelRead(&accel[0], &accel[1], &accel[2]);
	  //Get gyroscope data
	  MPU_Get_Gyroscope();
 80027b8:	f7ff fc9c 	bl	80020f4 <MPU_Get_Gyroscope>
	  //Get magnetometer data
//	  ICMMagRead(&magnet[0], &magnet[1], &magnet[2]);
//	  sprintf(icmTempMsg,"%d %d %d      ",magnet[0],magnet[1],magnet[2]);
	  sprintf(icmTempMsg,"Gyr%+07d",gyro[2]);
 80027bc:	4b2d      	ldr	r3, [pc, #180]	; (8002874 <icm20948+0xf8>)
 80027be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027c2:	461a      	mov	r2, r3
 80027c4:	492c      	ldr	r1, [pc, #176]	; (8002878 <icm20948+0xfc>)
 80027c6:	482d      	ldr	r0, [pc, #180]	; (800287c <icm20948+0x100>)
 80027c8:	f008 faa6 	bl	800ad18 <siprintf>
	  OLED_ShowString(0, 20, icmTempMsg);
 80027cc:	4a2b      	ldr	r2, [pc, #172]	; (800287c <icm20948+0x100>)
 80027ce:	2114      	movs	r1, #20
 80027d0:	2000      	movs	r0, #0
 80027d2:	f008 f8a7 	bl	800a924 <OLED_ShowString>
	  if(abs(gyro[2]-gyrozero)>50){
 80027d6:	4b27      	ldr	r3, [pc, #156]	; (8002874 <icm20948+0xf8>)
 80027d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027dc:	4619      	mov	r1, r3
 80027de:	4b28      	ldr	r3, [pc, #160]	; (8002880 <icm20948+0x104>)
 80027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e4:	4613      	mov	r3, r2
 80027e6:	1acb      	subs	r3, r1, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	bfb8      	it	lt
 80027ec:	425b      	neglt	r3, r3
 80027ee:	2b32      	cmp	r3, #50	; 0x32
 80027f0:	dd37      	ble.n	8002862 <icm20948+0xe6>
		  gyrosum+=abs(gyro[2]-gyrozero);
 80027f2:	4b20      	ldr	r3, [pc, #128]	; (8002874 <icm20948+0xf8>)
 80027f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027f8:	4619      	mov	r1, r3
 80027fa:	4b21      	ldr	r3, [pc, #132]	; (8002880 <icm20948+0x104>)
 80027fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002800:	4613      	mov	r3, r2
 8002802:	1acb      	subs	r3, r1, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	bfb8      	it	lt
 8002808:	425b      	neglt	r3, r3
 800280a:	17da      	asrs	r2, r3, #31
 800280c:	4698      	mov	r8, r3
 800280e:	4691      	mov	r9, r2
 8002810:	4b1c      	ldr	r3, [pc, #112]	; (8002884 <icm20948+0x108>)
 8002812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002816:	eb18 0102 	adds.w	r1, r8, r2
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	eb49 0303 	adc.w	r3, r9, r3
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b18      	ldr	r3, [pc, #96]	; (8002884 <icm20948+0x108>)
 8002824:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002828:	e9c3 1200 	strd	r1, r2, [r3]
		  gyrosumsigned+=gyro[2]-gyrozero;
 800282c:	4b11      	ldr	r3, [pc, #68]	; (8002874 <icm20948+0xf8>)
 800282e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002832:	b21b      	sxth	r3, r3
 8002834:	17da      	asrs	r2, r3, #31
 8002836:	469a      	mov	sl, r3
 8002838:	4693      	mov	fp, r2
 800283a:	4b11      	ldr	r3, [pc, #68]	; (8002880 <icm20948+0x104>)
 800283c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002840:	ebba 0402 	subs.w	r4, sl, r2
 8002844:	eb6b 0503 	sbc.w	r5, fp, r3
 8002848:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <icm20948+0x10c>)
 800284a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284e:	18a1      	adds	r1, r4, r2
 8002850:	6039      	str	r1, [r7, #0]
 8002852:	eb45 0303 	adc.w	r3, r5, r3
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800285c:	490a      	ldr	r1, [pc, #40]	; (8002888 <icm20948+0x10c>)
 800285e:	e9c1 2300 	strd	r2, r3, [r1]
	  }



	  osDelay(25);
 8002862:	2019      	movs	r0, #25
 8002864:	f005 fa77 	bl	8007d56 <osDelay>
  {
 8002868:	e794      	b.n	8002794 <icm20948+0x18>
 800286a:	bf00      	nop
 800286c:	2000035e 	.word	0x2000035e
 8002870:	20000348 	.word	0x20000348
 8002874:	20000358 	.word	0x20000358
 8002878:	0800c174 	.word	0x0800c174
 800287c:	20000330 	.word	0x20000330
 8002880:	20000368 	.word	0x20000368
 8002884:	20000360 	.word	0x20000360
 8002888:	20000370 	.word	0x20000370

0800288c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002890:	b672      	cpsid	i
}
 8002892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002894:	e7fe      	b.n	8002894 <Error_Handler+0x8>
	...

08002898 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	607b      	str	r3, [r7, #4]
 80028a2:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_MspInit+0x54>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	4a11      	ldr	r2, [pc, #68]	; (80028ec <HAL_MspInit+0x54>)
 80028a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ac:	6453      	str	r3, [r2, #68]	; 0x44
 80028ae:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <HAL_MspInit+0x54>)
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b6:	607b      	str	r3, [r7, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	603b      	str	r3, [r7, #0]
 80028be:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <HAL_MspInit+0x54>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <HAL_MspInit+0x54>)
 80028c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <HAL_MspInit+0x54>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	210f      	movs	r1, #15
 80028da:	f06f 0001 	mvn.w	r0, #1
 80028de:	f000 fcba 	bl	8003256 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40023800 	.word	0x40023800

080028f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08a      	sub	sp, #40	; 0x28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f8:	f107 0314 	add.w	r3, r7, #20
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a19      	ldr	r2, [pc, #100]	; (8002974 <HAL_I2C_MspInit+0x84>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d12c      	bne.n	800296c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	4b18      	ldr	r3, [pc, #96]	; (8002978 <HAL_I2C_MspInit+0x88>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	4a17      	ldr	r2, [pc, #92]	; (8002978 <HAL_I2C_MspInit+0x88>)
 800291c:	f043 0302 	orr.w	r3, r3, #2
 8002920:	6313      	str	r3, [r2, #48]	; 0x30
 8002922:	4b15      	ldr	r3, [pc, #84]	; (8002978 <HAL_I2C_MspInit+0x88>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800292e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002934:	2312      	movs	r3, #18
 8002936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293c:	2303      	movs	r3, #3
 800293e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002940:	2304      	movs	r3, #4
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002944:	f107 0314 	add.w	r3, r7, #20
 8002948:	4619      	mov	r1, r3
 800294a:	480c      	ldr	r0, [pc, #48]	; (800297c <HAL_I2C_MspInit+0x8c>)
 800294c:	f000 fd4c 	bl	80033e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	4b08      	ldr	r3, [pc, #32]	; (8002978 <HAL_I2C_MspInit+0x88>)
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	4a07      	ldr	r2, [pc, #28]	; (8002978 <HAL_I2C_MspInit+0x88>)
 800295a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800295e:	6413      	str	r3, [r2, #64]	; 0x40
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_I2C_MspInit+0x88>)
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800296c:	bf00      	nop
 800296e:	3728      	adds	r7, #40	; 0x28
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40005400 	.word	0x40005400
 8002978:	40023800 	.word	0x40023800
 800297c:	40020400 	.word	0x40020400

08002980 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08c      	sub	sp, #48	; 0x30
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 031c 	add.w	r3, r7, #28
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a40      	ldr	r2, [pc, #256]	; (8002aa0 <HAL_TIM_Base_MspInit+0x120>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d10e      	bne.n	80029c0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	4b3f      	ldr	r3, [pc, #252]	; (8002aa4 <HAL_TIM_Base_MspInit+0x124>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a3e      	ldr	r2, [pc, #248]	; (8002aa4 <HAL_TIM_Base_MspInit+0x124>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6453      	str	r3, [r2, #68]	; 0x44
 80029b2:	4b3c      	ldr	r3, [pc, #240]	; (8002aa4 <HAL_TIM_Base_MspInit+0x124>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	61bb      	str	r3, [r7, #24]
 80029bc:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80029be:	e06b      	b.n	8002a98 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM4)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a38      	ldr	r2, [pc, #224]	; (8002aa8 <HAL_TIM_Base_MspInit+0x128>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d135      	bne.n	8002a36 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	4b35      	ldr	r3, [pc, #212]	; (8002aa4 <HAL_TIM_Base_MspInit+0x124>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	4a34      	ldr	r2, [pc, #208]	; (8002aa4 <HAL_TIM_Base_MspInit+0x124>)
 80029d4:	f043 0304 	orr.w	r3, r3, #4
 80029d8:	6413      	str	r3, [r2, #64]	; 0x40
 80029da:	4b32      	ldr	r3, [pc, #200]	; (8002aa4 <HAL_TIM_Base_MspInit+0x124>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	4b2e      	ldr	r3, [pc, #184]	; (8002aa4 <HAL_TIM_Base_MspInit+0x124>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	4a2d      	ldr	r2, [pc, #180]	; (8002aa4 <HAL_TIM_Base_MspInit+0x124>)
 80029f0:	f043 0308 	orr.w	r3, r3, #8
 80029f4:	6313      	str	r3, [r2, #48]	; 0x30
 80029f6:	4b2b      	ldr	r3, [pc, #172]	; (8002aa4 <HAL_TIM_Base_MspInit+0x124>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a10:	2300      	movs	r3, #0
 8002a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a14:	2302      	movs	r3, #2
 8002a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a18:	f107 031c 	add.w	r3, r7, #28
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4823      	ldr	r0, [pc, #140]	; (8002aac <HAL_TIM_Base_MspInit+0x12c>)
 8002a20:	f000 fce2 	bl	80033e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002a24:	2200      	movs	r2, #0
 8002a26:	2105      	movs	r1, #5
 8002a28:	201e      	movs	r0, #30
 8002a2a:	f000 fc14 	bl	8003256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a2e:	201e      	movs	r0, #30
 8002a30:	f000 fc2d 	bl	800328e <HAL_NVIC_EnableIRQ>
}
 8002a34:	e030      	b.n	8002a98 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM8)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1d      	ldr	r2, [pc, #116]	; (8002ab0 <HAL_TIM_Base_MspInit+0x130>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d12b      	bne.n	8002a98 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <HAL_TIM_Base_MspInit+0x124>)
 8002a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a48:	4a16      	ldr	r2, [pc, #88]	; (8002aa4 <HAL_TIM_Base_MspInit+0x124>)
 8002a4a:	f043 0302 	orr.w	r3, r3, #2
 8002a4e:	6453      	str	r3, [r2, #68]	; 0x44
 8002a50:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <HAL_TIM_Base_MspInit+0x124>)
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <HAL_TIM_Base_MspInit+0x124>)
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	4a0f      	ldr	r2, [pc, #60]	; (8002aa4 <HAL_TIM_Base_MspInit+0x124>)
 8002a66:	f043 0304 	orr.w	r3, r3, #4
 8002a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6c:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <HAL_TIM_Base_MspInit+0x124>)
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8002a78:	23c0      	movs	r3, #192	; 0xc0
 8002a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a84:	2300      	movs	r3, #0
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a8c:	f107 031c 	add.w	r3, r7, #28
 8002a90:	4619      	mov	r1, r3
 8002a92:	4808      	ldr	r0, [pc, #32]	; (8002ab4 <HAL_TIM_Base_MspInit+0x134>)
 8002a94:	f000 fca8 	bl	80033e8 <HAL_GPIO_Init>
}
 8002a98:	bf00      	nop
 8002a9a:	3730      	adds	r7, #48	; 0x30
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40010000 	.word	0x40010000
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40000800 	.word	0x40000800
 8002aac:	40020c00 	.word	0x40020c00
 8002ab0:	40010400 	.word	0x40010400
 8002ab4:	40020800 	.word	0x40020800

08002ab8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08c      	sub	sp, #48	; 0x30
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac0:	f107 031c 	add.w	r3, r7, #28
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad8:	d14b      	bne.n	8002b72 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	61bb      	str	r3, [r7, #24]
 8002ade:	4b3f      	ldr	r3, [pc, #252]	; (8002bdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	4a3e      	ldr	r2, [pc, #248]	; (8002bdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aea:	4b3c      	ldr	r3, [pc, #240]	; (8002bdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	4b38      	ldr	r3, [pc, #224]	; (8002bdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a37      	ldr	r2, [pc, #220]	; (8002bdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b35      	ldr	r3, [pc, #212]	; (8002bdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	4b31      	ldr	r3, [pc, #196]	; (8002bdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	4a30      	ldr	r2, [pc, #192]	; (8002bdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002b1c:	f043 0302 	orr.w	r3, r3, #2
 8002b20:	6313      	str	r3, [r2, #48]	; 0x30
 8002b22:	4b2e      	ldr	r3, [pc, #184]	; (8002bdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b34:	2302      	movs	r3, #2
 8002b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b40:	2301      	movs	r3, #1
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b44:	f107 031c 	add.w	r3, r7, #28
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4825      	ldr	r0, [pc, #148]	; (8002be0 <HAL_TIM_Encoder_MspInit+0x128>)
 8002b4c:	f000 fc4c 	bl	80033e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b50:	2308      	movs	r3, #8
 8002b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b60:	2301      	movs	r3, #1
 8002b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b64:	f107 031c 	add.w	r3, r7, #28
 8002b68:	4619      	mov	r1, r3
 8002b6a:	481e      	ldr	r0, [pc, #120]	; (8002be4 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002b6c:	f000 fc3c 	bl	80033e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b70:	e030      	b.n	8002bd4 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a1c      	ldr	r2, [pc, #112]	; (8002be8 <HAL_TIM_Encoder_MspInit+0x130>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d12b      	bne.n	8002bd4 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	4a15      	ldr	r2, [pc, #84]	; (8002bdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002b86:	f043 0302 	orr.w	r3, r3, #2
 8002b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8c:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	4a0e      	ldr	r2, [pc, #56]	; (8002bdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <HAL_TIM_Encoder_MspInit+0x124>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bb4:	23c0      	movs	r3, #192	; 0xc0
 8002bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc8:	f107 031c 	add.w	r3, r7, #28
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4804      	ldr	r0, [pc, #16]	; (8002be0 <HAL_TIM_Encoder_MspInit+0x128>)
 8002bd0:	f000 fc0a 	bl	80033e8 <HAL_GPIO_Init>
}
 8002bd4:	bf00      	nop
 8002bd6:	3730      	adds	r7, #48	; 0x30
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40020000 	.word	0x40020000
 8002be4:	40020400 	.word	0x40020400
 8002be8:	40000400 	.word	0x40000400

08002bec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	f107 030c 	add.w	r3, r7, #12
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <HAL_TIM_MspPostInit+0x68>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d11e      	bne.n	8002c4c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <HAL_TIM_MspPostInit+0x6c>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	4a10      	ldr	r2, [pc, #64]	; (8002c58 <HAL_TIM_MspPostInit+0x6c>)
 8002c18:	f043 0310 	orr.w	r3, r3, #16
 8002c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <HAL_TIM_MspPostInit+0x6c>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c40:	f107 030c 	add.w	r3, r7, #12
 8002c44:	4619      	mov	r1, r3
 8002c46:	4805      	ldr	r0, [pc, #20]	; (8002c5c <HAL_TIM_MspPostInit+0x70>)
 8002c48:	f000 fbce 	bl	80033e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c4c:	bf00      	nop
 8002c4e:	3720      	adds	r7, #32
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40010000 	.word	0x40010000
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40021000 	.word	0x40021000

08002c60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08a      	sub	sp, #40	; 0x28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c68:	f107 0314 	add.w	r3, r7, #20
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a1d      	ldr	r2, [pc, #116]	; (8002cf4 <HAL_UART_MspInit+0x94>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d134      	bne.n	8002cec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	4b1c      	ldr	r3, [pc, #112]	; (8002cf8 <HAL_UART_MspInit+0x98>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	4a1b      	ldr	r2, [pc, #108]	; (8002cf8 <HAL_UART_MspInit+0x98>)
 8002c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c90:	6413      	str	r3, [r2, #64]	; 0x40
 8002c92:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <HAL_UART_MspInit+0x98>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <HAL_UART_MspInit+0x98>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	4a14      	ldr	r2, [pc, #80]	; (8002cf8 <HAL_UART_MspInit+0x98>)
 8002ca8:	f043 0304 	orr.w	r3, r3, #4
 8002cac:	6313      	str	r3, [r2, #48]	; 0x30
 8002cae:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <HAL_UART_MspInit+0x98>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002cba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ccc:	2307      	movs	r3, #7
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cd0:	f107 0314 	add.w	r3, r7, #20
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4809      	ldr	r0, [pc, #36]	; (8002cfc <HAL_UART_MspInit+0x9c>)
 8002cd8:	f000 fb86 	bl	80033e8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2105      	movs	r1, #5
 8002ce0:	2027      	movs	r0, #39	; 0x27
 8002ce2:	f000 fab8 	bl	8003256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ce6:	2027      	movs	r0, #39	; 0x27
 8002ce8:	f000 fad1 	bl	800328e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002cec:	bf00      	nop
 8002cee:	3728      	adds	r7, #40	; 0x28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40004800 	.word	0x40004800
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	40020800 	.word	0x40020800

08002d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d04:	e7fe      	b.n	8002d04 <NMI_Handler+0x4>

08002d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d06:	b480      	push	{r7}
 8002d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d0a:	e7fe      	b.n	8002d0a <HardFault_Handler+0x4>

08002d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d10:	e7fe      	b.n	8002d10 <MemManage_Handler+0x4>

08002d12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d12:	b480      	push	{r7}
 8002d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d16:	e7fe      	b.n	8002d16 <BusFault_Handler+0x4>

08002d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d1c:	e7fe      	b.n	8002d1c <UsageFault_Handler+0x4>

08002d1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d30:	f000 f972 	bl	8003018 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002d34:	f006 fc1c 	bl	8009570 <xTaskGetSchedulerState>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d001      	beq.n	8002d42 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002d3e:	f007 fa03 	bl	800a148 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002d4c:	4802      	ldr	r0, [pc, #8]	; (8002d58 <TIM4_IRQHandler+0x10>)
 8002d4e:	f002 fd7f 	bl	8005850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	200001e0 	.word	0x200001e0

08002d5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d60:	4802      	ldr	r0, [pc, #8]	; (8002d6c <USART3_IRQHandler+0x10>)
 8002d62:	f003 ff7f 	bl	8006c64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000270 	.word	0x20000270

08002d70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
	return 1;
 8002d74:	2301      	movs	r3, #1
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <_kill>:

int _kill(int pid, int sig)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d8a:	f007 fe8d 	bl	800aaa8 <__errno>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2216      	movs	r2, #22
 8002d92:	601a      	str	r2, [r3, #0]
	return -1;
 8002d94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <_exit>:

void _exit (int status)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002da8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7ff ffe7 	bl	8002d80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002db2:	e7fe      	b.n	8002db2 <_exit+0x12>

08002db4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	e00a      	b.n	8002ddc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002dc6:	f3af 8000 	nop.w
 8002dca:	4601      	mov	r1, r0
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	60ba      	str	r2, [r7, #8]
 8002dd2:	b2ca      	uxtb	r2, r1
 8002dd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	dbf0      	blt.n	8002dc6 <_read+0x12>
	}

return len;
 8002de4:	687b      	ldr	r3, [r7, #4]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b086      	sub	sp, #24
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	e009      	b.n	8002e14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	60ba      	str	r2, [r7, #8]
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	3301      	adds	r3, #1
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	dbf1      	blt.n	8002e00 <_write+0x12>
	}
	return len;
 8002e1c:	687b      	ldr	r3, [r7, #4]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <_close>:

int _close(int file)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
	return -1;
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e4e:	605a      	str	r2, [r3, #4]
	return 0;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <_isatty>:

int _isatty(int file)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
	return 1;
 8002e66:	2301      	movs	r3, #1
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
	return 0;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e98:	4a14      	ldr	r2, [pc, #80]	; (8002eec <_sbrk+0x5c>)
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <_sbrk+0x60>)
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ea4:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <_sbrk+0x64>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d102      	bne.n	8002eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002eac:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <_sbrk+0x64>)
 8002eae:	4a12      	ldr	r2, [pc, #72]	; (8002ef8 <_sbrk+0x68>)
 8002eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eb2:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <_sbrk+0x64>)
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4413      	add	r3, r2
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d207      	bcs.n	8002ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ec0:	f007 fdf2 	bl	800aaa8 <__errno>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	220c      	movs	r2, #12
 8002ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ece:	e009      	b.n	8002ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <_sbrk+0x64>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ed6:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <_sbrk+0x64>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4413      	add	r3, r2
 8002ede:	4a05      	ldr	r2, [pc, #20]	; (8002ef4 <_sbrk+0x64>)
 8002ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20020000 	.word	0x20020000
 8002ef0:	00000400 	.word	0x00000400
 8002ef4:	200003b4 	.word	0x200003b4
 8002ef8:	20005720 	.word	0x20005720

08002efc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <SystemInit+0x20>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f06:	4a05      	ldr	r2, [pc, #20]	; (8002f1c <SystemInit+0x20>)
 8002f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f24:	480d      	ldr	r0, [pc, #52]	; (8002f5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f26:	490e      	ldr	r1, [pc, #56]	; (8002f60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f28:	4a0e      	ldr	r2, [pc, #56]	; (8002f64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f2c:	e002      	b.n	8002f34 <LoopCopyDataInit>

08002f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f32:	3304      	adds	r3, #4

08002f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f38:	d3f9      	bcc.n	8002f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f3a:	4a0b      	ldr	r2, [pc, #44]	; (8002f68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f3c:	4c0b      	ldr	r4, [pc, #44]	; (8002f6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f40:	e001      	b.n	8002f46 <LoopFillZerobss>

08002f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f44:	3204      	adds	r2, #4

08002f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f48:	d3fb      	bcc.n	8002f42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f4a:	f7ff ffd7 	bl	8002efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f4e:	f007 fdb1 	bl	800aab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f52:	f7fd ff95 	bl	8000e80 <main>
  bx  lr    
 8002f56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f60:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002f64:	0800cf6c 	.word	0x0800cf6c
  ldr r2, =_sbss
 8002f68:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002f6c:	2000571c 	.word	0x2000571c

08002f70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f70:	e7fe      	b.n	8002f70 <ADC_IRQHandler>
	...

08002f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f78:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <HAL_Init+0x40>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a0d      	ldr	r2, [pc, #52]	; (8002fb4 <HAL_Init+0x40>)
 8002f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_Init+0x40>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <HAL_Init+0x40>)
 8002f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f90:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <HAL_Init+0x40>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a07      	ldr	r2, [pc, #28]	; (8002fb4 <HAL_Init+0x40>)
 8002f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f9c:	2003      	movs	r0, #3
 8002f9e:	f000 f94f 	bl	8003240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fa2:	200f      	movs	r0, #15
 8002fa4:	f000 f808 	bl	8002fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fa8:	f7ff fc76 	bl	8002898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40023c00 	.word	0x40023c00

08002fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fc0:	4b12      	ldr	r3, [pc, #72]	; (800300c <HAL_InitTick+0x54>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4b12      	ldr	r3, [pc, #72]	; (8003010 <HAL_InitTick+0x58>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 f967 	bl	80032aa <HAL_SYSTICK_Config>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e00e      	b.n	8003004 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b0f      	cmp	r3, #15
 8002fea:	d80a      	bhi.n	8003002 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fec:	2200      	movs	r2, #0
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff4:	f000 f92f 	bl	8003256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ff8:	4a06      	ldr	r2, [pc, #24]	; (8003014 <HAL_InitTick+0x5c>)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	e000      	b.n	8003004 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
}
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20000024 	.word	0x20000024
 8003010:	2000002c 	.word	0x2000002c
 8003014:	20000028 	.word	0x20000028

08003018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_IncTick+0x20>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_IncTick+0x24>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4413      	add	r3, r2
 8003028:	4a04      	ldr	r2, [pc, #16]	; (800303c <HAL_IncTick+0x24>)
 800302a:	6013      	str	r3, [r2, #0]
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	2000002c 	.word	0x2000002c
 800303c:	200003b8 	.word	0x200003b8

08003040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return uwTick;
 8003044:	4b03      	ldr	r3, [pc, #12]	; (8003054 <HAL_GetTick+0x14>)
 8003046:	681b      	ldr	r3, [r3, #0]
}
 8003048:	4618      	mov	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	200003b8 	.word	0x200003b8

08003058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003060:	f7ff ffee 	bl	8003040 <HAL_GetTick>
 8003064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d005      	beq.n	800307e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003072:	4b0a      	ldr	r3, [pc, #40]	; (800309c <HAL_Delay+0x44>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4413      	add	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800307e:	bf00      	nop
 8003080:	f7ff ffde 	bl	8003040 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	429a      	cmp	r2, r3
 800308e:	d8f7      	bhi.n	8003080 <HAL_Delay+0x28>
  {
  }
}
 8003090:	bf00      	nop
 8003092:	bf00      	nop
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	2000002c 	.word	0x2000002c

080030a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <__NVIC_SetPriorityGrouping+0x44>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030bc:	4013      	ands	r3, r2
 80030be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030d2:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <__NVIC_SetPriorityGrouping+0x44>)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	60d3      	str	r3, [r2, #12]
}
 80030d8:	bf00      	nop
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030ec:	4b04      	ldr	r3, [pc, #16]	; (8003100 <__NVIC_GetPriorityGrouping+0x18>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	0a1b      	lsrs	r3, r3, #8
 80030f2:	f003 0307 	and.w	r3, r3, #7
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800310e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003112:	2b00      	cmp	r3, #0
 8003114:	db0b      	blt.n	800312e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	f003 021f 	and.w	r2, r3, #31
 800311c:	4907      	ldr	r1, [pc, #28]	; (800313c <__NVIC_EnableIRQ+0x38>)
 800311e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	2001      	movs	r0, #1
 8003126:	fa00 f202 	lsl.w	r2, r0, r2
 800312a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	e000e100 	.word	0xe000e100

08003140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	6039      	str	r1, [r7, #0]
 800314a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003150:	2b00      	cmp	r3, #0
 8003152:	db0a      	blt.n	800316a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	b2da      	uxtb	r2, r3
 8003158:	490c      	ldr	r1, [pc, #48]	; (800318c <__NVIC_SetPriority+0x4c>)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	0112      	lsls	r2, r2, #4
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	440b      	add	r3, r1
 8003164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003168:	e00a      	b.n	8003180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	b2da      	uxtb	r2, r3
 800316e:	4908      	ldr	r1, [pc, #32]	; (8003190 <__NVIC_SetPriority+0x50>)
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	3b04      	subs	r3, #4
 8003178:	0112      	lsls	r2, r2, #4
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	440b      	add	r3, r1
 800317e:	761a      	strb	r2, [r3, #24]
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	e000e100 	.word	0xe000e100
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003194:	b480      	push	{r7}
 8003196:	b089      	sub	sp, #36	; 0x24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f1c3 0307 	rsb	r3, r3, #7
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	bf28      	it	cs
 80031b2:	2304      	movcs	r3, #4
 80031b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3304      	adds	r3, #4
 80031ba:	2b06      	cmp	r3, #6
 80031bc:	d902      	bls.n	80031c4 <NVIC_EncodePriority+0x30>
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3b03      	subs	r3, #3
 80031c2:	e000      	b.n	80031c6 <NVIC_EncodePriority+0x32>
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c8:	f04f 32ff 	mov.w	r2, #4294967295
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43da      	mvns	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	401a      	ands	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031dc:	f04f 31ff 	mov.w	r1, #4294967295
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	fa01 f303 	lsl.w	r3, r1, r3
 80031e6:	43d9      	mvns	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ec:	4313      	orrs	r3, r2
         );
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3724      	adds	r7, #36	; 0x24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
	...

080031fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3b01      	subs	r3, #1
 8003208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800320c:	d301      	bcc.n	8003212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800320e:	2301      	movs	r3, #1
 8003210:	e00f      	b.n	8003232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003212:	4a0a      	ldr	r2, [pc, #40]	; (800323c <SysTick_Config+0x40>)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3b01      	subs	r3, #1
 8003218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800321a:	210f      	movs	r1, #15
 800321c:	f04f 30ff 	mov.w	r0, #4294967295
 8003220:	f7ff ff8e 	bl	8003140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <SysTick_Config+0x40>)
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800322a:	4b04      	ldr	r3, [pc, #16]	; (800323c <SysTick_Config+0x40>)
 800322c:	2207      	movs	r2, #7
 800322e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	e000e010 	.word	0xe000e010

08003240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff ff29 	bl	80030a0 <__NVIC_SetPriorityGrouping>
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003256:	b580      	push	{r7, lr}
 8003258:	b086      	sub	sp, #24
 800325a:	af00      	add	r7, sp, #0
 800325c:	4603      	mov	r3, r0
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003268:	f7ff ff3e 	bl	80030e8 <__NVIC_GetPriorityGrouping>
 800326c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	6978      	ldr	r0, [r7, #20]
 8003274:	f7ff ff8e 	bl	8003194 <NVIC_EncodePriority>
 8003278:	4602      	mov	r2, r0
 800327a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff5d 	bl	8003140 <__NVIC_SetPriority>
}
 8003286:	bf00      	nop
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff ff31 	bl	8003104 <__NVIC_EnableIRQ>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff ffa2 	bl	80031fc <SysTick_Config>
 80032b8:	4603      	mov	r3, r0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032d0:	f7ff feb6 	bl	8003040 <HAL_GetTick>
 80032d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d008      	beq.n	80032f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2280      	movs	r2, #128	; 0x80
 80032e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e052      	b.n	800339a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0216 	bic.w	r2, r2, #22
 8003302:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003312:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	2b00      	cmp	r3, #0
 800331a:	d103      	bne.n	8003324 <HAL_DMA_Abort+0x62>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003320:	2b00      	cmp	r3, #0
 8003322:	d007      	beq.n	8003334 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0208 	bic.w	r2, r2, #8
 8003332:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0201 	bic.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003344:	e013      	b.n	800336e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003346:	f7ff fe7b 	bl	8003040 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b05      	cmp	r3, #5
 8003352:	d90c      	bls.n	800336e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2220      	movs	r2, #32
 8003358:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2203      	movs	r2, #3
 800335e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e015      	b.n	800339a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1e4      	bne.n	8003346 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003380:	223f      	movs	r2, #63	; 0x3f
 8003382:	409a      	lsls	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d004      	beq.n	80033c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2280      	movs	r2, #128	; 0x80
 80033ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e00c      	b.n	80033da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2205      	movs	r2, #5
 80033c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0201 	bic.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
	...

080033e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b089      	sub	sp, #36	; 0x24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
 8003402:	e16b      	b.n	80036dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003404:	2201      	movs	r2, #1
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	429a      	cmp	r2, r3
 800341e:	f040 815a 	bne.w	80036d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b01      	cmp	r3, #1
 800342c:	d005      	beq.n	800343a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003436:	2b02      	cmp	r3, #2
 8003438:	d130      	bne.n	800349c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	2203      	movs	r2, #3
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4313      	orrs	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003470:	2201      	movs	r2, #1
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 0201 	and.w	r2, r3, #1
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 0303 	and.w	r3, r3, #3
 80034a4:	2b03      	cmp	r3, #3
 80034a6:	d017      	beq.n	80034d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	2203      	movs	r2, #3
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	43db      	mvns	r3, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4013      	ands	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d123      	bne.n	800352c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	08da      	lsrs	r2, r3, #3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3208      	adds	r2, #8
 80034ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	220f      	movs	r2, #15
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4013      	ands	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4313      	orrs	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	08da      	lsrs	r2, r3, #3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3208      	adds	r2, #8
 8003526:	69b9      	ldr	r1, [r7, #24]
 8003528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	2203      	movs	r2, #3
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4013      	ands	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 0203 	and.w	r2, r3, #3
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4313      	orrs	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 80b4 	beq.w	80036d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	4b60      	ldr	r3, [pc, #384]	; (80036f4 <HAL_GPIO_Init+0x30c>)
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	4a5f      	ldr	r2, [pc, #380]	; (80036f4 <HAL_GPIO_Init+0x30c>)
 8003578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800357c:	6453      	str	r3, [r2, #68]	; 0x44
 800357e:	4b5d      	ldr	r3, [pc, #372]	; (80036f4 <HAL_GPIO_Init+0x30c>)
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800358a:	4a5b      	ldr	r2, [pc, #364]	; (80036f8 <HAL_GPIO_Init+0x310>)
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	089b      	lsrs	r3, r3, #2
 8003590:	3302      	adds	r3, #2
 8003592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	220f      	movs	r2, #15
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43db      	mvns	r3, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4013      	ands	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a52      	ldr	r2, [pc, #328]	; (80036fc <HAL_GPIO_Init+0x314>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d02b      	beq.n	800360e <HAL_GPIO_Init+0x226>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a51      	ldr	r2, [pc, #324]	; (8003700 <HAL_GPIO_Init+0x318>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d025      	beq.n	800360a <HAL_GPIO_Init+0x222>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a50      	ldr	r2, [pc, #320]	; (8003704 <HAL_GPIO_Init+0x31c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d01f      	beq.n	8003606 <HAL_GPIO_Init+0x21e>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a4f      	ldr	r2, [pc, #316]	; (8003708 <HAL_GPIO_Init+0x320>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d019      	beq.n	8003602 <HAL_GPIO_Init+0x21a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a4e      	ldr	r2, [pc, #312]	; (800370c <HAL_GPIO_Init+0x324>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d013      	beq.n	80035fe <HAL_GPIO_Init+0x216>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a4d      	ldr	r2, [pc, #308]	; (8003710 <HAL_GPIO_Init+0x328>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00d      	beq.n	80035fa <HAL_GPIO_Init+0x212>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a4c      	ldr	r2, [pc, #304]	; (8003714 <HAL_GPIO_Init+0x32c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d007      	beq.n	80035f6 <HAL_GPIO_Init+0x20e>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a4b      	ldr	r2, [pc, #300]	; (8003718 <HAL_GPIO_Init+0x330>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d101      	bne.n	80035f2 <HAL_GPIO_Init+0x20a>
 80035ee:	2307      	movs	r3, #7
 80035f0:	e00e      	b.n	8003610 <HAL_GPIO_Init+0x228>
 80035f2:	2308      	movs	r3, #8
 80035f4:	e00c      	b.n	8003610 <HAL_GPIO_Init+0x228>
 80035f6:	2306      	movs	r3, #6
 80035f8:	e00a      	b.n	8003610 <HAL_GPIO_Init+0x228>
 80035fa:	2305      	movs	r3, #5
 80035fc:	e008      	b.n	8003610 <HAL_GPIO_Init+0x228>
 80035fe:	2304      	movs	r3, #4
 8003600:	e006      	b.n	8003610 <HAL_GPIO_Init+0x228>
 8003602:	2303      	movs	r3, #3
 8003604:	e004      	b.n	8003610 <HAL_GPIO_Init+0x228>
 8003606:	2302      	movs	r3, #2
 8003608:	e002      	b.n	8003610 <HAL_GPIO_Init+0x228>
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <HAL_GPIO_Init+0x228>
 800360e:	2300      	movs	r3, #0
 8003610:	69fa      	ldr	r2, [r7, #28]
 8003612:	f002 0203 	and.w	r2, r2, #3
 8003616:	0092      	lsls	r2, r2, #2
 8003618:	4093      	lsls	r3, r2
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4313      	orrs	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003620:	4935      	ldr	r1, [pc, #212]	; (80036f8 <HAL_GPIO_Init+0x310>)
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	089b      	lsrs	r3, r3, #2
 8003626:	3302      	adds	r3, #2
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800362e:	4b3b      	ldr	r3, [pc, #236]	; (800371c <HAL_GPIO_Init+0x334>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	43db      	mvns	r3, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4013      	ands	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003652:	4a32      	ldr	r2, [pc, #200]	; (800371c <HAL_GPIO_Init+0x334>)
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003658:	4b30      	ldr	r3, [pc, #192]	; (800371c <HAL_GPIO_Init+0x334>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	43db      	mvns	r3, r3
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4013      	ands	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800367c:	4a27      	ldr	r2, [pc, #156]	; (800371c <HAL_GPIO_Init+0x334>)
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003682:	4b26      	ldr	r3, [pc, #152]	; (800371c <HAL_GPIO_Init+0x334>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	43db      	mvns	r3, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4013      	ands	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036a6:	4a1d      	ldr	r2, [pc, #116]	; (800371c <HAL_GPIO_Init+0x334>)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036ac:	4b1b      	ldr	r3, [pc, #108]	; (800371c <HAL_GPIO_Init+0x334>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036d0:	4a12      	ldr	r2, [pc, #72]	; (800371c <HAL_GPIO_Init+0x334>)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	3301      	adds	r3, #1
 80036da:	61fb      	str	r3, [r7, #28]
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	2b0f      	cmp	r3, #15
 80036e0:	f67f ae90 	bls.w	8003404 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036e4:	bf00      	nop
 80036e6:	bf00      	nop
 80036e8:	3724      	adds	r7, #36	; 0x24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40023800 	.word	0x40023800
 80036f8:	40013800 	.word	0x40013800
 80036fc:	40020000 	.word	0x40020000
 8003700:	40020400 	.word	0x40020400
 8003704:	40020800 	.word	0x40020800
 8003708:	40020c00 	.word	0x40020c00
 800370c:	40021000 	.word	0x40021000
 8003710:	40021400 	.word	0x40021400
 8003714:	40021800 	.word	0x40021800
 8003718:	40021c00 	.word	0x40021c00
 800371c:	40013c00 	.word	0x40013c00

08003720 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	887b      	ldrh	r3, [r7, #2]
 8003732:	4013      	ands	r3, r2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003738:	2301      	movs	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
 800373c:	e001      	b.n	8003742 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800373e:	2300      	movs	r3, #0
 8003740:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003742:	7bfb      	ldrb	r3, [r7, #15]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	807b      	strh	r3, [r7, #2]
 800375c:	4613      	mov	r3, r2
 800375e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003760:	787b      	ldrb	r3, [r7, #1]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003766:	887a      	ldrh	r2, [r7, #2]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800376c:	e003      	b.n	8003776 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800376e:	887b      	ldrh	r3, [r7, #2]
 8003770:	041a      	lsls	r2, r3, #16
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	619a      	str	r2, [r3, #24]
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
	...

08003784 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e12b      	b.n	80039ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7ff f8a0 	bl	80028f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2224      	movs	r2, #36	; 0x24
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0201 	bic.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037e8:	f001 fbe4 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 80037ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	4a81      	ldr	r2, [pc, #516]	; (80039f8 <HAL_I2C_Init+0x274>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d807      	bhi.n	8003808 <HAL_I2C_Init+0x84>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4a80      	ldr	r2, [pc, #512]	; (80039fc <HAL_I2C_Init+0x278>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	bf94      	ite	ls
 8003800:	2301      	movls	r3, #1
 8003802:	2300      	movhi	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	e006      	b.n	8003816 <HAL_I2C_Init+0x92>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4a7d      	ldr	r2, [pc, #500]	; (8003a00 <HAL_I2C_Init+0x27c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	bf94      	ite	ls
 8003810:	2301      	movls	r3, #1
 8003812:	2300      	movhi	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e0e7      	b.n	80039ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4a78      	ldr	r2, [pc, #480]	; (8003a04 <HAL_I2C_Init+0x280>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	0c9b      	lsrs	r3, r3, #18
 8003828:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	430a      	orrs	r2, r1
 800383c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	4a6a      	ldr	r2, [pc, #424]	; (80039f8 <HAL_I2C_Init+0x274>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d802      	bhi.n	8003858 <HAL_I2C_Init+0xd4>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	3301      	adds	r3, #1
 8003856:	e009      	b.n	800386c <HAL_I2C_Init+0xe8>
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800385e:	fb02 f303 	mul.w	r3, r2, r3
 8003862:	4a69      	ldr	r2, [pc, #420]	; (8003a08 <HAL_I2C_Init+0x284>)
 8003864:	fba2 2303 	umull	r2, r3, r2, r3
 8003868:	099b      	lsrs	r3, r3, #6
 800386a:	3301      	adds	r3, #1
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6812      	ldr	r2, [r2, #0]
 8003870:	430b      	orrs	r3, r1
 8003872:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800387e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	495c      	ldr	r1, [pc, #368]	; (80039f8 <HAL_I2C_Init+0x274>)
 8003888:	428b      	cmp	r3, r1
 800388a:	d819      	bhi.n	80038c0 <HAL_I2C_Init+0x13c>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	1e59      	subs	r1, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	fbb1 f3f3 	udiv	r3, r1, r3
 800389a:	1c59      	adds	r1, r3, #1
 800389c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038a0:	400b      	ands	r3, r1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <HAL_I2C_Init+0x138>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1e59      	subs	r1, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80038b4:	3301      	adds	r3, #1
 80038b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ba:	e051      	b.n	8003960 <HAL_I2C_Init+0x1dc>
 80038bc:	2304      	movs	r3, #4
 80038be:	e04f      	b.n	8003960 <HAL_I2C_Init+0x1dc>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d111      	bne.n	80038ec <HAL_I2C_Init+0x168>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	1e58      	subs	r0, r3, #1
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6859      	ldr	r1, [r3, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	440b      	add	r3, r1
 80038d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038da:	3301      	adds	r3, #1
 80038dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	bf0c      	ite	eq
 80038e4:	2301      	moveq	r3, #1
 80038e6:	2300      	movne	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	e012      	b.n	8003912 <HAL_I2C_Init+0x18e>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	1e58      	subs	r0, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6859      	ldr	r1, [r3, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	0099      	lsls	r1, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003902:	3301      	adds	r3, #1
 8003904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003908:	2b00      	cmp	r3, #0
 800390a:	bf0c      	ite	eq
 800390c:	2301      	moveq	r3, #1
 800390e:	2300      	movne	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_I2C_Init+0x196>
 8003916:	2301      	movs	r3, #1
 8003918:	e022      	b.n	8003960 <HAL_I2C_Init+0x1dc>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10e      	bne.n	8003940 <HAL_I2C_Init+0x1bc>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1e58      	subs	r0, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6859      	ldr	r1, [r3, #4]
 800392a:	460b      	mov	r3, r1
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	440b      	add	r3, r1
 8003930:	fbb0 f3f3 	udiv	r3, r0, r3
 8003934:	3301      	adds	r3, #1
 8003936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800393a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800393e:	e00f      	b.n	8003960 <HAL_I2C_Init+0x1dc>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	1e58      	subs	r0, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6859      	ldr	r1, [r3, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	0099      	lsls	r1, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	fbb0 f3f3 	udiv	r3, r0, r3
 8003956:	3301      	adds	r3, #1
 8003958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800395c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	6809      	ldr	r1, [r1, #0]
 8003964:	4313      	orrs	r3, r2
 8003966:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69da      	ldr	r2, [r3, #28]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800398e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6911      	ldr	r1, [r2, #16]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	68d2      	ldr	r2, [r2, #12]
 800399a:	4311      	orrs	r1, r2
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695a      	ldr	r2, [r3, #20]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	000186a0 	.word	0x000186a0
 80039fc:	001e847f 	.word	0x001e847f
 8003a00:	003d08ff 	.word	0x003d08ff
 8003a04:	431bde83 	.word	0x431bde83
 8003a08:	10624dd3 	.word	0x10624dd3

08003a0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	4608      	mov	r0, r1
 8003a16:	4611      	mov	r1, r2
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	817b      	strh	r3, [r7, #10]
 8003a1e:	460b      	mov	r3, r1
 8003a20:	813b      	strh	r3, [r7, #8]
 8003a22:	4613      	mov	r3, r2
 8003a24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a26:	f7ff fb0b 	bl	8003040 <HAL_GetTick>
 8003a2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	f040 80d9 	bne.w	8003bec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	2319      	movs	r3, #25
 8003a40:	2201      	movs	r2, #1
 8003a42:	496d      	ldr	r1, [pc, #436]	; (8003bf8 <HAL_I2C_Mem_Write+0x1ec>)
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 fc7f 	bl	8004348 <I2C_WaitOnFlagUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a50:	2302      	movs	r3, #2
 8003a52:	e0cc      	b.n	8003bee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_I2C_Mem_Write+0x56>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e0c5      	b.n	8003bee <HAL_I2C_Mem_Write+0x1e2>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d007      	beq.n	8003a88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2221      	movs	r2, #33	; 0x21
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2240      	movs	r2, #64	; 0x40
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a3a      	ldr	r2, [r7, #32]
 8003ab2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4a4d      	ldr	r2, [pc, #308]	; (8003bfc <HAL_I2C_Mem_Write+0x1f0>)
 8003ac8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003aca:	88f8      	ldrh	r0, [r7, #6]
 8003acc:	893a      	ldrh	r2, [r7, #8]
 8003ace:	8979      	ldrh	r1, [r7, #10]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	9301      	str	r3, [sp, #4]
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	4603      	mov	r3, r0
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 fab6 	bl	800404c <I2C_RequestMemoryWrite>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d052      	beq.n	8003b8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e081      	b.n	8003bee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 fd00 	bl	80044f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00d      	beq.n	8003b16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d107      	bne.n	8003b12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e06b      	b.n	8003bee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	781a      	ldrb	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d11b      	bne.n	8003b8c <HAL_I2C_Mem_Write+0x180>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d017      	beq.n	8003b8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	781a      	ldrb	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1aa      	bne.n	8003aea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 fcec 	bl	8004576 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00d      	beq.n	8003bc0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d107      	bne.n	8003bbc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e016      	b.n	8003bee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	e000      	b.n	8003bee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bec:	2302      	movs	r3, #2
  }
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	00100002 	.word	0x00100002
 8003bfc:	ffff0000 	.word	0xffff0000

08003c00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08c      	sub	sp, #48	; 0x30
 8003c04:	af02      	add	r7, sp, #8
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	4608      	mov	r0, r1
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4603      	mov	r3, r0
 8003c10:	817b      	strh	r3, [r7, #10]
 8003c12:	460b      	mov	r3, r1
 8003c14:	813b      	strh	r3, [r7, #8]
 8003c16:	4613      	mov	r3, r2
 8003c18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c1a:	f7ff fa11 	bl	8003040 <HAL_GetTick>
 8003c1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	f040 8208 	bne.w	800403e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	2319      	movs	r3, #25
 8003c34:	2201      	movs	r2, #1
 8003c36:	497b      	ldr	r1, [pc, #492]	; (8003e24 <HAL_I2C_Mem_Read+0x224>)
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 fb85 	bl	8004348 <I2C_WaitOnFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c44:	2302      	movs	r3, #2
 8003c46:	e1fb      	b.n	8004040 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_I2C_Mem_Read+0x56>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e1f4      	b.n	8004040 <HAL_I2C_Mem_Read+0x440>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d007      	beq.n	8003c7c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2222      	movs	r2, #34	; 0x22
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2240      	movs	r2, #64	; 0x40
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003cac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4a5b      	ldr	r2, [pc, #364]	; (8003e28 <HAL_I2C_Mem_Read+0x228>)
 8003cbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cbe:	88f8      	ldrh	r0, [r7, #6]
 8003cc0:	893a      	ldrh	r2, [r7, #8]
 8003cc2:	8979      	ldrh	r1, [r7, #10]
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	4603      	mov	r3, r0
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 fa52 	bl	8004178 <I2C_RequestMemoryRead>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e1b0      	b.n	8004040 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d113      	bne.n	8003d0e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	623b      	str	r3, [r7, #32]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	623b      	str	r3, [r7, #32]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	623b      	str	r3, [r7, #32]
 8003cfa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	e184      	b.n	8004018 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d11b      	bne.n	8003d4e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	61fb      	str	r3, [r7, #28]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	61fb      	str	r3, [r7, #28]
 8003d3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	e164      	b.n	8004018 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d11b      	bne.n	8003d8e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	61bb      	str	r3, [r7, #24]
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	e144      	b.n	8004018 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003da4:	e138      	b.n	8004018 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	f200 80f1 	bhi.w	8003f92 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d123      	bne.n	8003e00 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 fc1b 	bl	80045f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e139      	b.n	8004040 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dfe:	e10b      	b.n	8004018 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d14e      	bne.n	8003ea6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0e:	2200      	movs	r2, #0
 8003e10:	4906      	ldr	r1, [pc, #24]	; (8003e2c <HAL_I2C_Mem_Read+0x22c>)
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fa98 	bl	8004348 <I2C_WaitOnFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d008      	beq.n	8003e30 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e10e      	b.n	8004040 <HAL_I2C_Mem_Read+0x440>
 8003e22:	bf00      	nop
 8003e24:	00100002 	.word	0x00100002
 8003e28:	ffff0000 	.word	0xffff0000
 8003e2c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691a      	ldr	r2, [r3, #16]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	b2d2      	uxtb	r2, r2
 8003e7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ea4:	e0b8      	b.n	8004018 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	2200      	movs	r2, #0
 8003eae:	4966      	ldr	r1, [pc, #408]	; (8004048 <HAL_I2C_Mem_Read+0x448>)
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 fa49 	bl	8004348 <I2C_WaitOnFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e0bf      	b.n	8004040 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ece:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691a      	ldr	r2, [r3, #16]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f08:	2200      	movs	r2, #0
 8003f0a:	494f      	ldr	r1, [pc, #316]	; (8004048 <HAL_I2C_Mem_Read+0x448>)
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 fa1b 	bl	8004348 <I2C_WaitOnFlagUntilTimeout>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e091      	b.n	8004040 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691a      	ldr	r2, [r3, #16]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f90:	e042      	b.n	8004018 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 fb2e 	bl	80045f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e04c      	b.n	8004040 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d118      	bne.n	8004018 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401c:	2b00      	cmp	r3, #0
 800401e:	f47f aec2 	bne.w	8003da6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	e000      	b.n	8004040 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800403e:	2302      	movs	r3, #2
  }
}
 8004040:	4618      	mov	r0, r3
 8004042:	3728      	adds	r7, #40	; 0x28
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	00010004 	.word	0x00010004

0800404c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af02      	add	r7, sp, #8
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	4608      	mov	r0, r1
 8004056:	4611      	mov	r1, r2
 8004058:	461a      	mov	r2, r3
 800405a:	4603      	mov	r3, r0
 800405c:	817b      	strh	r3, [r7, #10]
 800405e:	460b      	mov	r3, r1
 8004060:	813b      	strh	r3, [r7, #8]
 8004062:	4613      	mov	r3, r2
 8004064:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004074:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	2200      	movs	r2, #0
 800407e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 f960 	bl	8004348 <I2C_WaitOnFlagUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00d      	beq.n	80040aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800409c:	d103      	bne.n	80040a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e05f      	b.n	800416a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040aa:	897b      	ldrh	r3, [r7, #10]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	461a      	mov	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	6a3a      	ldr	r2, [r7, #32]
 80040be:	492d      	ldr	r1, [pc, #180]	; (8004174 <I2C_RequestMemoryWrite+0x128>)
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f998 	bl	80043f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e04c      	b.n	800416a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e8:	6a39      	ldr	r1, [r7, #32]
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 fa02 	bl	80044f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00d      	beq.n	8004112 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d107      	bne.n	800410e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800410c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e02b      	b.n	800416a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004112:	88fb      	ldrh	r3, [r7, #6]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d105      	bne.n	8004124 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004118:	893b      	ldrh	r3, [r7, #8]
 800411a:	b2da      	uxtb	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	611a      	str	r2, [r3, #16]
 8004122:	e021      	b.n	8004168 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004124:	893b      	ldrh	r3, [r7, #8]
 8004126:	0a1b      	lsrs	r3, r3, #8
 8004128:	b29b      	uxth	r3, r3
 800412a:	b2da      	uxtb	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004134:	6a39      	ldr	r1, [r7, #32]
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 f9dc 	bl	80044f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00d      	beq.n	800415e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	2b04      	cmp	r3, #4
 8004148:	d107      	bne.n	800415a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004158:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e005      	b.n	800416a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800415e:	893b      	ldrh	r3, [r7, #8]
 8004160:	b2da      	uxtb	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	00010002 	.word	0x00010002

08004178 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af02      	add	r7, sp, #8
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	4608      	mov	r0, r1
 8004182:	4611      	mov	r1, r2
 8004184:	461a      	mov	r2, r3
 8004186:	4603      	mov	r3, r0
 8004188:	817b      	strh	r3, [r7, #10]
 800418a:	460b      	mov	r3, r1
 800418c:	813b      	strh	r3, [r7, #8]
 800418e:	4613      	mov	r3, r2
 8004190:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 f8c2 	bl	8004348 <I2C_WaitOnFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00d      	beq.n	80041e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d8:	d103      	bne.n	80041e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e0aa      	b.n	800433c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041e6:	897b      	ldrh	r3, [r7, #10]
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	461a      	mov	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	6a3a      	ldr	r2, [r7, #32]
 80041fa:	4952      	ldr	r1, [pc, #328]	; (8004344 <I2C_RequestMemoryRead+0x1cc>)
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f8fa 	bl	80043f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e097      	b.n	800433c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004224:	6a39      	ldr	r1, [r7, #32]
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 f964 	bl	80044f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00d      	beq.n	800424e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	2b04      	cmp	r3, #4
 8004238:	d107      	bne.n	800424a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004248:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e076      	b.n	800433c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800424e:	88fb      	ldrh	r3, [r7, #6]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d105      	bne.n	8004260 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004254:	893b      	ldrh	r3, [r7, #8]
 8004256:	b2da      	uxtb	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	611a      	str	r2, [r3, #16]
 800425e:	e021      	b.n	80042a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004260:	893b      	ldrh	r3, [r7, #8]
 8004262:	0a1b      	lsrs	r3, r3, #8
 8004264:	b29b      	uxth	r3, r3
 8004266:	b2da      	uxtb	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800426e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004270:	6a39      	ldr	r1, [r7, #32]
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 f93e 	bl	80044f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00d      	beq.n	800429a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	2b04      	cmp	r3, #4
 8004284:	d107      	bne.n	8004296 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004294:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e050      	b.n	800433c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800429a:	893b      	ldrh	r3, [r7, #8]
 800429c:	b2da      	uxtb	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a6:	6a39      	ldr	r1, [r7, #32]
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 f923 	bl	80044f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00d      	beq.n	80042d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d107      	bne.n	80042cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e035      	b.n	800433c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f82b 	bl	8004348 <I2C_WaitOnFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00d      	beq.n	8004314 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004306:	d103      	bne.n	8004310 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800430e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e013      	b.n	800433c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004314:	897b      	ldrh	r3, [r7, #10]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	b2da      	uxtb	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	6a3a      	ldr	r2, [r7, #32]
 8004328:	4906      	ldr	r1, [pc, #24]	; (8004344 <I2C_RequestMemoryRead+0x1cc>)
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f863 	bl	80043f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3718      	adds	r7, #24
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	00010002 	.word	0x00010002

08004348 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	603b      	str	r3, [r7, #0]
 8004354:	4613      	mov	r3, r2
 8004356:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004358:	e025      	b.n	80043a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004360:	d021      	beq.n	80043a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004362:	f7fe fe6d 	bl	8003040 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d302      	bcc.n	8004378 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d116      	bne.n	80043a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f043 0220 	orr.w	r2, r3, #32
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e023      	b.n	80043ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	0c1b      	lsrs	r3, r3, #16
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d10d      	bne.n	80043cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	43da      	mvns	r2, r3
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	4013      	ands	r3, r2
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	bf0c      	ite	eq
 80043c2:	2301      	moveq	r3, #1
 80043c4:	2300      	movne	r3, #0
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	461a      	mov	r2, r3
 80043ca:	e00c      	b.n	80043e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	43da      	mvns	r2, r3
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	4013      	ands	r3, r2
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	bf0c      	ite	eq
 80043de:	2301      	moveq	r3, #1
 80043e0:	2300      	movne	r3, #0
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	461a      	mov	r2, r3
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d0b6      	beq.n	800435a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	607a      	str	r2, [r7, #4]
 8004402:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004404:	e051      	b.n	80044aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004414:	d123      	bne.n	800445e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004424:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800442e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	f043 0204 	orr.w	r2, r3, #4
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e046      	b.n	80044ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004464:	d021      	beq.n	80044aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004466:	f7fe fdeb 	bl	8003040 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	429a      	cmp	r2, r3
 8004474:	d302      	bcc.n	800447c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d116      	bne.n	80044aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2220      	movs	r2, #32
 8004486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f043 0220 	orr.w	r2, r3, #32
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e020      	b.n	80044ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	0c1b      	lsrs	r3, r3, #16
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d10c      	bne.n	80044ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	43da      	mvns	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4013      	ands	r3, r2
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	bf14      	ite	ne
 80044c6:	2301      	movne	r3, #1
 80044c8:	2300      	moveq	r3, #0
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	e00b      	b.n	80044e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	43da      	mvns	r2, r3
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	4013      	ands	r3, r2
 80044da:	b29b      	uxth	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	bf14      	ite	ne
 80044e0:	2301      	movne	r3, #1
 80044e2:	2300      	moveq	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d18d      	bne.n	8004406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004500:	e02d      	b.n	800455e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f8ce 	bl	80046a4 <I2C_IsAcknowledgeFailed>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e02d      	b.n	800456e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004518:	d021      	beq.n	800455e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800451a:	f7fe fd91 	bl	8003040 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	429a      	cmp	r2, r3
 8004528:	d302      	bcc.n	8004530 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d116      	bne.n	800455e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2220      	movs	r2, #32
 800453a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	f043 0220 	orr.w	r2, r3, #32
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e007      	b.n	800456e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004568:	2b80      	cmp	r3, #128	; 0x80
 800456a:	d1ca      	bne.n	8004502 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b084      	sub	sp, #16
 800457a:	af00      	add	r7, sp, #0
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004582:	e02d      	b.n	80045e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 f88d 	bl	80046a4 <I2C_IsAcknowledgeFailed>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e02d      	b.n	80045f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459a:	d021      	beq.n	80045e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459c:	f7fe fd50 	bl	8003040 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d302      	bcc.n	80045b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d116      	bne.n	80045e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	f043 0220 	orr.w	r2, r3, #32
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e007      	b.n	80045f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f003 0304 	and.w	r3, r3, #4
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d1ca      	bne.n	8004584 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004604:	e042      	b.n	800468c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	f003 0310 	and.w	r3, r3, #16
 8004610:	2b10      	cmp	r3, #16
 8004612:	d119      	bne.n	8004648 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0210 	mvn.w	r2, #16
 800461c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e029      	b.n	800469c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004648:	f7fe fcfa 	bl	8003040 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	429a      	cmp	r2, r3
 8004656:	d302      	bcc.n	800465e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d116      	bne.n	800468c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	f043 0220 	orr.w	r2, r3, #32
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e007      	b.n	800469c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004696:	2b40      	cmp	r3, #64	; 0x40
 8004698:	d1b5      	bne.n	8004606 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ba:	d11b      	bne.n	80046f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	f043 0204 	orr.w	r2, r3, #4
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e000      	b.n	80046f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
	...

08004704 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800470a:	4b06      	ldr	r3, [pc, #24]	; (8004724 <HAL_PWR_EnableBkUpAccess+0x20>)
 800470c:	2201      	movs	r2, #1
 800470e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004710:	4b05      	ldr	r3, [pc, #20]	; (8004728 <HAL_PWR_EnableBkUpAccess+0x24>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004716:	687b      	ldr	r3, [r7, #4]
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	420e0020 	.word	0x420e0020
 8004728:	40007000 	.word	0x40007000

0800472c <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8004732:	4b06      	ldr	r3, [pc, #24]	; (800474c <HAL_PWR_DisableBkUpAccess+0x20>)
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004738:	4b05      	ldr	r3, [pc, #20]	; (8004750 <HAL_PWR_DisableBkUpAccess+0x24>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800473e:	687b      	ldr	r3, [r7, #4]
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	420e0020 	.word	0x420e0020
 8004750:	40007000 	.word	0x40007000

08004754 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e267      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d075      	beq.n	800485e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004772:	4b88      	ldr	r3, [pc, #544]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 030c 	and.w	r3, r3, #12
 800477a:	2b04      	cmp	r3, #4
 800477c:	d00c      	beq.n	8004798 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800477e:	4b85      	ldr	r3, [pc, #532]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004786:	2b08      	cmp	r3, #8
 8004788:	d112      	bne.n	80047b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800478a:	4b82      	ldr	r3, [pc, #520]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004792:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004796:	d10b      	bne.n	80047b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004798:	4b7e      	ldr	r3, [pc, #504]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d05b      	beq.n	800485c <HAL_RCC_OscConfig+0x108>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d157      	bne.n	800485c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e242      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b8:	d106      	bne.n	80047c8 <HAL_RCC_OscConfig+0x74>
 80047ba:	4b76      	ldr	r3, [pc, #472]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a75      	ldr	r2, [pc, #468]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80047c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	e01d      	b.n	8004804 <HAL_RCC_OscConfig+0xb0>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047d0:	d10c      	bne.n	80047ec <HAL_RCC_OscConfig+0x98>
 80047d2:	4b70      	ldr	r3, [pc, #448]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a6f      	ldr	r2, [pc, #444]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80047d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	4b6d      	ldr	r3, [pc, #436]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a6c      	ldr	r2, [pc, #432]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80047e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	e00b      	b.n	8004804 <HAL_RCC_OscConfig+0xb0>
 80047ec:	4b69      	ldr	r3, [pc, #420]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a68      	ldr	r2, [pc, #416]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80047f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	4b66      	ldr	r3, [pc, #408]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a65      	ldr	r2, [pc, #404]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80047fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d013      	beq.n	8004834 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480c:	f7fe fc18 	bl	8003040 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004814:	f7fe fc14 	bl	8003040 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b64      	cmp	r3, #100	; 0x64
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e207      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004826:	4b5b      	ldr	r3, [pc, #364]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0xc0>
 8004832:	e014      	b.n	800485e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004834:	f7fe fc04 	bl	8003040 <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800483c:	f7fe fc00 	bl	8003040 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b64      	cmp	r3, #100	; 0x64
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e1f3      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800484e:	4b51      	ldr	r3, [pc, #324]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1f0      	bne.n	800483c <HAL_RCC_OscConfig+0xe8>
 800485a:	e000      	b.n	800485e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800485c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d063      	beq.n	8004932 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800486a:	4b4a      	ldr	r3, [pc, #296]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 030c 	and.w	r3, r3, #12
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00b      	beq.n	800488e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004876:	4b47      	ldr	r3, [pc, #284]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800487e:	2b08      	cmp	r3, #8
 8004880:	d11c      	bne.n	80048bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004882:	4b44      	ldr	r3, [pc, #272]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d116      	bne.n	80048bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800488e:	4b41      	ldr	r3, [pc, #260]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d005      	beq.n	80048a6 <HAL_RCC_OscConfig+0x152>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d001      	beq.n	80048a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e1c7      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a6:	4b3b      	ldr	r3, [pc, #236]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	4937      	ldr	r1, [pc, #220]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ba:	e03a      	b.n	8004932 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d020      	beq.n	8004906 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048c4:	4b34      	ldr	r3, [pc, #208]	; (8004998 <HAL_RCC_OscConfig+0x244>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ca:	f7fe fbb9 	bl	8003040 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048d2:	f7fe fbb5 	bl	8003040 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e1a8      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e4:	4b2b      	ldr	r3, [pc, #172]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0f0      	beq.n	80048d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f0:	4b28      	ldr	r3, [pc, #160]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	4925      	ldr	r1, [pc, #148]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 8004900:	4313      	orrs	r3, r2
 8004902:	600b      	str	r3, [r1, #0]
 8004904:	e015      	b.n	8004932 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004906:	4b24      	ldr	r3, [pc, #144]	; (8004998 <HAL_RCC_OscConfig+0x244>)
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490c:	f7fe fb98 	bl	8003040 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004914:	f7fe fb94 	bl	8003040 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e187      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004926:	4b1b      	ldr	r3, [pc, #108]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1f0      	bne.n	8004914 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b00      	cmp	r3, #0
 800493c:	d036      	beq.n	80049ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d016      	beq.n	8004974 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004946:	4b15      	ldr	r3, [pc, #84]	; (800499c <HAL_RCC_OscConfig+0x248>)
 8004948:	2201      	movs	r2, #1
 800494a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494c:	f7fe fb78 	bl	8003040 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004954:	f7fe fb74 	bl	8003040 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e167      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004966:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 8004968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0f0      	beq.n	8004954 <HAL_RCC_OscConfig+0x200>
 8004972:	e01b      	b.n	80049ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004974:	4b09      	ldr	r3, [pc, #36]	; (800499c <HAL_RCC_OscConfig+0x248>)
 8004976:	2200      	movs	r2, #0
 8004978:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800497a:	f7fe fb61 	bl	8003040 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004980:	e00e      	b.n	80049a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004982:	f7fe fb5d 	bl	8003040 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d907      	bls.n	80049a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e150      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
 8004994:	40023800 	.word	0x40023800
 8004998:	42470000 	.word	0x42470000
 800499c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a0:	4b88      	ldr	r3, [pc, #544]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 80049a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1ea      	bne.n	8004982 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 8097 	beq.w	8004ae8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ba:	2300      	movs	r3, #0
 80049bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049be:	4b81      	ldr	r3, [pc, #516]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10f      	bne.n	80049ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ca:	2300      	movs	r3, #0
 80049cc:	60bb      	str	r3, [r7, #8]
 80049ce:	4b7d      	ldr	r3, [pc, #500]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	4a7c      	ldr	r2, [pc, #496]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 80049d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d8:	6413      	str	r3, [r2, #64]	; 0x40
 80049da:	4b7a      	ldr	r3, [pc, #488]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e2:	60bb      	str	r3, [r7, #8]
 80049e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049e6:	2301      	movs	r3, #1
 80049e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ea:	4b77      	ldr	r3, [pc, #476]	; (8004bc8 <HAL_RCC_OscConfig+0x474>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d118      	bne.n	8004a28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049f6:	4b74      	ldr	r3, [pc, #464]	; (8004bc8 <HAL_RCC_OscConfig+0x474>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a73      	ldr	r2, [pc, #460]	; (8004bc8 <HAL_RCC_OscConfig+0x474>)
 80049fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a02:	f7fe fb1d 	bl	8003040 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a0a:	f7fe fb19 	bl	8003040 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e10c      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a1c:	4b6a      	ldr	r3, [pc, #424]	; (8004bc8 <HAL_RCC_OscConfig+0x474>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f0      	beq.n	8004a0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d106      	bne.n	8004a3e <HAL_RCC_OscConfig+0x2ea>
 8004a30:	4b64      	ldr	r3, [pc, #400]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a34:	4a63      	ldr	r2, [pc, #396]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a3c:	e01c      	b.n	8004a78 <HAL_RCC_OscConfig+0x324>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	2b05      	cmp	r3, #5
 8004a44:	d10c      	bne.n	8004a60 <HAL_RCC_OscConfig+0x30c>
 8004a46:	4b5f      	ldr	r3, [pc, #380]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4a:	4a5e      	ldr	r2, [pc, #376]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004a4c:	f043 0304 	orr.w	r3, r3, #4
 8004a50:	6713      	str	r3, [r2, #112]	; 0x70
 8004a52:	4b5c      	ldr	r3, [pc, #368]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a56:	4a5b      	ldr	r2, [pc, #364]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004a58:	f043 0301 	orr.w	r3, r3, #1
 8004a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a5e:	e00b      	b.n	8004a78 <HAL_RCC_OscConfig+0x324>
 8004a60:	4b58      	ldr	r3, [pc, #352]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a64:	4a57      	ldr	r2, [pc, #348]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004a66:	f023 0301 	bic.w	r3, r3, #1
 8004a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a6c:	4b55      	ldr	r3, [pc, #340]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	4a54      	ldr	r2, [pc, #336]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004a72:	f023 0304 	bic.w	r3, r3, #4
 8004a76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d015      	beq.n	8004aac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a80:	f7fe fade 	bl	8003040 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a86:	e00a      	b.n	8004a9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a88:	f7fe fada 	bl	8003040 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e0cb      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a9e:	4b49      	ldr	r3, [pc, #292]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0ee      	beq.n	8004a88 <HAL_RCC_OscConfig+0x334>
 8004aaa:	e014      	b.n	8004ad6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aac:	f7fe fac8 	bl	8003040 <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ab2:	e00a      	b.n	8004aca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab4:	f7fe fac4 	bl	8003040 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e0b5      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aca:	4b3e      	ldr	r3, [pc, #248]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1ee      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ad6:	7dfb      	ldrb	r3, [r7, #23]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d105      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004adc:	4b39      	ldr	r3, [pc, #228]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	4a38      	ldr	r2, [pc, #224]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004ae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ae6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 80a1 	beq.w	8004c34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004af2:	4b34      	ldr	r3, [pc, #208]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 030c 	and.w	r3, r3, #12
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d05c      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d141      	bne.n	8004b8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b06:	4b31      	ldr	r3, [pc, #196]	; (8004bcc <HAL_RCC_OscConfig+0x478>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b0c:	f7fe fa98 	bl	8003040 <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b12:	e008      	b.n	8004b26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b14:	f7fe fa94 	bl	8003040 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e087      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b26:	4b27      	ldr	r3, [pc, #156]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1f0      	bne.n	8004b14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69da      	ldr	r2, [r3, #28]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	019b      	lsls	r3, r3, #6
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b48:	085b      	lsrs	r3, r3, #1
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	041b      	lsls	r3, r3, #16
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	061b      	lsls	r3, r3, #24
 8004b56:	491b      	ldr	r1, [pc, #108]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b5c:	4b1b      	ldr	r3, [pc, #108]	; (8004bcc <HAL_RCC_OscConfig+0x478>)
 8004b5e:	2201      	movs	r2, #1
 8004b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b62:	f7fe fa6d 	bl	8003040 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b6a:	f7fe fa69 	bl	8003040 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e05c      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b7c:	4b11      	ldr	r3, [pc, #68]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f0      	beq.n	8004b6a <HAL_RCC_OscConfig+0x416>
 8004b88:	e054      	b.n	8004c34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b8a:	4b10      	ldr	r3, [pc, #64]	; (8004bcc <HAL_RCC_OscConfig+0x478>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b90:	f7fe fa56 	bl	8003040 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b98:	f7fe fa52 	bl	8003040 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e045      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004baa:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1f0      	bne.n	8004b98 <HAL_RCC_OscConfig+0x444>
 8004bb6:	e03d      	b.n	8004c34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d107      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e038      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	40007000 	.word	0x40007000
 8004bcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bd0:	4b1b      	ldr	r3, [pc, #108]	; (8004c40 <HAL_RCC_OscConfig+0x4ec>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d028      	beq.n	8004c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d121      	bne.n	8004c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d11a      	bne.n	8004c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c00:	4013      	ands	r3, r2
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d111      	bne.n	8004c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c16:	085b      	lsrs	r3, r3, #1
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d107      	bne.n	8004c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d001      	beq.n	8004c34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e000      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	40023800 	.word	0x40023800

08004c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e0cc      	b.n	8004df2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c58:	4b68      	ldr	r3, [pc, #416]	; (8004dfc <HAL_RCC_ClockConfig+0x1b8>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d90c      	bls.n	8004c80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c66:	4b65      	ldr	r3, [pc, #404]	; (8004dfc <HAL_RCC_ClockConfig+0x1b8>)
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6e:	4b63      	ldr	r3, [pc, #396]	; (8004dfc <HAL_RCC_ClockConfig+0x1b8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d001      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e0b8      	b.n	8004df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d020      	beq.n	8004cce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c98:	4b59      	ldr	r3, [pc, #356]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	4a58      	ldr	r2, [pc, #352]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ca2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cb0:	4b53      	ldr	r3, [pc, #332]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	4a52      	ldr	r2, [pc, #328]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cbc:	4b50      	ldr	r3, [pc, #320]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	494d      	ldr	r1, [pc, #308]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d044      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d107      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce2:	4b47      	ldr	r3, [pc, #284]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d119      	bne.n	8004d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e07f      	b.n	8004df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d003      	beq.n	8004d02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d107      	bne.n	8004d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d02:	4b3f      	ldr	r3, [pc, #252]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d109      	bne.n	8004d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e06f      	b.n	8004df2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d12:	4b3b      	ldr	r3, [pc, #236]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e067      	b.n	8004df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d22:	4b37      	ldr	r3, [pc, #220]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f023 0203 	bic.w	r2, r3, #3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	4934      	ldr	r1, [pc, #208]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d34:	f7fe f984 	bl	8003040 <HAL_GetTick>
 8004d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3a:	e00a      	b.n	8004d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d3c:	f7fe f980 	bl	8003040 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e04f      	b.n	8004df2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d52:	4b2b      	ldr	r3, [pc, #172]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 020c 	and.w	r2, r3, #12
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d1eb      	bne.n	8004d3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d64:	4b25      	ldr	r3, [pc, #148]	; (8004dfc <HAL_RCC_ClockConfig+0x1b8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d20c      	bcs.n	8004d8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d72:	4b22      	ldr	r3, [pc, #136]	; (8004dfc <HAL_RCC_ClockConfig+0x1b8>)
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d7a:	4b20      	ldr	r3, [pc, #128]	; (8004dfc <HAL_RCC_ClockConfig+0x1b8>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d001      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e032      	b.n	8004df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d008      	beq.n	8004daa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d98:	4b19      	ldr	r3, [pc, #100]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	4916      	ldr	r1, [pc, #88]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0308 	and.w	r3, r3, #8
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d009      	beq.n	8004dca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004db6:	4b12      	ldr	r3, [pc, #72]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	490e      	ldr	r1, [pc, #56]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dca:	f000 f821 	bl	8004e10 <HAL_RCC_GetSysClockFreq>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	091b      	lsrs	r3, r3, #4
 8004dd6:	f003 030f 	and.w	r3, r3, #15
 8004dda:	490a      	ldr	r1, [pc, #40]	; (8004e04 <HAL_RCC_ClockConfig+0x1c0>)
 8004ddc:	5ccb      	ldrb	r3, [r1, r3]
 8004dde:	fa22 f303 	lsr.w	r3, r2, r3
 8004de2:	4a09      	ldr	r2, [pc, #36]	; (8004e08 <HAL_RCC_ClockConfig+0x1c4>)
 8004de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004de6:	4b09      	ldr	r3, [pc, #36]	; (8004e0c <HAL_RCC_ClockConfig+0x1c8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fe f8e4 	bl	8002fb8 <HAL_InitTick>

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	40023c00 	.word	0x40023c00
 8004e00:	40023800 	.word	0x40023800
 8004e04:	0800c294 	.word	0x0800c294
 8004e08:	20000024 	.word	0x20000024
 8004e0c:	20000028 	.word	0x20000028

08004e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e14:	b090      	sub	sp, #64	; 0x40
 8004e16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e20:	2300      	movs	r3, #0
 8004e22:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e28:	4b59      	ldr	r3, [pc, #356]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f003 030c 	and.w	r3, r3, #12
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d00d      	beq.n	8004e50 <HAL_RCC_GetSysClockFreq+0x40>
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	f200 80a1 	bhi.w	8004f7c <HAL_RCC_GetSysClockFreq+0x16c>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <HAL_RCC_GetSysClockFreq+0x34>
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d003      	beq.n	8004e4a <HAL_RCC_GetSysClockFreq+0x3a>
 8004e42:	e09b      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e44:	4b53      	ldr	r3, [pc, #332]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e46:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004e48:	e09b      	b.n	8004f82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e4a:	4b53      	ldr	r3, [pc, #332]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e4e:	e098      	b.n	8004f82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e50:	4b4f      	ldr	r3, [pc, #316]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e58:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e5a:	4b4d      	ldr	r3, [pc, #308]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d028      	beq.n	8004eb8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e66:	4b4a      	ldr	r3, [pc, #296]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	099b      	lsrs	r3, r3, #6
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	623b      	str	r3, [r7, #32]
 8004e70:	627a      	str	r2, [r7, #36]	; 0x24
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004e78:	2100      	movs	r1, #0
 8004e7a:	4b47      	ldr	r3, [pc, #284]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e7c:	fb03 f201 	mul.w	r2, r3, r1
 8004e80:	2300      	movs	r3, #0
 8004e82:	fb00 f303 	mul.w	r3, r0, r3
 8004e86:	4413      	add	r3, r2
 8004e88:	4a43      	ldr	r2, [pc, #268]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e8a:	fba0 1202 	umull	r1, r2, r0, r2
 8004e8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e90:	460a      	mov	r2, r1
 8004e92:	62ba      	str	r2, [r7, #40]	; 0x28
 8004e94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e96:	4413      	add	r3, r2
 8004e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	61bb      	str	r3, [r7, #24]
 8004ea0:	61fa      	str	r2, [r7, #28]
 8004ea2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ea6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004eaa:	f7fb fe67 	bl	8000b7c <__aeabi_uldivmod>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eb6:	e053      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eb8:	4b35      	ldr	r3, [pc, #212]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	099b      	lsrs	r3, r3, #6
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	613b      	str	r3, [r7, #16]
 8004ec2:	617a      	str	r2, [r7, #20]
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004eca:	f04f 0b00 	mov.w	fp, #0
 8004ece:	4652      	mov	r2, sl
 8004ed0:	465b      	mov	r3, fp
 8004ed2:	f04f 0000 	mov.w	r0, #0
 8004ed6:	f04f 0100 	mov.w	r1, #0
 8004eda:	0159      	lsls	r1, r3, #5
 8004edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ee0:	0150      	lsls	r0, r2, #5
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	ebb2 080a 	subs.w	r8, r2, sl
 8004eea:	eb63 090b 	sbc.w	r9, r3, fp
 8004eee:	f04f 0200 	mov.w	r2, #0
 8004ef2:	f04f 0300 	mov.w	r3, #0
 8004ef6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004efa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004efe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004f02:	ebb2 0408 	subs.w	r4, r2, r8
 8004f06:	eb63 0509 	sbc.w	r5, r3, r9
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	00eb      	lsls	r3, r5, #3
 8004f14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f18:	00e2      	lsls	r2, r4, #3
 8004f1a:	4614      	mov	r4, r2
 8004f1c:	461d      	mov	r5, r3
 8004f1e:	eb14 030a 	adds.w	r3, r4, sl
 8004f22:	603b      	str	r3, [r7, #0]
 8004f24:	eb45 030b 	adc.w	r3, r5, fp
 8004f28:	607b      	str	r3, [r7, #4]
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f36:	4629      	mov	r1, r5
 8004f38:	028b      	lsls	r3, r1, #10
 8004f3a:	4621      	mov	r1, r4
 8004f3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f40:	4621      	mov	r1, r4
 8004f42:	028a      	lsls	r2, r1, #10
 8004f44:	4610      	mov	r0, r2
 8004f46:	4619      	mov	r1, r3
 8004f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	60fa      	str	r2, [r7, #12]
 8004f50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f54:	f7fb fe12 	bl	8000b7c <__aeabi_uldivmod>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f60:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	0c1b      	lsrs	r3, r3, #16
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004f70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f7a:	e002      	b.n	8004f82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f7c:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f7e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3740      	adds	r7, #64	; 0x40
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f8e:	bf00      	nop
 8004f90:	40023800 	.word	0x40023800
 8004f94:	00f42400 	.word	0x00f42400
 8004f98:	017d7840 	.word	0x017d7840

08004f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fa0:	4b03      	ldr	r3, [pc, #12]	; (8004fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	20000024 	.word	0x20000024

08004fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fb8:	f7ff fff0 	bl	8004f9c <HAL_RCC_GetHCLKFreq>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	0a9b      	lsrs	r3, r3, #10
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	4903      	ldr	r1, [pc, #12]	; (8004fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fca:	5ccb      	ldrb	r3, [r1, r3]
 8004fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	0800c2a4 	.word	0x0800c2a4

08004fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fe0:	f7ff ffdc 	bl	8004f9c <HAL_RCC_GetHCLKFreq>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	0b5b      	lsrs	r3, r3, #13
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	4903      	ldr	r1, [pc, #12]	; (8005000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ff2:	5ccb      	ldrb	r3, [r1, r3]
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40023800 	.word	0x40023800
 8005000:	0800c2a4 	.word	0x0800c2a4

08005004 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e041      	b.n	800509a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fd fca8 	bl	8002980 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3304      	adds	r3, #4
 8005040:	4619      	mov	r1, r3
 8005042:	4610      	mov	r0, r2
 8005044:	f000 ff9e 	bl	8005f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b082      	sub	sp, #8
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e041      	b.n	8005138 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d106      	bne.n	80050ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f839 	bl	8005140 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2202      	movs	r2, #2
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	3304      	adds	r3, #4
 80050de:	4619      	mov	r1, r3
 80050e0:	4610      	mov	r0, r2
 80050e2:	f000 ff4f 	bl	8005f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d109      	bne.n	8005178 <HAL_TIM_PWM_Start+0x24>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b01      	cmp	r3, #1
 800516e:	bf14      	ite	ne
 8005170:	2301      	movne	r3, #1
 8005172:	2300      	moveq	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	e022      	b.n	80051be <HAL_TIM_PWM_Start+0x6a>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	2b04      	cmp	r3, #4
 800517c:	d109      	bne.n	8005192 <HAL_TIM_PWM_Start+0x3e>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b01      	cmp	r3, #1
 8005188:	bf14      	ite	ne
 800518a:	2301      	movne	r3, #1
 800518c:	2300      	moveq	r3, #0
 800518e:	b2db      	uxtb	r3, r3
 8005190:	e015      	b.n	80051be <HAL_TIM_PWM_Start+0x6a>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b08      	cmp	r3, #8
 8005196:	d109      	bne.n	80051ac <HAL_TIM_PWM_Start+0x58>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	bf14      	ite	ne
 80051a4:	2301      	movne	r3, #1
 80051a6:	2300      	moveq	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	e008      	b.n	80051be <HAL_TIM_PWM_Start+0x6a>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	bf14      	ite	ne
 80051b8:	2301      	movne	r3, #1
 80051ba:	2300      	moveq	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e07c      	b.n	80052c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d104      	bne.n	80051d6 <HAL_TIM_PWM_Start+0x82>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051d4:	e013      	b.n	80051fe <HAL_TIM_PWM_Start+0xaa>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d104      	bne.n	80051e6 <HAL_TIM_PWM_Start+0x92>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051e4:	e00b      	b.n	80051fe <HAL_TIM_PWM_Start+0xaa>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d104      	bne.n	80051f6 <HAL_TIM_PWM_Start+0xa2>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051f4:	e003      	b.n	80051fe <HAL_TIM_PWM_Start+0xaa>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2202      	movs	r2, #2
 80051fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2201      	movs	r2, #1
 8005204:	6839      	ldr	r1, [r7, #0]
 8005206:	4618      	mov	r0, r3
 8005208:	f001 fad0 	bl	80067ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a2d      	ldr	r2, [pc, #180]	; (80052c8 <HAL_TIM_PWM_Start+0x174>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d004      	beq.n	8005220 <HAL_TIM_PWM_Start+0xcc>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a2c      	ldr	r2, [pc, #176]	; (80052cc <HAL_TIM_PWM_Start+0x178>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d101      	bne.n	8005224 <HAL_TIM_PWM_Start+0xd0>
 8005220:	2301      	movs	r3, #1
 8005222:	e000      	b.n	8005226 <HAL_TIM_PWM_Start+0xd2>
 8005224:	2300      	movs	r3, #0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d007      	beq.n	800523a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005238:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a22      	ldr	r2, [pc, #136]	; (80052c8 <HAL_TIM_PWM_Start+0x174>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d022      	beq.n	800528a <HAL_TIM_PWM_Start+0x136>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524c:	d01d      	beq.n	800528a <HAL_TIM_PWM_Start+0x136>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a1f      	ldr	r2, [pc, #124]	; (80052d0 <HAL_TIM_PWM_Start+0x17c>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d018      	beq.n	800528a <HAL_TIM_PWM_Start+0x136>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a1d      	ldr	r2, [pc, #116]	; (80052d4 <HAL_TIM_PWM_Start+0x180>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d013      	beq.n	800528a <HAL_TIM_PWM_Start+0x136>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a1c      	ldr	r2, [pc, #112]	; (80052d8 <HAL_TIM_PWM_Start+0x184>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d00e      	beq.n	800528a <HAL_TIM_PWM_Start+0x136>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a16      	ldr	r2, [pc, #88]	; (80052cc <HAL_TIM_PWM_Start+0x178>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d009      	beq.n	800528a <HAL_TIM_PWM_Start+0x136>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a18      	ldr	r2, [pc, #96]	; (80052dc <HAL_TIM_PWM_Start+0x188>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d004      	beq.n	800528a <HAL_TIM_PWM_Start+0x136>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a16      	ldr	r2, [pc, #88]	; (80052e0 <HAL_TIM_PWM_Start+0x18c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d111      	bne.n	80052ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b06      	cmp	r3, #6
 800529a:	d010      	beq.n	80052be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ac:	e007      	b.n	80052be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0201 	orr.w	r2, r2, #1
 80052bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40010000 	.word	0x40010000
 80052cc:	40010400 	.word	0x40010400
 80052d0:	40000400 	.word	0x40000400
 80052d4:	40000800 	.word	0x40000800
 80052d8:	40000c00 	.word	0x40000c00
 80052dc:	40014000 	.word	0x40014000
 80052e0:	40001800 	.word	0x40001800

080052e4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e041      	b.n	800537a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f839 	bl	8005382 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3304      	adds	r3, #4
 8005320:	4619      	mov	r1, r3
 8005322:	4610      	mov	r0, r2
 8005324:	f000 fe2e 	bl	8005f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
	...

08005398 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d104      	bne.n	80053b6 <HAL_TIM_IC_Start_IT+0x1e>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	e013      	b.n	80053de <HAL_TIM_IC_Start_IT+0x46>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d104      	bne.n	80053c6 <HAL_TIM_IC_Start_IT+0x2e>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	e00b      	b.n	80053de <HAL_TIM_IC_Start_IT+0x46>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d104      	bne.n	80053d6 <HAL_TIM_IC_Start_IT+0x3e>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	e003      	b.n	80053de <HAL_TIM_IC_Start_IT+0x46>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d104      	bne.n	80053f0 <HAL_TIM_IC_Start_IT+0x58>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	e013      	b.n	8005418 <HAL_TIM_IC_Start_IT+0x80>
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d104      	bne.n	8005400 <HAL_TIM_IC_Start_IT+0x68>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	e00b      	b.n	8005418 <HAL_TIM_IC_Start_IT+0x80>
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	2b08      	cmp	r3, #8
 8005404:	d104      	bne.n	8005410 <HAL_TIM_IC_Start_IT+0x78>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800540c:	b2db      	uxtb	r3, r3
 800540e:	e003      	b.n	8005418 <HAL_TIM_IC_Start_IT+0x80>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005416:	b2db      	uxtb	r3, r3
 8005418:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800541a:	7bbb      	ldrb	r3, [r7, #14]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d102      	bne.n	8005426 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005420:	7b7b      	ldrb	r3, [r7, #13]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d001      	beq.n	800542a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e0cc      	b.n	80055c4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d104      	bne.n	800543a <HAL_TIM_IC_Start_IT+0xa2>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005438:	e013      	b.n	8005462 <HAL_TIM_IC_Start_IT+0xca>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b04      	cmp	r3, #4
 800543e:	d104      	bne.n	800544a <HAL_TIM_IC_Start_IT+0xb2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005448:	e00b      	b.n	8005462 <HAL_TIM_IC_Start_IT+0xca>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b08      	cmp	r3, #8
 800544e:	d104      	bne.n	800545a <HAL_TIM_IC_Start_IT+0xc2>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005458:	e003      	b.n	8005462 <HAL_TIM_IC_Start_IT+0xca>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2202      	movs	r2, #2
 800545e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d104      	bne.n	8005472 <HAL_TIM_IC_Start_IT+0xda>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005470:	e013      	b.n	800549a <HAL_TIM_IC_Start_IT+0x102>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b04      	cmp	r3, #4
 8005476:	d104      	bne.n	8005482 <HAL_TIM_IC_Start_IT+0xea>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005480:	e00b      	b.n	800549a <HAL_TIM_IC_Start_IT+0x102>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b08      	cmp	r3, #8
 8005486:	d104      	bne.n	8005492 <HAL_TIM_IC_Start_IT+0xfa>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005490:	e003      	b.n	800549a <HAL_TIM_IC_Start_IT+0x102>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2202      	movs	r2, #2
 8005496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b0c      	cmp	r3, #12
 800549e:	d841      	bhi.n	8005524 <HAL_TIM_IC_Start_IT+0x18c>
 80054a0:	a201      	add	r2, pc, #4	; (adr r2, 80054a8 <HAL_TIM_IC_Start_IT+0x110>)
 80054a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a6:	bf00      	nop
 80054a8:	080054dd 	.word	0x080054dd
 80054ac:	08005525 	.word	0x08005525
 80054b0:	08005525 	.word	0x08005525
 80054b4:	08005525 	.word	0x08005525
 80054b8:	080054ef 	.word	0x080054ef
 80054bc:	08005525 	.word	0x08005525
 80054c0:	08005525 	.word	0x08005525
 80054c4:	08005525 	.word	0x08005525
 80054c8:	08005501 	.word	0x08005501
 80054cc:	08005525 	.word	0x08005525
 80054d0:	08005525 	.word	0x08005525
 80054d4:	08005525 	.word	0x08005525
 80054d8:	08005513 	.word	0x08005513
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0202 	orr.w	r2, r2, #2
 80054ea:	60da      	str	r2, [r3, #12]
      break;
 80054ec:	e01d      	b.n	800552a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f042 0204 	orr.w	r2, r2, #4
 80054fc:	60da      	str	r2, [r3, #12]
      break;
 80054fe:	e014      	b.n	800552a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0208 	orr.w	r2, r2, #8
 800550e:	60da      	str	r2, [r3, #12]
      break;
 8005510:	e00b      	b.n	800552a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68da      	ldr	r2, [r3, #12]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f042 0210 	orr.w	r2, r2, #16
 8005520:	60da      	str	r2, [r3, #12]
      break;
 8005522:	e002      	b.n	800552a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	73fb      	strb	r3, [r7, #15]
      break;
 8005528:	bf00      	nop
  }

  if (status == HAL_OK)
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d148      	bne.n	80055c2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2201      	movs	r2, #1
 8005536:	6839      	ldr	r1, [r7, #0]
 8005538:	4618      	mov	r0, r3
 800553a:	f001 f937 	bl	80067ac <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a22      	ldr	r2, [pc, #136]	; (80055cc <HAL_TIM_IC_Start_IT+0x234>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d022      	beq.n	800558e <HAL_TIM_IC_Start_IT+0x1f6>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005550:	d01d      	beq.n	800558e <HAL_TIM_IC_Start_IT+0x1f6>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a1e      	ldr	r2, [pc, #120]	; (80055d0 <HAL_TIM_IC_Start_IT+0x238>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d018      	beq.n	800558e <HAL_TIM_IC_Start_IT+0x1f6>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a1c      	ldr	r2, [pc, #112]	; (80055d4 <HAL_TIM_IC_Start_IT+0x23c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d013      	beq.n	800558e <HAL_TIM_IC_Start_IT+0x1f6>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a1b      	ldr	r2, [pc, #108]	; (80055d8 <HAL_TIM_IC_Start_IT+0x240>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00e      	beq.n	800558e <HAL_TIM_IC_Start_IT+0x1f6>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a19      	ldr	r2, [pc, #100]	; (80055dc <HAL_TIM_IC_Start_IT+0x244>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d009      	beq.n	800558e <HAL_TIM_IC_Start_IT+0x1f6>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a18      	ldr	r2, [pc, #96]	; (80055e0 <HAL_TIM_IC_Start_IT+0x248>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d004      	beq.n	800558e <HAL_TIM_IC_Start_IT+0x1f6>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a16      	ldr	r2, [pc, #88]	; (80055e4 <HAL_TIM_IC_Start_IT+0x24c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d111      	bne.n	80055b2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2b06      	cmp	r3, #6
 800559e:	d010      	beq.n	80055c2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0201 	orr.w	r2, r2, #1
 80055ae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b0:	e007      	b.n	80055c2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f042 0201 	orr.w	r2, r2, #1
 80055c0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40010000 	.word	0x40010000
 80055d0:	40000400 	.word	0x40000400
 80055d4:	40000800 	.word	0x40000800
 80055d8:	40000c00 	.word	0x40000c00
 80055dc:	40010400 	.word	0x40010400
 80055e0:	40014000 	.word	0x40014000
 80055e4:	40001800 	.word	0x40001800

080055e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e097      	b.n	800572c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d106      	bne.n	8005616 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7fd fa51 	bl	8002ab8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2202      	movs	r2, #2
 800561a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6812      	ldr	r2, [r2, #0]
 8005628:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800562c:	f023 0307 	bic.w	r3, r3, #7
 8005630:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	3304      	adds	r3, #4
 800563a:	4619      	mov	r1, r3
 800563c:	4610      	mov	r0, r2
 800563e:	f000 fca1 	bl	8005f84 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4313      	orrs	r3, r2
 8005662:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800566a:	f023 0303 	bic.w	r3, r3, #3
 800566e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	4313      	orrs	r3, r2
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005688:	f023 030c 	bic.w	r3, r3, #12
 800568c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005694:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005698:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	021b      	lsls	r3, r3, #8
 80056a4:	4313      	orrs	r3, r2
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	011a      	lsls	r2, r3, #4
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	031b      	lsls	r3, r3, #12
 80056b8:	4313      	orrs	r3, r2
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	4313      	orrs	r3, r2
 80056be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80056c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80056ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	4313      	orrs	r3, r2
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005744:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800574c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005754:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800575c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d110      	bne.n	8005786 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005764:	7bfb      	ldrb	r3, [r7, #15]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d102      	bne.n	8005770 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800576a:	7b7b      	ldrb	r3, [r7, #13]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d001      	beq.n	8005774 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e069      	b.n	8005848 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005784:	e031      	b.n	80057ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b04      	cmp	r3, #4
 800578a:	d110      	bne.n	80057ae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800578c:	7bbb      	ldrb	r3, [r7, #14]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d102      	bne.n	8005798 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005792:	7b3b      	ldrb	r3, [r7, #12]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d001      	beq.n	800579c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e055      	b.n	8005848 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057ac:	e01d      	b.n	80057ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d108      	bne.n	80057c6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80057b4:	7bbb      	ldrb	r3, [r7, #14]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d105      	bne.n	80057c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057ba:	7b7b      	ldrb	r3, [r7, #13]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d102      	bne.n	80057c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80057c0:	7b3b      	ldrb	r3, [r7, #12]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d001      	beq.n	80057ca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e03e      	b.n	8005848 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2202      	movs	r2, #2
 80057ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2202      	movs	r2, #2
 80057d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2202      	movs	r2, #2
 80057de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2202      	movs	r2, #2
 80057e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <HAL_TIM_Encoder_Start+0xc4>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d008      	beq.n	8005808 <HAL_TIM_Encoder_Start+0xd4>
 80057f6:	e00f      	b.n	8005818 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2201      	movs	r2, #1
 80057fe:	2100      	movs	r1, #0
 8005800:	4618      	mov	r0, r3
 8005802:	f000 ffd3 	bl	80067ac <TIM_CCxChannelCmd>
      break;
 8005806:	e016      	b.n	8005836 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2201      	movs	r2, #1
 800580e:	2104      	movs	r1, #4
 8005810:	4618      	mov	r0, r3
 8005812:	f000 ffcb 	bl	80067ac <TIM_CCxChannelCmd>
      break;
 8005816:	e00e      	b.n	8005836 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2201      	movs	r2, #1
 800581e:	2100      	movs	r1, #0
 8005820:	4618      	mov	r0, r3
 8005822:	f000 ffc3 	bl	80067ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2201      	movs	r2, #1
 800582c:	2104      	movs	r1, #4
 800582e:	4618      	mov	r0, r3
 8005830:	f000 ffbc 	bl	80067ac <TIM_CCxChannelCmd>
      break;
 8005834:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f042 0201 	orr.w	r2, r2, #1
 8005844:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b02      	cmp	r3, #2
 8005864:	d122      	bne.n	80058ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	2b02      	cmp	r3, #2
 8005872:	d11b      	bne.n	80058ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f06f 0202 	mvn.w	r2, #2
 800587c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7fc fcb0 	bl	80021f8 <HAL_TIM_IC_CaptureCallback>
 8005898:	e005      	b.n	80058a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fb54 	bl	8005f48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fb5b 	bl	8005f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	f003 0304 	and.w	r3, r3, #4
 80058b6:	2b04      	cmp	r3, #4
 80058b8:	d122      	bne.n	8005900 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b04      	cmp	r3, #4
 80058c6:	d11b      	bne.n	8005900 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f06f 0204 	mvn.w	r2, #4
 80058d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2202      	movs	r2, #2
 80058d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7fc fc86 	bl	80021f8 <HAL_TIM_IC_CaptureCallback>
 80058ec:	e005      	b.n	80058fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fb2a 	bl	8005f48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 fb31 	bl	8005f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	f003 0308 	and.w	r3, r3, #8
 800590a:	2b08      	cmp	r3, #8
 800590c:	d122      	bne.n	8005954 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f003 0308 	and.w	r3, r3, #8
 8005918:	2b08      	cmp	r3, #8
 800591a:	d11b      	bne.n	8005954 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f06f 0208 	mvn.w	r2, #8
 8005924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2204      	movs	r2, #4
 800592a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	f003 0303 	and.w	r3, r3, #3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fc fc5c 	bl	80021f8 <HAL_TIM_IC_CaptureCallback>
 8005940:	e005      	b.n	800594e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fb00 	bl	8005f48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fb07 	bl	8005f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f003 0310 	and.w	r3, r3, #16
 800595e:	2b10      	cmp	r3, #16
 8005960:	d122      	bne.n	80059a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f003 0310 	and.w	r3, r3, #16
 800596c:	2b10      	cmp	r3, #16
 800596e:	d11b      	bne.n	80059a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0210 	mvn.w	r2, #16
 8005978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2208      	movs	r2, #8
 800597e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7fc fc32 	bl	80021f8 <HAL_TIM_IC_CaptureCallback>
 8005994:	e005      	b.n	80059a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fad6 	bl	8005f48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fadd 	bl	8005f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d10e      	bne.n	80059d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d107      	bne.n	80059d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f06f 0201 	mvn.w	r2, #1
 80059cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fab0 	bl	8005f34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059de:	2b80      	cmp	r3, #128	; 0x80
 80059e0:	d10e      	bne.n	8005a00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ec:	2b80      	cmp	r3, #128	; 0x80
 80059ee:	d107      	bne.n	8005a00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 ffd4 	bl	80069a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0a:	2b40      	cmp	r3, #64	; 0x40
 8005a0c:	d10e      	bne.n	8005a2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a18:	2b40      	cmp	r3, #64	; 0x40
 8005a1a:	d107      	bne.n	8005a2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 faa2 	bl	8005f70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b20      	cmp	r3, #32
 8005a38:	d10e      	bne.n	8005a58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f003 0320 	and.w	r3, r3, #32
 8005a44:	2b20      	cmp	r3, #32
 8005a46:	d107      	bne.n	8005a58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f06f 0220 	mvn.w	r2, #32
 8005a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 ff9e 	bl	8006994 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a58:	bf00      	nop
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <HAL_TIM_IC_ConfigChannel+0x1e>
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e088      	b.n	8005b90 <HAL_TIM_IC_ConfigChannel+0x130>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d11b      	bne.n	8005ac4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6818      	ldr	r0, [r3, #0]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	6819      	ldr	r1, [r3, #0]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f000 fcc2 	bl	8006424 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	699a      	ldr	r2, [r3, #24]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 020c 	bic.w	r2, r2, #12
 8005aae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6999      	ldr	r1, [r3, #24]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	689a      	ldr	r2, [r3, #8]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	619a      	str	r2, [r3, #24]
 8005ac2:	e060      	b.n	8005b86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	d11c      	bne.n	8005b04 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6818      	ldr	r0, [r3, #0]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	6819      	ldr	r1, [r3, #0]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f000 fd46 	bl	800656a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	699a      	ldr	r2, [r3, #24]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005aec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6999      	ldr	r1, [r3, #24]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	021a      	lsls	r2, r3, #8
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	619a      	str	r2, [r3, #24]
 8005b02:	e040      	b.n	8005b86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b08      	cmp	r3, #8
 8005b08:	d11b      	bne.n	8005b42 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6818      	ldr	r0, [r3, #0]
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	6819      	ldr	r1, [r3, #0]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f000 fd93 	bl	8006644 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 020c 	bic.w	r2, r2, #12
 8005b2c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69d9      	ldr	r1, [r3, #28]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	61da      	str	r2, [r3, #28]
 8005b40:	e021      	b.n	8005b86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b0c      	cmp	r3, #12
 8005b46:	d11c      	bne.n	8005b82 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6818      	ldr	r0, [r3, #0]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	6819      	ldr	r1, [r3, #0]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f000 fdb0 	bl	80066bc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	69da      	ldr	r2, [r3, #28]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b6a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	69d9      	ldr	r1, [r3, #28]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	021a      	lsls	r2, r3, #8
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	61da      	str	r2, [r3, #28]
 8005b80:	e001      	b.n	8005b86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	e0ae      	b.n	8005d14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b0c      	cmp	r3, #12
 8005bc2:	f200 809f 	bhi.w	8005d04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005bc6:	a201      	add	r2, pc, #4	; (adr r2, 8005bcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bcc:	08005c01 	.word	0x08005c01
 8005bd0:	08005d05 	.word	0x08005d05
 8005bd4:	08005d05 	.word	0x08005d05
 8005bd8:	08005d05 	.word	0x08005d05
 8005bdc:	08005c41 	.word	0x08005c41
 8005be0:	08005d05 	.word	0x08005d05
 8005be4:	08005d05 	.word	0x08005d05
 8005be8:	08005d05 	.word	0x08005d05
 8005bec:	08005c83 	.word	0x08005c83
 8005bf0:	08005d05 	.word	0x08005d05
 8005bf4:	08005d05 	.word	0x08005d05
 8005bf8:	08005d05 	.word	0x08005d05
 8005bfc:	08005cc3 	.word	0x08005cc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68b9      	ldr	r1, [r7, #8]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fa5c 	bl	80060c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699a      	ldr	r2, [r3, #24]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0208 	orr.w	r2, r2, #8
 8005c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0204 	bic.w	r2, r2, #4
 8005c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6999      	ldr	r1, [r3, #24]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	691a      	ldr	r2, [r3, #16]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	619a      	str	r2, [r3, #24]
      break;
 8005c3e:	e064      	b.n	8005d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68b9      	ldr	r1, [r7, #8]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 faac 	bl	80061a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699a      	ldr	r2, [r3, #24]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6999      	ldr	r1, [r3, #24]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	021a      	lsls	r2, r3, #8
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	619a      	str	r2, [r3, #24]
      break;
 8005c80:	e043      	b.n	8005d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68b9      	ldr	r1, [r7, #8]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fb01 	bl	8006290 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69da      	ldr	r2, [r3, #28]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f042 0208 	orr.w	r2, r2, #8
 8005c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69da      	ldr	r2, [r3, #28]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0204 	bic.w	r2, r2, #4
 8005cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69d9      	ldr	r1, [r3, #28]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	61da      	str	r2, [r3, #28]
      break;
 8005cc0:	e023      	b.n	8005d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68b9      	ldr	r1, [r7, #8]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 fb55 	bl	8006378 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69da      	ldr	r2, [r3, #28]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69da      	ldr	r2, [r3, #28]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69d9      	ldr	r1, [r3, #28]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	021a      	lsls	r2, r3, #8
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	61da      	str	r2, [r3, #28]
      break;
 8005d02:	e002      	b.n	8005d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	75fb      	strb	r3, [r7, #23]
      break;
 8005d08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_TIM_ConfigClockSource+0x1c>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e0b4      	b.n	8005ea2 <HAL_TIM_ConfigClockSource+0x186>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d70:	d03e      	beq.n	8005df0 <HAL_TIM_ConfigClockSource+0xd4>
 8005d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d76:	f200 8087 	bhi.w	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7e:	f000 8086 	beq.w	8005e8e <HAL_TIM_ConfigClockSource+0x172>
 8005d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d86:	d87f      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005d88:	2b70      	cmp	r3, #112	; 0x70
 8005d8a:	d01a      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0xa6>
 8005d8c:	2b70      	cmp	r3, #112	; 0x70
 8005d8e:	d87b      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005d90:	2b60      	cmp	r3, #96	; 0x60
 8005d92:	d050      	beq.n	8005e36 <HAL_TIM_ConfigClockSource+0x11a>
 8005d94:	2b60      	cmp	r3, #96	; 0x60
 8005d96:	d877      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005d98:	2b50      	cmp	r3, #80	; 0x50
 8005d9a:	d03c      	beq.n	8005e16 <HAL_TIM_ConfigClockSource+0xfa>
 8005d9c:	2b50      	cmp	r3, #80	; 0x50
 8005d9e:	d873      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005da0:	2b40      	cmp	r3, #64	; 0x40
 8005da2:	d058      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0x13a>
 8005da4:	2b40      	cmp	r3, #64	; 0x40
 8005da6:	d86f      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005da8:	2b30      	cmp	r3, #48	; 0x30
 8005daa:	d064      	beq.n	8005e76 <HAL_TIM_ConfigClockSource+0x15a>
 8005dac:	2b30      	cmp	r3, #48	; 0x30
 8005dae:	d86b      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	d060      	beq.n	8005e76 <HAL_TIM_ConfigClockSource+0x15a>
 8005db4:	2b20      	cmp	r3, #32
 8005db6:	d867      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d05c      	beq.n	8005e76 <HAL_TIM_ConfigClockSource+0x15a>
 8005dbc:	2b10      	cmp	r3, #16
 8005dbe:	d05a      	beq.n	8005e76 <HAL_TIM_ConfigClockSource+0x15a>
 8005dc0:	e062      	b.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6818      	ldr	r0, [r3, #0]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	6899      	ldr	r1, [r3, #8]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f000 fccb 	bl	800676c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005de4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	609a      	str	r2, [r3, #8]
      break;
 8005dee:	e04f      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6818      	ldr	r0, [r3, #0]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	6899      	ldr	r1, [r3, #8]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f000 fcb4 	bl	800676c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e12:	609a      	str	r2, [r3, #8]
      break;
 8005e14:	e03c      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6818      	ldr	r0, [r3, #0]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	6859      	ldr	r1, [r3, #4]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	461a      	mov	r2, r3
 8005e24:	f000 fb72 	bl	800650c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2150      	movs	r1, #80	; 0x50
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 fc81 	bl	8006736 <TIM_ITRx_SetConfig>
      break;
 8005e34:	e02c      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6818      	ldr	r0, [r3, #0]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	6859      	ldr	r1, [r3, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	461a      	mov	r2, r3
 8005e44:	f000 fbce 	bl	80065e4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2160      	movs	r1, #96	; 0x60
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fc71 	bl	8006736 <TIM_ITRx_SetConfig>
      break;
 8005e54:	e01c      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6818      	ldr	r0, [r3, #0]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	6859      	ldr	r1, [r3, #4]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	461a      	mov	r2, r3
 8005e64:	f000 fb52 	bl	800650c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2140      	movs	r1, #64	; 0x40
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 fc61 	bl	8006736 <TIM_ITRx_SetConfig>
      break;
 8005e74:	e00c      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4610      	mov	r0, r2
 8005e82:	f000 fc58 	bl	8006736 <TIM_ITRx_SetConfig>
      break;
 8005e86:	e003      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e8c:	e000      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
	...

08005eac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b0c      	cmp	r3, #12
 8005ebe:	d831      	bhi.n	8005f24 <HAL_TIM_ReadCapturedValue+0x78>
 8005ec0:	a201      	add	r2, pc, #4	; (adr r2, 8005ec8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec6:	bf00      	nop
 8005ec8:	08005efd 	.word	0x08005efd
 8005ecc:	08005f25 	.word	0x08005f25
 8005ed0:	08005f25 	.word	0x08005f25
 8005ed4:	08005f25 	.word	0x08005f25
 8005ed8:	08005f07 	.word	0x08005f07
 8005edc:	08005f25 	.word	0x08005f25
 8005ee0:	08005f25 	.word	0x08005f25
 8005ee4:	08005f25 	.word	0x08005f25
 8005ee8:	08005f11 	.word	0x08005f11
 8005eec:	08005f25 	.word	0x08005f25
 8005ef0:	08005f25 	.word	0x08005f25
 8005ef4:	08005f25 	.word	0x08005f25
 8005ef8:	08005f1b 	.word	0x08005f1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f02:	60fb      	str	r3, [r7, #12]

      break;
 8005f04:	e00f      	b.n	8005f26 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0c:	60fb      	str	r3, [r7, #12]

      break;
 8005f0e:	e00a      	b.n	8005f26 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f16:	60fb      	str	r3, [r7, #12]

      break;
 8005f18:	e005      	b.n	8005f26 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	60fb      	str	r3, [r7, #12]

      break;
 8005f22:	e000      	b.n	8005f26 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005f24:	bf00      	nop
  }

  return tmpreg;
 8005f26:	68fb      	ldr	r3, [r7, #12]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a40      	ldr	r2, [pc, #256]	; (8006098 <TIM_Base_SetConfig+0x114>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d013      	beq.n	8005fc4 <TIM_Base_SetConfig+0x40>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa2:	d00f      	beq.n	8005fc4 <TIM_Base_SetConfig+0x40>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a3d      	ldr	r2, [pc, #244]	; (800609c <TIM_Base_SetConfig+0x118>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d00b      	beq.n	8005fc4 <TIM_Base_SetConfig+0x40>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a3c      	ldr	r2, [pc, #240]	; (80060a0 <TIM_Base_SetConfig+0x11c>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d007      	beq.n	8005fc4 <TIM_Base_SetConfig+0x40>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a3b      	ldr	r2, [pc, #236]	; (80060a4 <TIM_Base_SetConfig+0x120>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d003      	beq.n	8005fc4 <TIM_Base_SetConfig+0x40>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a3a      	ldr	r2, [pc, #232]	; (80060a8 <TIM_Base_SetConfig+0x124>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d108      	bne.n	8005fd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a2f      	ldr	r2, [pc, #188]	; (8006098 <TIM_Base_SetConfig+0x114>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d02b      	beq.n	8006036 <TIM_Base_SetConfig+0xb2>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fe4:	d027      	beq.n	8006036 <TIM_Base_SetConfig+0xb2>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a2c      	ldr	r2, [pc, #176]	; (800609c <TIM_Base_SetConfig+0x118>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d023      	beq.n	8006036 <TIM_Base_SetConfig+0xb2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a2b      	ldr	r2, [pc, #172]	; (80060a0 <TIM_Base_SetConfig+0x11c>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d01f      	beq.n	8006036 <TIM_Base_SetConfig+0xb2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a2a      	ldr	r2, [pc, #168]	; (80060a4 <TIM_Base_SetConfig+0x120>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d01b      	beq.n	8006036 <TIM_Base_SetConfig+0xb2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a29      	ldr	r2, [pc, #164]	; (80060a8 <TIM_Base_SetConfig+0x124>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d017      	beq.n	8006036 <TIM_Base_SetConfig+0xb2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a28      	ldr	r2, [pc, #160]	; (80060ac <TIM_Base_SetConfig+0x128>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d013      	beq.n	8006036 <TIM_Base_SetConfig+0xb2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a27      	ldr	r2, [pc, #156]	; (80060b0 <TIM_Base_SetConfig+0x12c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00f      	beq.n	8006036 <TIM_Base_SetConfig+0xb2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a26      	ldr	r2, [pc, #152]	; (80060b4 <TIM_Base_SetConfig+0x130>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d00b      	beq.n	8006036 <TIM_Base_SetConfig+0xb2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a25      	ldr	r2, [pc, #148]	; (80060b8 <TIM_Base_SetConfig+0x134>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d007      	beq.n	8006036 <TIM_Base_SetConfig+0xb2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a24      	ldr	r2, [pc, #144]	; (80060bc <TIM_Base_SetConfig+0x138>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d003      	beq.n	8006036 <TIM_Base_SetConfig+0xb2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a23      	ldr	r2, [pc, #140]	; (80060c0 <TIM_Base_SetConfig+0x13c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d108      	bne.n	8006048 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800603c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	4313      	orrs	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	4313      	orrs	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a0a      	ldr	r2, [pc, #40]	; (8006098 <TIM_Base_SetConfig+0x114>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d003      	beq.n	800607c <TIM_Base_SetConfig+0xf8>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a0c      	ldr	r2, [pc, #48]	; (80060a8 <TIM_Base_SetConfig+0x124>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d103      	bne.n	8006084 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	691a      	ldr	r2, [r3, #16]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	615a      	str	r2, [r3, #20]
}
 800608a:	bf00      	nop
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	40010000 	.word	0x40010000
 800609c:	40000400 	.word	0x40000400
 80060a0:	40000800 	.word	0x40000800
 80060a4:	40000c00 	.word	0x40000c00
 80060a8:	40010400 	.word	0x40010400
 80060ac:	40014000 	.word	0x40014000
 80060b0:	40014400 	.word	0x40014400
 80060b4:	40014800 	.word	0x40014800
 80060b8:	40001800 	.word	0x40001800
 80060bc:	40001c00 	.word	0x40001c00
 80060c0:	40002000 	.word	0x40002000

080060c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	f023 0201 	bic.w	r2, r3, #1
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0303 	bic.w	r3, r3, #3
 80060fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	4313      	orrs	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f023 0302 	bic.w	r3, r3, #2
 800610c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	4313      	orrs	r3, r2
 8006116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a20      	ldr	r2, [pc, #128]	; (800619c <TIM_OC1_SetConfig+0xd8>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d003      	beq.n	8006128 <TIM_OC1_SetConfig+0x64>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a1f      	ldr	r2, [pc, #124]	; (80061a0 <TIM_OC1_SetConfig+0xdc>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d10c      	bne.n	8006142 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f023 0308 	bic.w	r3, r3, #8
 800612e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	4313      	orrs	r3, r2
 8006138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f023 0304 	bic.w	r3, r3, #4
 8006140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a15      	ldr	r2, [pc, #84]	; (800619c <TIM_OC1_SetConfig+0xd8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d003      	beq.n	8006152 <TIM_OC1_SetConfig+0x8e>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a14      	ldr	r2, [pc, #80]	; (80061a0 <TIM_OC1_SetConfig+0xdc>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d111      	bne.n	8006176 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	4313      	orrs	r3, r2
 800616a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	4313      	orrs	r3, r2
 8006174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	621a      	str	r2, [r3, #32]
}
 8006190:	bf00      	nop
 8006192:	371c      	adds	r7, #28
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	40010000 	.word	0x40010000
 80061a0:	40010400 	.word	0x40010400

080061a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	f023 0210 	bic.w	r2, r3, #16
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	021b      	lsls	r3, r3, #8
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f023 0320 	bic.w	r3, r3, #32
 80061ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a22      	ldr	r2, [pc, #136]	; (8006288 <TIM_OC2_SetConfig+0xe4>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d003      	beq.n	800620c <TIM_OC2_SetConfig+0x68>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a21      	ldr	r2, [pc, #132]	; (800628c <TIM_OC2_SetConfig+0xe8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d10d      	bne.n	8006228 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	011b      	lsls	r3, r3, #4
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	4313      	orrs	r3, r2
 800621e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006226:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a17      	ldr	r2, [pc, #92]	; (8006288 <TIM_OC2_SetConfig+0xe4>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d003      	beq.n	8006238 <TIM_OC2_SetConfig+0x94>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a16      	ldr	r2, [pc, #88]	; (800628c <TIM_OC2_SetConfig+0xe8>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d113      	bne.n	8006260 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800623e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006246:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	4313      	orrs	r3, r2
 8006252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	4313      	orrs	r3, r2
 800625e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	621a      	str	r2, [r3, #32]
}
 800627a:	bf00      	nop
 800627c:	371c      	adds	r7, #28
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	40010000 	.word	0x40010000
 800628c:	40010400 	.word	0x40010400

08006290 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f023 0303 	bic.w	r3, r3, #3
 80062c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	021b      	lsls	r3, r3, #8
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a21      	ldr	r2, [pc, #132]	; (8006370 <TIM_OC3_SetConfig+0xe0>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d003      	beq.n	80062f6 <TIM_OC3_SetConfig+0x66>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a20      	ldr	r2, [pc, #128]	; (8006374 <TIM_OC3_SetConfig+0xe4>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d10d      	bne.n	8006312 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	021b      	lsls	r3, r3, #8
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	4313      	orrs	r3, r2
 8006308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a16      	ldr	r2, [pc, #88]	; (8006370 <TIM_OC3_SetConfig+0xe0>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d003      	beq.n	8006322 <TIM_OC3_SetConfig+0x92>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a15      	ldr	r2, [pc, #84]	; (8006374 <TIM_OC3_SetConfig+0xe4>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d113      	bne.n	800634a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	4313      	orrs	r3, r2
 800633c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	011b      	lsls	r3, r3, #4
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	4313      	orrs	r3, r2
 8006348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	621a      	str	r2, [r3, #32]
}
 8006364:	bf00      	nop
 8006366:	371c      	adds	r7, #28
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	40010000 	.word	0x40010000
 8006374:	40010400 	.word	0x40010400

08006378 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	021b      	lsls	r3, r3, #8
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	031b      	lsls	r3, r3, #12
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a12      	ldr	r2, [pc, #72]	; (800641c <TIM_OC4_SetConfig+0xa4>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d003      	beq.n	80063e0 <TIM_OC4_SetConfig+0x68>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a11      	ldr	r2, [pc, #68]	; (8006420 <TIM_OC4_SetConfig+0xa8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d109      	bne.n	80063f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	019b      	lsls	r3, r3, #6
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	621a      	str	r2, [r3, #32]
}
 800640e:	bf00      	nop
 8006410:	371c      	adds	r7, #28
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	40010000 	.word	0x40010000
 8006420:	40010400 	.word	0x40010400

08006424 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
 8006430:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	f023 0201 	bic.w	r2, r3, #1
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	4a28      	ldr	r2, [pc, #160]	; (80064f0 <TIM_TI1_SetConfig+0xcc>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d01b      	beq.n	800648a <TIM_TI1_SetConfig+0x66>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006458:	d017      	beq.n	800648a <TIM_TI1_SetConfig+0x66>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4a25      	ldr	r2, [pc, #148]	; (80064f4 <TIM_TI1_SetConfig+0xd0>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d013      	beq.n	800648a <TIM_TI1_SetConfig+0x66>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	4a24      	ldr	r2, [pc, #144]	; (80064f8 <TIM_TI1_SetConfig+0xd4>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d00f      	beq.n	800648a <TIM_TI1_SetConfig+0x66>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	4a23      	ldr	r2, [pc, #140]	; (80064fc <TIM_TI1_SetConfig+0xd8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d00b      	beq.n	800648a <TIM_TI1_SetConfig+0x66>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	4a22      	ldr	r2, [pc, #136]	; (8006500 <TIM_TI1_SetConfig+0xdc>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d007      	beq.n	800648a <TIM_TI1_SetConfig+0x66>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	4a21      	ldr	r2, [pc, #132]	; (8006504 <TIM_TI1_SetConfig+0xe0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d003      	beq.n	800648a <TIM_TI1_SetConfig+0x66>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	4a20      	ldr	r2, [pc, #128]	; (8006508 <TIM_TI1_SetConfig+0xe4>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d101      	bne.n	800648e <TIM_TI1_SetConfig+0x6a>
 800648a:	2301      	movs	r3, #1
 800648c:	e000      	b.n	8006490 <TIM_TI1_SetConfig+0x6c>
 800648e:	2300      	movs	r3, #0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d008      	beq.n	80064a6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f023 0303 	bic.w	r3, r3, #3
 800649a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	617b      	str	r3, [r7, #20]
 80064a4:	e003      	b.n	80064ae <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f043 0301 	orr.w	r3, r3, #1
 80064ac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	011b      	lsls	r3, r3, #4
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f023 030a 	bic.w	r3, r3, #10
 80064c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	f003 030a 	and.w	r3, r3, #10
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	621a      	str	r2, [r3, #32]
}
 80064e2:	bf00      	nop
 80064e4:	371c      	adds	r7, #28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	40010000 	.word	0x40010000
 80064f4:	40000400 	.word	0x40000400
 80064f8:	40000800 	.word	0x40000800
 80064fc:	40000c00 	.word	0x40000c00
 8006500:	40010400 	.word	0x40010400
 8006504:	40014000 	.word	0x40014000
 8006508:	40001800 	.word	0x40001800

0800650c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	f023 0201 	bic.w	r2, r3, #1
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	4313      	orrs	r3, r2
 8006540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f023 030a 	bic.w	r3, r3, #10
 8006548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	621a      	str	r2, [r3, #32]
}
 800655e:	bf00      	nop
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800656a:	b480      	push	{r7}
 800656c:	b087      	sub	sp, #28
 800656e:	af00      	add	r7, sp, #0
 8006570:	60f8      	str	r0, [r7, #12]
 8006572:	60b9      	str	r1, [r7, #8]
 8006574:	607a      	str	r2, [r7, #4]
 8006576:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	f023 0210 	bic.w	r2, r3, #16
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006596:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	021b      	lsls	r3, r3, #8
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	4313      	orrs	r3, r2
 80065a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	031b      	lsls	r3, r3, #12
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	011b      	lsls	r3, r3, #4
 80065c2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	621a      	str	r2, [r3, #32]
}
 80065d8:	bf00      	nop
 80065da:	371c      	adds	r7, #28
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	f023 0210 	bic.w	r2, r3, #16
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800660e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	031b      	lsls	r3, r3, #12
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	4313      	orrs	r3, r2
 8006618:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006620:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	011b      	lsls	r3, r3, #4
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	4313      	orrs	r3, r2
 800662a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	621a      	str	r2, [r3, #32]
}
 8006638:	bf00      	nop
 800663a:	371c      	adds	r7, #28
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
 8006650:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f023 0303 	bic.w	r3, r3, #3
 8006670:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006680:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	011b      	lsls	r3, r3, #4
 8006686:	b2db      	uxtb	r3, r3
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	4313      	orrs	r3, r2
 800668c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006694:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	021b      	lsls	r3, r3, #8
 800669a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	621a      	str	r2, [r3, #32]
}
 80066b0:	bf00      	nop
 80066b2:	371c      	adds	r7, #28
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
 80066c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	021b      	lsls	r3, r3, #8
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	031b      	lsls	r3, r3, #12
 8006700:	b29b      	uxth	r3, r3
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	4313      	orrs	r3, r2
 8006706:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800670e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	031b      	lsls	r3, r3, #12
 8006714:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	4313      	orrs	r3, r2
 800671c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	621a      	str	r2, [r3, #32]
}
 800672a:	bf00      	nop
 800672c:	371c      	adds	r7, #28
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006736:	b480      	push	{r7}
 8006738:	b085      	sub	sp, #20
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	4313      	orrs	r3, r2
 8006754:	f043 0307 	orr.w	r3, r3, #7
 8006758:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	609a      	str	r2, [r3, #8]
}
 8006760:	bf00      	nop
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006786:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	021a      	lsls	r2, r3, #8
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	431a      	orrs	r2, r3
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	4313      	orrs	r3, r2
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	609a      	str	r2, [r3, #8]
}
 80067a0:	bf00      	nop
 80067a2:	371c      	adds	r7, #28
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	f003 031f 	and.w	r3, r3, #31
 80067be:	2201      	movs	r2, #1
 80067c0:	fa02 f303 	lsl.w	r3, r2, r3
 80067c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6a1a      	ldr	r2, [r3, #32]
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	43db      	mvns	r3, r3
 80067ce:	401a      	ands	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6a1a      	ldr	r2, [r3, #32]
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f003 031f 	and.w	r3, r3, #31
 80067de:	6879      	ldr	r1, [r7, #4]
 80067e0:	fa01 f303 	lsl.w	r3, r1, r3
 80067e4:	431a      	orrs	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	621a      	str	r2, [r3, #32]
}
 80067ea:	bf00      	nop
 80067ec:	371c      	adds	r7, #28
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
	...

080067f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006808:	2b01      	cmp	r3, #1
 800680a:	d101      	bne.n	8006810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800680c:	2302      	movs	r3, #2
 800680e:	e05a      	b.n	80068c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006836:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4313      	orrs	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a21      	ldr	r2, [pc, #132]	; (80068d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d022      	beq.n	800689a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800685c:	d01d      	beq.n	800689a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a1d      	ldr	r2, [pc, #116]	; (80068d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d018      	beq.n	800689a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a1b      	ldr	r2, [pc, #108]	; (80068dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d013      	beq.n	800689a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a1a      	ldr	r2, [pc, #104]	; (80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d00e      	beq.n	800689a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a18      	ldr	r2, [pc, #96]	; (80068e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d009      	beq.n	800689a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a17      	ldr	r2, [pc, #92]	; (80068e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d004      	beq.n	800689a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a15      	ldr	r2, [pc, #84]	; (80068ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d10c      	bne.n	80068b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	40010000 	.word	0x40010000
 80068d8:	40000400 	.word	0x40000400
 80068dc:	40000800 	.word	0x40000800
 80068e0:	40000c00 	.word	0x40000c00
 80068e4:	40010400 	.word	0x40010400
 80068e8:	40014000 	.word	0x40014000
 80068ec:	40001800 	.word	0x40001800

080068f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006904:	2b01      	cmp	r3, #1
 8006906:	d101      	bne.n	800690c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006908:	2302      	movs	r3, #2
 800690a:	e03d      	b.n	8006988 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	4313      	orrs	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4313      	orrs	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	4313      	orrs	r3, r2
 8006958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	4313      	orrs	r3, r2
 8006966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	69db      	ldr	r3, [r3, #28]
 8006972:	4313      	orrs	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e03f      	b.n	8006a4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d106      	bne.n	80069e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7fc f93c 	bl	8002c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2224      	movs	r2, #36	; 0x24
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 fe23 	bl	800764c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	691a      	ldr	r2, [r3, #16]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	695a      	ldr	r2, [r3, #20]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68da      	ldr	r2, [r3, #12]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2220      	movs	r2, #32
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2220      	movs	r2, #32
 8006a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b08a      	sub	sp, #40	; 0x28
 8006a5a:	af02      	add	r7, sp, #8
 8006a5c:	60f8      	str	r0, [r7, #12]
 8006a5e:	60b9      	str	r1, [r7, #8]
 8006a60:	603b      	str	r3, [r7, #0]
 8006a62:	4613      	mov	r3, r2
 8006a64:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a66:	2300      	movs	r3, #0
 8006a68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b20      	cmp	r3, #32
 8006a74:	d17c      	bne.n	8006b70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d002      	beq.n	8006a82 <HAL_UART_Transmit+0x2c>
 8006a7c:	88fb      	ldrh	r3, [r7, #6]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e075      	b.n	8006b72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d101      	bne.n	8006a94 <HAL_UART_Transmit+0x3e>
 8006a90:	2302      	movs	r3, #2
 8006a92:	e06e      	b.n	8006b72 <HAL_UART_Transmit+0x11c>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2221      	movs	r2, #33	; 0x21
 8006aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006aaa:	f7fc fac9 	bl	8003040 <HAL_GetTick>
 8006aae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	88fa      	ldrh	r2, [r7, #6]
 8006ab4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	88fa      	ldrh	r2, [r7, #6]
 8006aba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac4:	d108      	bne.n	8006ad8 <HAL_UART_Transmit+0x82>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d104      	bne.n	8006ad8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	61bb      	str	r3, [r7, #24]
 8006ad6:	e003      	b.n	8006ae0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006adc:	2300      	movs	r3, #0
 8006ade:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006ae8:	e02a      	b.n	8006b40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	2200      	movs	r2, #0
 8006af2:	2180      	movs	r1, #128	; 0x80
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 fb63 	bl	80071c0 <UART_WaitOnFlagUntilTimeout>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e036      	b.n	8006b72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10b      	bne.n	8006b22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	3302      	adds	r3, #2
 8006b1e:	61bb      	str	r3, [r7, #24]
 8006b20:	e007      	b.n	8006b32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	781a      	ldrb	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1cf      	bne.n	8006aea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2200      	movs	r2, #0
 8006b52:	2140      	movs	r1, #64	; 0x40
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 fb33 	bl	80071c0 <UART_WaitOnFlagUntilTimeout>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e006      	b.n	8006b72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2220      	movs	r2, #32
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	e000      	b.n	8006b72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006b70:	2302      	movs	r3, #2
  }
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3720      	adds	r7, #32
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	60f8      	str	r0, [r7, #12]
 8006b82:	60b9      	str	r1, [r7, #8]
 8006b84:	4613      	mov	r3, r2
 8006b86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	d130      	bne.n	8006bf6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d002      	beq.n	8006ba0 <HAL_UART_Transmit_IT+0x26>
 8006b9a:	88fb      	ldrh	r3, [r7, #6]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e029      	b.n	8006bf8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d101      	bne.n	8006bb2 <HAL_UART_Transmit_IT+0x38>
 8006bae:	2302      	movs	r3, #2
 8006bb0:	e022      	b.n	8006bf8 <HAL_UART_Transmit_IT+0x7e>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	88fa      	ldrh	r2, [r7, #6]
 8006bc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	88fa      	ldrh	r2, [r7, #6]
 8006bca:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2221      	movs	r2, #33	; 0x21
 8006bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68da      	ldr	r2, [r3, #12]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bf0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	e000      	b.n	8006bf8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006bf6:	2302      	movs	r3, #2
  }
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b20      	cmp	r3, #32
 8006c1c:	d11d      	bne.n	8006c5a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d002      	beq.n	8006c2a <HAL_UART_Receive_IT+0x26>
 8006c24:	88fb      	ldrh	r3, [r7, #6]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d101      	bne.n	8006c2e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e016      	b.n	8006c5c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d101      	bne.n	8006c3c <HAL_UART_Receive_IT+0x38>
 8006c38:	2302      	movs	r3, #2
 8006c3a:	e00f      	b.n	8006c5c <HAL_UART_Receive_IT+0x58>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006c4a:	88fb      	ldrh	r3, [r7, #6]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	68b9      	ldr	r1, [r7, #8]
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 fb23 	bl	800729c <UART_Start_Receive_IT>
 8006c56:	4603      	mov	r3, r0
 8006c58:	e000      	b.n	8006c5c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006c5a:	2302      	movs	r3, #2
  }
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b0ba      	sub	sp, #232	; 0xe8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006c90:	2300      	movs	r3, #0
 8006c92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c9a:	f003 030f 	and.w	r3, r3, #15
 8006c9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006ca2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10f      	bne.n	8006cca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cae:	f003 0320 	and.w	r3, r3, #32
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d009      	beq.n	8006cca <HAL_UART_IRQHandler+0x66>
 8006cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fc07 	bl	80074d6 <UART_Receive_IT>
      return;
 8006cc8:	e256      	b.n	8007178 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006cca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 80de 	beq.w	8006e90 <HAL_UART_IRQHandler+0x22c>
 8006cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d106      	bne.n	8006cee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ce4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 80d1 	beq.w	8006e90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00b      	beq.n	8006d12 <HAL_UART_IRQHandler+0xae>
 8006cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d005      	beq.n	8006d12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0a:	f043 0201 	orr.w	r2, r3, #1
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d16:	f003 0304 	and.w	r3, r3, #4
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00b      	beq.n	8006d36 <HAL_UART_IRQHandler+0xd2>
 8006d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d005      	beq.n	8006d36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2e:	f043 0202 	orr.w	r2, r3, #2
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3a:	f003 0302 	and.w	r3, r3, #2
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00b      	beq.n	8006d5a <HAL_UART_IRQHandler+0xf6>
 8006d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d005      	beq.n	8006d5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	f043 0204 	orr.w	r2, r3, #4
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d5e:	f003 0308 	and.w	r3, r3, #8
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d011      	beq.n	8006d8a <HAL_UART_IRQHandler+0x126>
 8006d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d6a:	f003 0320 	and.w	r3, r3, #32
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d105      	bne.n	8006d7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d005      	beq.n	8006d8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d82:	f043 0208 	orr.w	r2, r3, #8
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 81ed 	beq.w	800716e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d98:	f003 0320 	and.w	r3, r3, #32
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d008      	beq.n	8006db2 <HAL_UART_IRQHandler+0x14e>
 8006da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006da4:	f003 0320 	and.w	r3, r3, #32
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fb92 	bl	80074d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dbc:	2b40      	cmp	r3, #64	; 0x40
 8006dbe:	bf0c      	ite	eq
 8006dc0:	2301      	moveq	r3, #1
 8006dc2:	2300      	movne	r3, #0
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dce:	f003 0308 	and.w	r3, r3, #8
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d103      	bne.n	8006dde <HAL_UART_IRQHandler+0x17a>
 8006dd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d04f      	beq.n	8006e7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fa9a 	bl	8007318 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dee:	2b40      	cmp	r3, #64	; 0x40
 8006df0:	d141      	bne.n	8006e76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3314      	adds	r3, #20
 8006df8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e00:	e853 3f00 	ldrex	r3, [r3]
 8006e04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	3314      	adds	r3, #20
 8006e1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e2e:	e841 2300 	strex	r3, r2, [r1]
 8006e32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1d9      	bne.n	8006df2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d013      	beq.n	8006e6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4a:	4a7d      	ldr	r2, [pc, #500]	; (8007040 <HAL_UART_IRQHandler+0x3dc>)
 8006e4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fc faa5 	bl	80033a2 <HAL_DMA_Abort_IT>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d016      	beq.n	8006e8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e68:	4610      	mov	r0, r2
 8006e6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e6c:	e00e      	b.n	8006e8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f990 	bl	8007194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e74:	e00a      	b.n	8006e8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f98c 	bl	8007194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e7c:	e006      	b.n	8006e8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f988 	bl	8007194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006e8a:	e170      	b.n	800716e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e8c:	bf00      	nop
    return;
 8006e8e:	e16e      	b.n	800716e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	f040 814a 	bne.w	800712e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e9e:	f003 0310 	and.w	r3, r3, #16
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 8143 	beq.w	800712e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eac:	f003 0310 	and.w	r3, r3, #16
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 813c 	beq.w	800712e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60bb      	str	r3, [r7, #8]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	60bb      	str	r3, [r7, #8]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	60bb      	str	r3, [r7, #8]
 8006eca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed6:	2b40      	cmp	r3, #64	; 0x40
 8006ed8:	f040 80b4 	bne.w	8007044 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ee8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 8140 	beq.w	8007172 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ef6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006efa:	429a      	cmp	r2, r3
 8006efc:	f080 8139 	bcs.w	8007172 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f12:	f000 8088 	beq.w	8007026 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	330c      	adds	r3, #12
 8006f1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f24:	e853 3f00 	ldrex	r3, [r3]
 8006f28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	330c      	adds	r3, #12
 8006f3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006f42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f52:	e841 2300 	strex	r3, r2, [r1]
 8006f56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1d9      	bne.n	8006f16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	3314      	adds	r3, #20
 8006f68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f6c:	e853 3f00 	ldrex	r3, [r3]
 8006f70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f74:	f023 0301 	bic.w	r3, r3, #1
 8006f78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3314      	adds	r3, #20
 8006f82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f92:	e841 2300 	strex	r3, r2, [r1]
 8006f96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1e1      	bne.n	8006f62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3314      	adds	r3, #20
 8006fa4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fa8:	e853 3f00 	ldrex	r3, [r3]
 8006fac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3314      	adds	r3, #20
 8006fbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006fc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006fc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006fca:	e841 2300 	strex	r3, r2, [r1]
 8006fce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1e3      	bne.n	8006f9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	330c      	adds	r3, #12
 8006fea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fee:	e853 3f00 	ldrex	r3, [r3]
 8006ff2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ff6:	f023 0310 	bic.w	r3, r3, #16
 8006ffa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	330c      	adds	r3, #12
 8007004:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007008:	65ba      	str	r2, [r7, #88]	; 0x58
 800700a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800700e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007010:	e841 2300 	strex	r3, r2, [r1]
 8007014:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1e3      	bne.n	8006fe4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007020:	4618      	mov	r0, r3
 8007022:	f7fc f94e 	bl	80032c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800702e:	b29b      	uxth	r3, r3
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	b29b      	uxth	r3, r3
 8007034:	4619      	mov	r1, r3
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f8b6 	bl	80071a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800703c:	e099      	b.n	8007172 <HAL_UART_IRQHandler+0x50e>
 800703e:	bf00      	nop
 8007040:	080073df 	.word	0x080073df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800704c:	b29b      	uxth	r3, r3
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007058:	b29b      	uxth	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	f000 808b 	beq.w	8007176 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007060:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007064:	2b00      	cmp	r3, #0
 8007066:	f000 8086 	beq.w	8007176 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	330c      	adds	r3, #12
 8007070:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	e853 3f00 	ldrex	r3, [r3]
 8007078:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800707a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007080:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	330c      	adds	r3, #12
 800708a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800708e:	647a      	str	r2, [r7, #68]	; 0x44
 8007090:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007092:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007094:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007096:	e841 2300 	strex	r3, r2, [r1]
 800709a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800709c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e3      	bne.n	800706a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	3314      	adds	r3, #20
 80070a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	e853 3f00 	ldrex	r3, [r3]
 80070b0:	623b      	str	r3, [r7, #32]
   return(result);
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	f023 0301 	bic.w	r3, r3, #1
 80070b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	3314      	adds	r3, #20
 80070c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80070c6:	633a      	str	r2, [r7, #48]	; 0x30
 80070c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ce:	e841 2300 	strex	r3, r2, [r1]
 80070d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1e3      	bne.n	80070a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2220      	movs	r2, #32
 80070de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	330c      	adds	r3, #12
 80070ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	e853 3f00 	ldrex	r3, [r3]
 80070f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f023 0310 	bic.w	r3, r3, #16
 80070fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	330c      	adds	r3, #12
 8007108:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800710c:	61fa      	str	r2, [r7, #28]
 800710e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007110:	69b9      	ldr	r1, [r7, #24]
 8007112:	69fa      	ldr	r2, [r7, #28]
 8007114:	e841 2300 	strex	r3, r2, [r1]
 8007118:	617b      	str	r3, [r7, #20]
   return(result);
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1e3      	bne.n	80070e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007120:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007124:	4619      	mov	r1, r3
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f83e 	bl	80071a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800712c:	e023      	b.n	8007176 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800712e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007136:	2b00      	cmp	r3, #0
 8007138:	d009      	beq.n	800714e <HAL_UART_IRQHandler+0x4ea>
 800713a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800713e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007142:	2b00      	cmp	r3, #0
 8007144:	d003      	beq.n	800714e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f95d 	bl	8007406 <UART_Transmit_IT>
    return;
 800714c:	e014      	b.n	8007178 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800714e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00e      	beq.n	8007178 <HAL_UART_IRQHandler+0x514>
 800715a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800715e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007162:	2b00      	cmp	r3, #0
 8007164:	d008      	beq.n	8007178 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f99d 	bl	80074a6 <UART_EndTransmit_IT>
    return;
 800716c:	e004      	b.n	8007178 <HAL_UART_IRQHandler+0x514>
    return;
 800716e:	bf00      	nop
 8007170:	e002      	b.n	8007178 <HAL_UART_IRQHandler+0x514>
      return;
 8007172:	bf00      	nop
 8007174:	e000      	b.n	8007178 <HAL_UART_IRQHandler+0x514>
      return;
 8007176:	bf00      	nop
  }
}
 8007178:	37e8      	adds	r7, #232	; 0xe8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop

08007180 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	460b      	mov	r3, r1
 80071b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b090      	sub	sp, #64	; 0x40
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	603b      	str	r3, [r7, #0]
 80071cc:	4613      	mov	r3, r2
 80071ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071d0:	e050      	b.n	8007274 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d8:	d04c      	beq.n	8007274 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80071da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d007      	beq.n	80071f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80071e0:	f7fb ff2e 	bl	8003040 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d241      	bcs.n	8007274 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	330c      	adds	r3, #12
 80071f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fa:	e853 3f00 	ldrex	r3, [r3]
 80071fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	330c      	adds	r3, #12
 800720e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007210:	637a      	str	r2, [r7, #52]	; 0x34
 8007212:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007214:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007216:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007218:	e841 2300 	strex	r3, r2, [r1]
 800721c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800721e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1e5      	bne.n	80071f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3314      	adds	r3, #20
 800722a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	e853 3f00 	ldrex	r3, [r3]
 8007232:	613b      	str	r3, [r7, #16]
   return(result);
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	f023 0301 	bic.w	r3, r3, #1
 800723a:	63bb      	str	r3, [r7, #56]	; 0x38
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3314      	adds	r3, #20
 8007242:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007244:	623a      	str	r2, [r7, #32]
 8007246:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007248:	69f9      	ldr	r1, [r7, #28]
 800724a:	6a3a      	ldr	r2, [r7, #32]
 800724c:	e841 2300 	strex	r3, r2, [r1]
 8007250:	61bb      	str	r3, [r7, #24]
   return(result);
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1e5      	bne.n	8007224 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2220      	movs	r2, #32
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2220      	movs	r2, #32
 8007264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e00f      	b.n	8007294 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	4013      	ands	r3, r2
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	429a      	cmp	r2, r3
 8007282:	bf0c      	ite	eq
 8007284:	2301      	moveq	r3, #1
 8007286:	2300      	movne	r3, #0
 8007288:	b2db      	uxtb	r3, r3
 800728a:	461a      	mov	r2, r3
 800728c:	79fb      	ldrb	r3, [r7, #7]
 800728e:	429a      	cmp	r2, r3
 8007290:	d09f      	beq.n	80071d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3740      	adds	r7, #64	; 0x40
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	4613      	mov	r3, r2
 80072a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	88fa      	ldrh	r2, [r7, #6]
 80072b4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	88fa      	ldrh	r2, [r7, #6]
 80072ba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2222      	movs	r2, #34	; 0x22
 80072c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d007      	beq.n	80072ea <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68da      	ldr	r2, [r3, #12]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072e8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	695a      	ldr	r2, [r3, #20]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f042 0201 	orr.w	r2, r2, #1
 80072f8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68da      	ldr	r2, [r3, #12]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f042 0220 	orr.w	r2, r2, #32
 8007308:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007318:	b480      	push	{r7}
 800731a:	b095      	sub	sp, #84	; 0x54
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	330c      	adds	r3, #12
 8007326:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800732a:	e853 3f00 	ldrex	r3, [r3]
 800732e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007332:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	330c      	adds	r3, #12
 800733e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007340:	643a      	str	r2, [r7, #64]	; 0x40
 8007342:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007344:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007346:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007348:	e841 2300 	strex	r3, r2, [r1]
 800734c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800734e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1e5      	bne.n	8007320 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3314      	adds	r3, #20
 800735a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	e853 3f00 	ldrex	r3, [r3]
 8007362:	61fb      	str	r3, [r7, #28]
   return(result);
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	f023 0301 	bic.w	r3, r3, #1
 800736a:	64bb      	str	r3, [r7, #72]	; 0x48
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3314      	adds	r3, #20
 8007372:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007374:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007376:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800737a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800737c:	e841 2300 	strex	r3, r2, [r1]
 8007380:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e5      	bne.n	8007354 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738c:	2b01      	cmp	r3, #1
 800738e:	d119      	bne.n	80073c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	330c      	adds	r3, #12
 8007396:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	e853 3f00 	ldrex	r3, [r3]
 800739e:	60bb      	str	r3, [r7, #8]
   return(result);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	f023 0310 	bic.w	r3, r3, #16
 80073a6:	647b      	str	r3, [r7, #68]	; 0x44
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	330c      	adds	r3, #12
 80073ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073b0:	61ba      	str	r2, [r7, #24]
 80073b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b4:	6979      	ldr	r1, [r7, #20]
 80073b6:	69ba      	ldr	r2, [r7, #24]
 80073b8:	e841 2300 	strex	r3, r2, [r1]
 80073bc:	613b      	str	r3, [r7, #16]
   return(result);
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1e5      	bne.n	8007390 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2220      	movs	r2, #32
 80073c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80073d2:	bf00      	nop
 80073d4:	3754      	adds	r7, #84	; 0x54
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b084      	sub	sp, #16
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f7ff fecb 	bl	8007194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073fe:	bf00      	nop
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007406:	b480      	push	{r7}
 8007408:	b085      	sub	sp, #20
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b21      	cmp	r3, #33	; 0x21
 8007418:	d13e      	bne.n	8007498 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007422:	d114      	bne.n	800744e <UART_Transmit_IT+0x48>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d110      	bne.n	800744e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007440:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	1c9a      	adds	r2, r3, #2
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	621a      	str	r2, [r3, #32]
 800744c:	e008      	b.n	8007460 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	1c59      	adds	r1, r3, #1
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	6211      	str	r1, [r2, #32]
 8007458:	781a      	ldrb	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007464:	b29b      	uxth	r3, r3
 8007466:	3b01      	subs	r3, #1
 8007468:	b29b      	uxth	r3, r3
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	4619      	mov	r1, r3
 800746e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10f      	bne.n	8007494 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68da      	ldr	r2, [r3, #12]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007482:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68da      	ldr	r2, [r3, #12]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007492:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	e000      	b.n	800749a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007498:	2302      	movs	r3, #2
  }
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b082      	sub	sp, #8
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68da      	ldr	r2, [r3, #12]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2220      	movs	r2, #32
 80074c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7ff fe5a 	bl	8007180 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b08c      	sub	sp, #48	; 0x30
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b22      	cmp	r3, #34	; 0x22
 80074e8:	f040 80ab 	bne.w	8007642 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074f4:	d117      	bne.n	8007526 <UART_Receive_IT+0x50>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d113      	bne.n	8007526 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80074fe:	2300      	movs	r3, #0
 8007500:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007506:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	b29b      	uxth	r3, r3
 8007510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007514:	b29a      	uxth	r2, r3
 8007516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007518:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751e:	1c9a      	adds	r2, r3, #2
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	629a      	str	r2, [r3, #40]	; 0x28
 8007524:	e026      	b.n	8007574 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800752c:	2300      	movs	r3, #0
 800752e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007538:	d007      	beq.n	800754a <UART_Receive_IT+0x74>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10a      	bne.n	8007558 <UART_Receive_IT+0x82>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d106      	bne.n	8007558 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	b2da      	uxtb	r2, r3
 8007552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007554:	701a      	strb	r2, [r3, #0]
 8007556:	e008      	b.n	800756a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	b2db      	uxtb	r3, r3
 8007560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007564:	b2da      	uxtb	r2, r3
 8007566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007568:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756e:	1c5a      	adds	r2, r3, #1
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007578:	b29b      	uxth	r3, r3
 800757a:	3b01      	subs	r3, #1
 800757c:	b29b      	uxth	r3, r3
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	4619      	mov	r1, r3
 8007582:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007584:	2b00      	cmp	r3, #0
 8007586:	d15a      	bne.n	800763e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68da      	ldr	r2, [r3, #12]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f022 0220 	bic.w	r2, r2, #32
 8007596:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68da      	ldr	r2, [r3, #12]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	695a      	ldr	r2, [r3, #20]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f022 0201 	bic.w	r2, r2, #1
 80075b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2220      	movs	r2, #32
 80075bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d135      	bne.n	8007634 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	330c      	adds	r3, #12
 80075d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	e853 3f00 	ldrex	r3, [r3]
 80075dc:	613b      	str	r3, [r7, #16]
   return(result);
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	f023 0310 	bic.w	r3, r3, #16
 80075e4:	627b      	str	r3, [r7, #36]	; 0x24
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	330c      	adds	r3, #12
 80075ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ee:	623a      	str	r2, [r7, #32]
 80075f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f2:	69f9      	ldr	r1, [r7, #28]
 80075f4:	6a3a      	ldr	r2, [r7, #32]
 80075f6:	e841 2300 	strex	r3, r2, [r1]
 80075fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1e5      	bne.n	80075ce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0310 	and.w	r3, r3, #16
 800760c:	2b10      	cmp	r3, #16
 800760e:	d10a      	bne.n	8007626 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007610:	2300      	movs	r3, #0
 8007612:	60fb      	str	r3, [r7, #12]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800762a:	4619      	mov	r1, r3
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f7ff fdbb 	bl	80071a8 <HAL_UARTEx_RxEventCallback>
 8007632:	e002      	b.n	800763a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f7fa fe7f 	bl	8002338 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	e002      	b.n	8007644 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	e000      	b.n	8007644 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007642:	2302      	movs	r3, #2
  }
}
 8007644:	4618      	mov	r0, r3
 8007646:	3730      	adds	r7, #48	; 0x30
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800764c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007650:	b0c0      	sub	sp, #256	; 0x100
 8007652:	af00      	add	r7, sp, #0
 8007654:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007668:	68d9      	ldr	r1, [r3, #12]
 800766a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	ea40 0301 	orr.w	r3, r0, r1
 8007674:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800767a:	689a      	ldr	r2, [r3, #8]
 800767c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	431a      	orrs	r2, r3
 8007684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	431a      	orrs	r2, r3
 800768c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	4313      	orrs	r3, r2
 8007694:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80076a4:	f021 010c 	bic.w	r1, r1, #12
 80076a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076b2:	430b      	orrs	r3, r1
 80076b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80076c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076c6:	6999      	ldr	r1, [r3, #24]
 80076c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	ea40 0301 	orr.w	r3, r0, r1
 80076d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80076d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	4b8f      	ldr	r3, [pc, #572]	; (8007918 <UART_SetConfig+0x2cc>)
 80076dc:	429a      	cmp	r2, r3
 80076de:	d005      	beq.n	80076ec <UART_SetConfig+0xa0>
 80076e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	4b8d      	ldr	r3, [pc, #564]	; (800791c <UART_SetConfig+0x2d0>)
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d104      	bne.n	80076f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80076ec:	f7fd fc76 	bl	8004fdc <HAL_RCC_GetPCLK2Freq>
 80076f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80076f4:	e003      	b.n	80076fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076f6:	f7fd fc5d 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 80076fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007708:	f040 810c 	bne.w	8007924 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800770c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007710:	2200      	movs	r2, #0
 8007712:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007716:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800771a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800771e:	4622      	mov	r2, r4
 8007720:	462b      	mov	r3, r5
 8007722:	1891      	adds	r1, r2, r2
 8007724:	65b9      	str	r1, [r7, #88]	; 0x58
 8007726:	415b      	adcs	r3, r3
 8007728:	65fb      	str	r3, [r7, #92]	; 0x5c
 800772a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800772e:	4621      	mov	r1, r4
 8007730:	eb12 0801 	adds.w	r8, r2, r1
 8007734:	4629      	mov	r1, r5
 8007736:	eb43 0901 	adc.w	r9, r3, r1
 800773a:	f04f 0200 	mov.w	r2, #0
 800773e:	f04f 0300 	mov.w	r3, #0
 8007742:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007746:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800774a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800774e:	4690      	mov	r8, r2
 8007750:	4699      	mov	r9, r3
 8007752:	4623      	mov	r3, r4
 8007754:	eb18 0303 	adds.w	r3, r8, r3
 8007758:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800775c:	462b      	mov	r3, r5
 800775e:	eb49 0303 	adc.w	r3, r9, r3
 8007762:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007772:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007776:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800777a:	460b      	mov	r3, r1
 800777c:	18db      	adds	r3, r3, r3
 800777e:	653b      	str	r3, [r7, #80]	; 0x50
 8007780:	4613      	mov	r3, r2
 8007782:	eb42 0303 	adc.w	r3, r2, r3
 8007786:	657b      	str	r3, [r7, #84]	; 0x54
 8007788:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800778c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007790:	f7f9 f9f4 	bl	8000b7c <__aeabi_uldivmod>
 8007794:	4602      	mov	r2, r0
 8007796:	460b      	mov	r3, r1
 8007798:	4b61      	ldr	r3, [pc, #388]	; (8007920 <UART_SetConfig+0x2d4>)
 800779a:	fba3 2302 	umull	r2, r3, r3, r2
 800779e:	095b      	lsrs	r3, r3, #5
 80077a0:	011c      	lsls	r4, r3, #4
 80077a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077a6:	2200      	movs	r2, #0
 80077a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80077b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80077b4:	4642      	mov	r2, r8
 80077b6:	464b      	mov	r3, r9
 80077b8:	1891      	adds	r1, r2, r2
 80077ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80077bc:	415b      	adcs	r3, r3
 80077be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80077c4:	4641      	mov	r1, r8
 80077c6:	eb12 0a01 	adds.w	sl, r2, r1
 80077ca:	4649      	mov	r1, r9
 80077cc:	eb43 0b01 	adc.w	fp, r3, r1
 80077d0:	f04f 0200 	mov.w	r2, #0
 80077d4:	f04f 0300 	mov.w	r3, #0
 80077d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80077dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80077e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077e4:	4692      	mov	sl, r2
 80077e6:	469b      	mov	fp, r3
 80077e8:	4643      	mov	r3, r8
 80077ea:	eb1a 0303 	adds.w	r3, sl, r3
 80077ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077f2:	464b      	mov	r3, r9
 80077f4:	eb4b 0303 	adc.w	r3, fp, r3
 80077f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80077fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007808:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800780c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007810:	460b      	mov	r3, r1
 8007812:	18db      	adds	r3, r3, r3
 8007814:	643b      	str	r3, [r7, #64]	; 0x40
 8007816:	4613      	mov	r3, r2
 8007818:	eb42 0303 	adc.w	r3, r2, r3
 800781c:	647b      	str	r3, [r7, #68]	; 0x44
 800781e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007822:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007826:	f7f9 f9a9 	bl	8000b7c <__aeabi_uldivmod>
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	4611      	mov	r1, r2
 8007830:	4b3b      	ldr	r3, [pc, #236]	; (8007920 <UART_SetConfig+0x2d4>)
 8007832:	fba3 2301 	umull	r2, r3, r3, r1
 8007836:	095b      	lsrs	r3, r3, #5
 8007838:	2264      	movs	r2, #100	; 0x64
 800783a:	fb02 f303 	mul.w	r3, r2, r3
 800783e:	1acb      	subs	r3, r1, r3
 8007840:	00db      	lsls	r3, r3, #3
 8007842:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007846:	4b36      	ldr	r3, [pc, #216]	; (8007920 <UART_SetConfig+0x2d4>)
 8007848:	fba3 2302 	umull	r2, r3, r3, r2
 800784c:	095b      	lsrs	r3, r3, #5
 800784e:	005b      	lsls	r3, r3, #1
 8007850:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007854:	441c      	add	r4, r3
 8007856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800785a:	2200      	movs	r2, #0
 800785c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007860:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007864:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007868:	4642      	mov	r2, r8
 800786a:	464b      	mov	r3, r9
 800786c:	1891      	adds	r1, r2, r2
 800786e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007870:	415b      	adcs	r3, r3
 8007872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007874:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007878:	4641      	mov	r1, r8
 800787a:	1851      	adds	r1, r2, r1
 800787c:	6339      	str	r1, [r7, #48]	; 0x30
 800787e:	4649      	mov	r1, r9
 8007880:	414b      	adcs	r3, r1
 8007882:	637b      	str	r3, [r7, #52]	; 0x34
 8007884:	f04f 0200 	mov.w	r2, #0
 8007888:	f04f 0300 	mov.w	r3, #0
 800788c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007890:	4659      	mov	r1, fp
 8007892:	00cb      	lsls	r3, r1, #3
 8007894:	4651      	mov	r1, sl
 8007896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800789a:	4651      	mov	r1, sl
 800789c:	00ca      	lsls	r2, r1, #3
 800789e:	4610      	mov	r0, r2
 80078a0:	4619      	mov	r1, r3
 80078a2:	4603      	mov	r3, r0
 80078a4:	4642      	mov	r2, r8
 80078a6:	189b      	adds	r3, r3, r2
 80078a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078ac:	464b      	mov	r3, r9
 80078ae:	460a      	mov	r2, r1
 80078b0:	eb42 0303 	adc.w	r3, r2, r3
 80078b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80078c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80078c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80078cc:	460b      	mov	r3, r1
 80078ce:	18db      	adds	r3, r3, r3
 80078d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80078d2:	4613      	mov	r3, r2
 80078d4:	eb42 0303 	adc.w	r3, r2, r3
 80078d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80078de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80078e2:	f7f9 f94b 	bl	8000b7c <__aeabi_uldivmod>
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	4b0d      	ldr	r3, [pc, #52]	; (8007920 <UART_SetConfig+0x2d4>)
 80078ec:	fba3 1302 	umull	r1, r3, r3, r2
 80078f0:	095b      	lsrs	r3, r3, #5
 80078f2:	2164      	movs	r1, #100	; 0x64
 80078f4:	fb01 f303 	mul.w	r3, r1, r3
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	3332      	adds	r3, #50	; 0x32
 80078fe:	4a08      	ldr	r2, [pc, #32]	; (8007920 <UART_SetConfig+0x2d4>)
 8007900:	fba2 2303 	umull	r2, r3, r2, r3
 8007904:	095b      	lsrs	r3, r3, #5
 8007906:	f003 0207 	and.w	r2, r3, #7
 800790a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4422      	add	r2, r4
 8007912:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007914:	e105      	b.n	8007b22 <UART_SetConfig+0x4d6>
 8007916:	bf00      	nop
 8007918:	40011000 	.word	0x40011000
 800791c:	40011400 	.word	0x40011400
 8007920:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007928:	2200      	movs	r2, #0
 800792a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800792e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007932:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007936:	4642      	mov	r2, r8
 8007938:	464b      	mov	r3, r9
 800793a:	1891      	adds	r1, r2, r2
 800793c:	6239      	str	r1, [r7, #32]
 800793e:	415b      	adcs	r3, r3
 8007940:	627b      	str	r3, [r7, #36]	; 0x24
 8007942:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007946:	4641      	mov	r1, r8
 8007948:	1854      	adds	r4, r2, r1
 800794a:	4649      	mov	r1, r9
 800794c:	eb43 0501 	adc.w	r5, r3, r1
 8007950:	f04f 0200 	mov.w	r2, #0
 8007954:	f04f 0300 	mov.w	r3, #0
 8007958:	00eb      	lsls	r3, r5, #3
 800795a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800795e:	00e2      	lsls	r2, r4, #3
 8007960:	4614      	mov	r4, r2
 8007962:	461d      	mov	r5, r3
 8007964:	4643      	mov	r3, r8
 8007966:	18e3      	adds	r3, r4, r3
 8007968:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800796c:	464b      	mov	r3, r9
 800796e:	eb45 0303 	adc.w	r3, r5, r3
 8007972:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007982:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007986:	f04f 0200 	mov.w	r2, #0
 800798a:	f04f 0300 	mov.w	r3, #0
 800798e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007992:	4629      	mov	r1, r5
 8007994:	008b      	lsls	r3, r1, #2
 8007996:	4621      	mov	r1, r4
 8007998:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800799c:	4621      	mov	r1, r4
 800799e:	008a      	lsls	r2, r1, #2
 80079a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80079a4:	f7f9 f8ea 	bl	8000b7c <__aeabi_uldivmod>
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4b60      	ldr	r3, [pc, #384]	; (8007b30 <UART_SetConfig+0x4e4>)
 80079ae:	fba3 2302 	umull	r2, r3, r3, r2
 80079b2:	095b      	lsrs	r3, r3, #5
 80079b4:	011c      	lsls	r4, r3, #4
 80079b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079ba:	2200      	movs	r2, #0
 80079bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80079c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80079c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80079c8:	4642      	mov	r2, r8
 80079ca:	464b      	mov	r3, r9
 80079cc:	1891      	adds	r1, r2, r2
 80079ce:	61b9      	str	r1, [r7, #24]
 80079d0:	415b      	adcs	r3, r3
 80079d2:	61fb      	str	r3, [r7, #28]
 80079d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079d8:	4641      	mov	r1, r8
 80079da:	1851      	adds	r1, r2, r1
 80079dc:	6139      	str	r1, [r7, #16]
 80079de:	4649      	mov	r1, r9
 80079e0:	414b      	adcs	r3, r1
 80079e2:	617b      	str	r3, [r7, #20]
 80079e4:	f04f 0200 	mov.w	r2, #0
 80079e8:	f04f 0300 	mov.w	r3, #0
 80079ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079f0:	4659      	mov	r1, fp
 80079f2:	00cb      	lsls	r3, r1, #3
 80079f4:	4651      	mov	r1, sl
 80079f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079fa:	4651      	mov	r1, sl
 80079fc:	00ca      	lsls	r2, r1, #3
 80079fe:	4610      	mov	r0, r2
 8007a00:	4619      	mov	r1, r3
 8007a02:	4603      	mov	r3, r0
 8007a04:	4642      	mov	r2, r8
 8007a06:	189b      	adds	r3, r3, r2
 8007a08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a0c:	464b      	mov	r3, r9
 8007a0e:	460a      	mov	r2, r1
 8007a10:	eb42 0303 	adc.w	r3, r2, r3
 8007a14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007a24:	f04f 0200 	mov.w	r2, #0
 8007a28:	f04f 0300 	mov.w	r3, #0
 8007a2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007a30:	4649      	mov	r1, r9
 8007a32:	008b      	lsls	r3, r1, #2
 8007a34:	4641      	mov	r1, r8
 8007a36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a3a:	4641      	mov	r1, r8
 8007a3c:	008a      	lsls	r2, r1, #2
 8007a3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007a42:	f7f9 f89b 	bl	8000b7c <__aeabi_uldivmod>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4b39      	ldr	r3, [pc, #228]	; (8007b30 <UART_SetConfig+0x4e4>)
 8007a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a50:	095b      	lsrs	r3, r3, #5
 8007a52:	2164      	movs	r1, #100	; 0x64
 8007a54:	fb01 f303 	mul.w	r3, r1, r3
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	011b      	lsls	r3, r3, #4
 8007a5c:	3332      	adds	r3, #50	; 0x32
 8007a5e:	4a34      	ldr	r2, [pc, #208]	; (8007b30 <UART_SetConfig+0x4e4>)
 8007a60:	fba2 2303 	umull	r2, r3, r2, r3
 8007a64:	095b      	lsrs	r3, r3, #5
 8007a66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a6a:	441c      	add	r4, r3
 8007a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a70:	2200      	movs	r2, #0
 8007a72:	673b      	str	r3, [r7, #112]	; 0x70
 8007a74:	677a      	str	r2, [r7, #116]	; 0x74
 8007a76:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007a7a:	4642      	mov	r2, r8
 8007a7c:	464b      	mov	r3, r9
 8007a7e:	1891      	adds	r1, r2, r2
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	415b      	adcs	r3, r3
 8007a84:	60fb      	str	r3, [r7, #12]
 8007a86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a8a:	4641      	mov	r1, r8
 8007a8c:	1851      	adds	r1, r2, r1
 8007a8e:	6039      	str	r1, [r7, #0]
 8007a90:	4649      	mov	r1, r9
 8007a92:	414b      	adcs	r3, r1
 8007a94:	607b      	str	r3, [r7, #4]
 8007a96:	f04f 0200 	mov.w	r2, #0
 8007a9a:	f04f 0300 	mov.w	r3, #0
 8007a9e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007aa2:	4659      	mov	r1, fp
 8007aa4:	00cb      	lsls	r3, r1, #3
 8007aa6:	4651      	mov	r1, sl
 8007aa8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007aac:	4651      	mov	r1, sl
 8007aae:	00ca      	lsls	r2, r1, #3
 8007ab0:	4610      	mov	r0, r2
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	4642      	mov	r2, r8
 8007ab8:	189b      	adds	r3, r3, r2
 8007aba:	66bb      	str	r3, [r7, #104]	; 0x68
 8007abc:	464b      	mov	r3, r9
 8007abe:	460a      	mov	r2, r1
 8007ac0:	eb42 0303 	adc.w	r3, r2, r3
 8007ac4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	663b      	str	r3, [r7, #96]	; 0x60
 8007ad0:	667a      	str	r2, [r7, #100]	; 0x64
 8007ad2:	f04f 0200 	mov.w	r2, #0
 8007ad6:	f04f 0300 	mov.w	r3, #0
 8007ada:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007ade:	4649      	mov	r1, r9
 8007ae0:	008b      	lsls	r3, r1, #2
 8007ae2:	4641      	mov	r1, r8
 8007ae4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ae8:	4641      	mov	r1, r8
 8007aea:	008a      	lsls	r2, r1, #2
 8007aec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007af0:	f7f9 f844 	bl	8000b7c <__aeabi_uldivmod>
 8007af4:	4602      	mov	r2, r0
 8007af6:	460b      	mov	r3, r1
 8007af8:	4b0d      	ldr	r3, [pc, #52]	; (8007b30 <UART_SetConfig+0x4e4>)
 8007afa:	fba3 1302 	umull	r1, r3, r3, r2
 8007afe:	095b      	lsrs	r3, r3, #5
 8007b00:	2164      	movs	r1, #100	; 0x64
 8007b02:	fb01 f303 	mul.w	r3, r1, r3
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	011b      	lsls	r3, r3, #4
 8007b0a:	3332      	adds	r3, #50	; 0x32
 8007b0c:	4a08      	ldr	r2, [pc, #32]	; (8007b30 <UART_SetConfig+0x4e4>)
 8007b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b12:	095b      	lsrs	r3, r3, #5
 8007b14:	f003 020f 	and.w	r2, r3, #15
 8007b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4422      	add	r2, r4
 8007b20:	609a      	str	r2, [r3, #8]
}
 8007b22:	bf00      	nop
 8007b24:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b2e:	bf00      	nop
 8007b30:	51eb851f 	.word	0x51eb851f

08007b34 <__NVIC_SetPriority>:
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	6039      	str	r1, [r7, #0]
 8007b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	db0a      	blt.n	8007b5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	490c      	ldr	r1, [pc, #48]	; (8007b80 <__NVIC_SetPriority+0x4c>)
 8007b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b52:	0112      	lsls	r2, r2, #4
 8007b54:	b2d2      	uxtb	r2, r2
 8007b56:	440b      	add	r3, r1
 8007b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007b5c:	e00a      	b.n	8007b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	4908      	ldr	r1, [pc, #32]	; (8007b84 <__NVIC_SetPriority+0x50>)
 8007b64:	79fb      	ldrb	r3, [r7, #7]
 8007b66:	f003 030f 	and.w	r3, r3, #15
 8007b6a:	3b04      	subs	r3, #4
 8007b6c:	0112      	lsls	r2, r2, #4
 8007b6e:	b2d2      	uxtb	r2, r2
 8007b70:	440b      	add	r3, r1
 8007b72:	761a      	strb	r2, [r3, #24]
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	e000e100 	.word	0xe000e100
 8007b84:	e000ed00 	.word	0xe000ed00

08007b88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	f06f 0004 	mvn.w	r0, #4
 8007b92:	f7ff ffcf 	bl	8007b34 <__NVIC_SetPriority>
#endif
}
 8007b96:	bf00      	nop
 8007b98:	bd80      	pop	{r7, pc}
	...

08007b9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ba2:	f3ef 8305 	mrs	r3, IPSR
 8007ba6:	603b      	str	r3, [r7, #0]
  return(result);
 8007ba8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d003      	beq.n	8007bb6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007bae:	f06f 0305 	mvn.w	r3, #5
 8007bb2:	607b      	str	r3, [r7, #4]
 8007bb4:	e00c      	b.n	8007bd0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007bb6:	4b0a      	ldr	r3, [pc, #40]	; (8007be0 <osKernelInitialize+0x44>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d105      	bne.n	8007bca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007bbe:	4b08      	ldr	r3, [pc, #32]	; (8007be0 <osKernelInitialize+0x44>)
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	607b      	str	r3, [r7, #4]
 8007bc8:	e002      	b.n	8007bd0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007bca:	f04f 33ff 	mov.w	r3, #4294967295
 8007bce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007bd0:	687b      	ldr	r3, [r7, #4]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	370c      	adds	r7, #12
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	200003bc 	.word	0x200003bc

08007be4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bea:	f3ef 8305 	mrs	r3, IPSR
 8007bee:	603b      	str	r3, [r7, #0]
  return(result);
 8007bf0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <osKernelStart+0x1a>
    stat = osErrorISR;
 8007bf6:	f06f 0305 	mvn.w	r3, #5
 8007bfa:	607b      	str	r3, [r7, #4]
 8007bfc:	e010      	b.n	8007c20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007bfe:	4b0b      	ldr	r3, [pc, #44]	; (8007c2c <osKernelStart+0x48>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d109      	bne.n	8007c1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007c06:	f7ff ffbf 	bl	8007b88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007c0a:	4b08      	ldr	r3, [pc, #32]	; (8007c2c <osKernelStart+0x48>)
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007c10:	f001 f866 	bl	8008ce0 <vTaskStartScheduler>
      stat = osOK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	607b      	str	r3, [r7, #4]
 8007c18:	e002      	b.n	8007c20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c20:	687b      	ldr	r3, [r7, #4]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	200003bc 	.word	0x200003bc

08007c30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b08e      	sub	sp, #56	; 0x38
 8007c34:	af04      	add	r7, sp, #16
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c40:	f3ef 8305 	mrs	r3, IPSR
 8007c44:	617b      	str	r3, [r7, #20]
  return(result);
 8007c46:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d17f      	bne.n	8007d4c <osThreadNew+0x11c>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d07c      	beq.n	8007d4c <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8007c52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c56:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007c58:	2318      	movs	r3, #24
 8007c5a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007c60:	f04f 33ff 	mov.w	r3, #4294967295
 8007c64:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d045      	beq.n	8007cf8 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <osThreadNew+0x4a>
        name = attr->name;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d008      	beq.n	8007ca0 <osThreadNew+0x70>
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	2b38      	cmp	r3, #56	; 0x38
 8007c92:	d805      	bhi.n	8007ca0 <osThreadNew+0x70>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d001      	beq.n	8007ca4 <osThreadNew+0x74>
        return (NULL);
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	e054      	b.n	8007d4e <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d003      	beq.n	8007cb4 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	089b      	lsrs	r3, r3, #2
 8007cb2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00e      	beq.n	8007cda <osThreadNew+0xaa>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	2b5b      	cmp	r3, #91	; 0x5b
 8007cc2:	d90a      	bls.n	8007cda <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d006      	beq.n	8007cda <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <osThreadNew+0xaa>
        mem = 1;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	61bb      	str	r3, [r7, #24]
 8007cd8:	e010      	b.n	8007cfc <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10c      	bne.n	8007cfc <osThreadNew+0xcc>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d108      	bne.n	8007cfc <osThreadNew+0xcc>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d104      	bne.n	8007cfc <osThreadNew+0xcc>
          mem = 0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61bb      	str	r3, [r7, #24]
 8007cf6:	e001      	b.n	8007cfc <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d110      	bne.n	8007d24 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d0a:	9202      	str	r2, [sp, #8]
 8007d0c:	9301      	str	r3, [sp, #4]
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	6a3a      	ldr	r2, [r7, #32]
 8007d16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 fe0b 	bl	8008934 <xTaskCreateStatic>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	613b      	str	r3, [r7, #16]
 8007d22:	e013      	b.n	8007d4c <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d110      	bne.n	8007d4c <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007d2a:	6a3b      	ldr	r3, [r7, #32]
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	f107 0310 	add.w	r3, r7, #16
 8007d32:	9301      	str	r3, [sp, #4]
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 fe56 	bl	80089ee <xTaskCreate>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d001      	beq.n	8007d4c <osThreadNew+0x11c>
            hTask = NULL;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007d4c:	693b      	ldr	r3, [r7, #16]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3728      	adds	r7, #40	; 0x28
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b084      	sub	sp, #16
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d5e:	f3ef 8305 	mrs	r3, IPSR
 8007d62:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <osDelay+0x1c>
    stat = osErrorISR;
 8007d6a:	f06f 0305 	mvn.w	r3, #5
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	e007      	b.n	8007d82 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d002      	beq.n	8007d82 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 ff7b 	bl	8008c78 <vTaskDelay>
    }
  }

  return (stat);
 8007d82:	68fb      	ldr	r3, [r7, #12]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	4a07      	ldr	r2, [pc, #28]	; (8007db8 <vApplicationGetIdleTaskMemory+0x2c>)
 8007d9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	4a06      	ldr	r2, [pc, #24]	; (8007dbc <vApplicationGetIdleTaskMemory+0x30>)
 8007da2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007daa:	601a      	str	r2, [r3, #0]
}
 8007dac:	bf00      	nop
 8007dae:	3714      	adds	r7, #20
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr
 8007db8:	200003c0 	.word	0x200003c0
 8007dbc:	2000041c 	.word	0x2000041c

08007dc0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4a07      	ldr	r2, [pc, #28]	; (8007dec <vApplicationGetTimerTaskMemory+0x2c>)
 8007dd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	4a06      	ldr	r2, [pc, #24]	; (8007df0 <vApplicationGetTimerTaskMemory+0x30>)
 8007dd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dde:	601a      	str	r2, [r3, #0]
}
 8007de0:	bf00      	nop
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	2000081c 	.word	0x2000081c
 8007df0:	20000878 	.word	0x20000878

08007df4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f103 0208 	add.w	r2, r3, #8
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f04f 32ff 	mov.w	r2, #4294967295
 8007e0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f103 0208 	add.w	r2, r3, #8
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f103 0208 	add.w	r2, r3, #8
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e42:	bf00      	nop
 8007e44:	370c      	adds	r7, #12
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr

08007e4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b085      	sub	sp, #20
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	689a      	ldr	r2, [r3, #8]
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	1c5a      	adds	r2, r3, #1
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	601a      	str	r2, [r3, #0]
}
 8007e8a:	bf00      	nop
 8007e8c:	3714      	adds	r7, #20
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e96:	b480      	push	{r7}
 8007e98:	b085      	sub	sp, #20
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
 8007e9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eac:	d103      	bne.n	8007eb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	e00c      	b.n	8007ed0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	3308      	adds	r3, #8
 8007eba:	60fb      	str	r3, [r7, #12]
 8007ebc:	e002      	b.n	8007ec4 <vListInsert+0x2e>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	60fb      	str	r3, [r7, #12]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d2f6      	bcs.n	8007ebe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	685a      	ldr	r2, [r3, #4]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	683a      	ldr	r2, [r7, #0]
 8007ede:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	1c5a      	adds	r2, r3, #1
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	601a      	str	r2, [r3, #0]
}
 8007efc:	bf00      	nop
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	6892      	ldr	r2, [r2, #8]
 8007f1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	6852      	ldr	r2, [r2, #4]
 8007f28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d103      	bne.n	8007f3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	689a      	ldr	r2, [r3, #8]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	1e5a      	subs	r2, r3, #1
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d10a      	bne.n	8007f86 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007f82:	bf00      	nop
 8007f84:	e7fe      	b.n	8007f84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f86:	f002 f84d 	bl	800a024 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f92:	68f9      	ldr	r1, [r7, #12]
 8007f94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f96:	fb01 f303 	mul.w	r3, r1, r3
 8007f9a:	441a      	add	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	68f9      	ldr	r1, [r7, #12]
 8007fba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fbc:	fb01 f303 	mul.w	r3, r1, r3
 8007fc0:	441a      	add	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	22ff      	movs	r2, #255	; 0xff
 8007fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	22ff      	movs	r2, #255	; 0xff
 8007fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d114      	bne.n	8008006 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d01a      	beq.n	800801a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	3310      	adds	r3, #16
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f001 f903 	bl	80091f4 <xTaskRemoveFromEventList>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d012      	beq.n	800801a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ff4:	4b0c      	ldr	r3, [pc, #48]	; (8008028 <xQueueGenericReset+0xcc>)
 8007ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	f3bf 8f6f 	isb	sy
 8008004:	e009      	b.n	800801a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	3310      	adds	r3, #16
 800800a:	4618      	mov	r0, r3
 800800c:	f7ff fef2 	bl	8007df4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	3324      	adds	r3, #36	; 0x24
 8008014:	4618      	mov	r0, r3
 8008016:	f7ff feed 	bl	8007df4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800801a:	f002 f833 	bl	800a084 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800801e:	2301      	movs	r3, #1
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	e000ed04 	.word	0xe000ed04

0800802c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800802c:	b580      	push	{r7, lr}
 800802e:	b08e      	sub	sp, #56	; 0x38
 8008030:	af02      	add	r7, sp, #8
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
 8008038:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10a      	bne.n	8008056 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008044:	f383 8811 	msr	BASEPRI, r3
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008052:	bf00      	nop
 8008054:	e7fe      	b.n	8008054 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10a      	bne.n	8008072 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800805c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800806e:	bf00      	nop
 8008070:	e7fe      	b.n	8008070 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d002      	beq.n	800807e <xQueueGenericCreateStatic+0x52>
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <xQueueGenericCreateStatic+0x56>
 800807e:	2301      	movs	r3, #1
 8008080:	e000      	b.n	8008084 <xQueueGenericCreateStatic+0x58>
 8008082:	2300      	movs	r3, #0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10a      	bne.n	800809e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	623b      	str	r3, [r7, #32]
}
 800809a:	bf00      	nop
 800809c:	e7fe      	b.n	800809c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d102      	bne.n	80080aa <xQueueGenericCreateStatic+0x7e>
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <xQueueGenericCreateStatic+0x82>
 80080aa:	2301      	movs	r3, #1
 80080ac:	e000      	b.n	80080b0 <xQueueGenericCreateStatic+0x84>
 80080ae:	2300      	movs	r3, #0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10a      	bne.n	80080ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80080b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	61fb      	str	r3, [r7, #28]
}
 80080c6:	bf00      	nop
 80080c8:	e7fe      	b.n	80080c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80080ca:	2350      	movs	r3, #80	; 0x50
 80080cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	2b50      	cmp	r3, #80	; 0x50
 80080d2:	d00a      	beq.n	80080ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80080d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	61bb      	str	r3, [r7, #24]
}
 80080e6:	bf00      	nop
 80080e8:	e7fe      	b.n	80080e8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80080ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80080f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00d      	beq.n	8008112 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80080f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80080fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	4613      	mov	r3, r2
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	68b9      	ldr	r1, [r7, #8]
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f000 f805 	bl	800811c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008114:	4618      	mov	r0, r3
 8008116:	3730      	adds	r7, #48	; 0x30
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
 8008128:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d103      	bne.n	8008138 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	69ba      	ldr	r2, [r7, #24]
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	e002      	b.n	800813e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800814a:	2101      	movs	r1, #1
 800814c:	69b8      	ldr	r0, [r7, #24]
 800814e:	f7ff ff05 	bl	8007f5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	78fa      	ldrb	r2, [r7, #3]
 8008156:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800815a:	bf00      	nop
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b08e      	sub	sp, #56	; 0x38
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
 8008170:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008172:	2300      	movs	r3, #0
 8008174:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10a      	bne.n	8008196 <xQueueGenericSend+0x32>
	__asm volatile
 8008180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008192:	bf00      	nop
 8008194:	e7fe      	b.n	8008194 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d103      	bne.n	80081a4 <xQueueGenericSend+0x40>
 800819c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d101      	bne.n	80081a8 <xQueueGenericSend+0x44>
 80081a4:	2301      	movs	r3, #1
 80081a6:	e000      	b.n	80081aa <xQueueGenericSend+0x46>
 80081a8:	2300      	movs	r3, #0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10a      	bne.n	80081c4 <xQueueGenericSend+0x60>
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081c0:	bf00      	nop
 80081c2:	e7fe      	b.n	80081c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d103      	bne.n	80081d2 <xQueueGenericSend+0x6e>
 80081ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d101      	bne.n	80081d6 <xQueueGenericSend+0x72>
 80081d2:	2301      	movs	r3, #1
 80081d4:	e000      	b.n	80081d8 <xQueueGenericSend+0x74>
 80081d6:	2300      	movs	r3, #0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d10a      	bne.n	80081f2 <xQueueGenericSend+0x8e>
	__asm volatile
 80081dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e0:	f383 8811 	msr	BASEPRI, r3
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	623b      	str	r3, [r7, #32]
}
 80081ee:	bf00      	nop
 80081f0:	e7fe      	b.n	80081f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081f2:	f001 f9bd 	bl	8009570 <xTaskGetSchedulerState>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d102      	bne.n	8008202 <xQueueGenericSend+0x9e>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <xQueueGenericSend+0xa2>
 8008202:	2301      	movs	r3, #1
 8008204:	e000      	b.n	8008208 <xQueueGenericSend+0xa4>
 8008206:	2300      	movs	r3, #0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10a      	bne.n	8008222 <xQueueGenericSend+0xbe>
	__asm volatile
 800820c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	61fb      	str	r3, [r7, #28]
}
 800821e:	bf00      	nop
 8008220:	e7fe      	b.n	8008220 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008222:	f001 feff 	bl	800a024 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800822e:	429a      	cmp	r2, r3
 8008230:	d302      	bcc.n	8008238 <xQueueGenericSend+0xd4>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b02      	cmp	r3, #2
 8008236:	d129      	bne.n	800828c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008238:	683a      	ldr	r2, [r7, #0]
 800823a:	68b9      	ldr	r1, [r7, #8]
 800823c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800823e:	f000 fa0b 	bl	8008658 <prvCopyDataToQueue>
 8008242:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008248:	2b00      	cmp	r3, #0
 800824a:	d010      	beq.n	800826e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800824c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824e:	3324      	adds	r3, #36	; 0x24
 8008250:	4618      	mov	r0, r3
 8008252:	f000 ffcf 	bl	80091f4 <xTaskRemoveFromEventList>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d013      	beq.n	8008284 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800825c:	4b3f      	ldr	r3, [pc, #252]	; (800835c <xQueueGenericSend+0x1f8>)
 800825e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	f3bf 8f6f 	isb	sy
 800826c:	e00a      	b.n	8008284 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800826e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008270:	2b00      	cmp	r3, #0
 8008272:	d007      	beq.n	8008284 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008274:	4b39      	ldr	r3, [pc, #228]	; (800835c <xQueueGenericSend+0x1f8>)
 8008276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008284:	f001 fefe 	bl	800a084 <vPortExitCritical>
				return pdPASS;
 8008288:	2301      	movs	r3, #1
 800828a:	e063      	b.n	8008354 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d103      	bne.n	800829a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008292:	f001 fef7 	bl	800a084 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008296:	2300      	movs	r3, #0
 8008298:	e05c      	b.n	8008354 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800829a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800829c:	2b00      	cmp	r3, #0
 800829e:	d106      	bne.n	80082ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082a0:	f107 0314 	add.w	r3, r7, #20
 80082a4:	4618      	mov	r0, r3
 80082a6:	f001 f809 	bl	80092bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082aa:	2301      	movs	r3, #1
 80082ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082ae:	f001 fee9 	bl	800a084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082b2:	f000 fd7b 	bl	8008dac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082b6:	f001 feb5 	bl	800a024 <vPortEnterCritical>
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082c0:	b25b      	sxtb	r3, r3
 80082c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c6:	d103      	bne.n	80082d0 <xQueueGenericSend+0x16c>
 80082c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ca:	2200      	movs	r2, #0
 80082cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082d6:	b25b      	sxtb	r3, r3
 80082d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082dc:	d103      	bne.n	80082e6 <xQueueGenericSend+0x182>
 80082de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082e6:	f001 fecd 	bl	800a084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082ea:	1d3a      	adds	r2, r7, #4
 80082ec:	f107 0314 	add.w	r3, r7, #20
 80082f0:	4611      	mov	r1, r2
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 fff8 	bl	80092e8 <xTaskCheckForTimeOut>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d124      	bne.n	8008348 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80082fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008300:	f000 faa2 	bl	8008848 <prvIsQueueFull>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d018      	beq.n	800833c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830c:	3310      	adds	r3, #16
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	4611      	mov	r1, r2
 8008312:	4618      	mov	r0, r3
 8008314:	f000 ff1e 	bl	8009154 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800831a:	f000 fa2d 	bl	8008778 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800831e:	f000 fd53 	bl	8008dc8 <xTaskResumeAll>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	f47f af7c 	bne.w	8008222 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800832a:	4b0c      	ldr	r3, [pc, #48]	; (800835c <xQueueGenericSend+0x1f8>)
 800832c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008330:	601a      	str	r2, [r3, #0]
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	e772      	b.n	8008222 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800833c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800833e:	f000 fa1b 	bl	8008778 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008342:	f000 fd41 	bl	8008dc8 <xTaskResumeAll>
 8008346:	e76c      	b.n	8008222 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800834a:	f000 fa15 	bl	8008778 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800834e:	f000 fd3b 	bl	8008dc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008352:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008354:	4618      	mov	r0, r3
 8008356:	3738      	adds	r7, #56	; 0x38
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	e000ed04 	.word	0xe000ed04

08008360 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b090      	sub	sp, #64	; 0x40
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10a      	bne.n	800838e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800838a:	bf00      	nop
 800838c:	e7fe      	b.n	800838c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d103      	bne.n	800839c <xQueueGenericSendFromISR+0x3c>
 8008394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008398:	2b00      	cmp	r3, #0
 800839a:	d101      	bne.n	80083a0 <xQueueGenericSendFromISR+0x40>
 800839c:	2301      	movs	r3, #1
 800839e:	e000      	b.n	80083a2 <xQueueGenericSendFromISR+0x42>
 80083a0:	2300      	movs	r3, #0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10a      	bne.n	80083bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80083a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083b8:	bf00      	nop
 80083ba:	e7fe      	b.n	80083ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d103      	bne.n	80083ca <xQueueGenericSendFromISR+0x6a>
 80083c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d101      	bne.n	80083ce <xQueueGenericSendFromISR+0x6e>
 80083ca:	2301      	movs	r3, #1
 80083cc:	e000      	b.n	80083d0 <xQueueGenericSendFromISR+0x70>
 80083ce:	2300      	movs	r3, #0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10a      	bne.n	80083ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80083d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d8:	f383 8811 	msr	BASEPRI, r3
 80083dc:	f3bf 8f6f 	isb	sy
 80083e0:	f3bf 8f4f 	dsb	sy
 80083e4:	623b      	str	r3, [r7, #32]
}
 80083e6:	bf00      	nop
 80083e8:	e7fe      	b.n	80083e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083ea:	f001 fefd 	bl	800a1e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80083ee:	f3ef 8211 	mrs	r2, BASEPRI
 80083f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	61fa      	str	r2, [r7, #28]
 8008404:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008406:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008408:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800840a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800840e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008412:	429a      	cmp	r2, r3
 8008414:	d302      	bcc.n	800841c <xQueueGenericSendFromISR+0xbc>
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	2b02      	cmp	r3, #2
 800841a:	d12f      	bne.n	800847c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800841c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	68b9      	ldr	r1, [r7, #8]
 8008430:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008432:	f000 f911 	bl	8008658 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008436:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800843a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843e:	d112      	bne.n	8008466 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008444:	2b00      	cmp	r3, #0
 8008446:	d016      	beq.n	8008476 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844a:	3324      	adds	r3, #36	; 0x24
 800844c:	4618      	mov	r0, r3
 800844e:	f000 fed1 	bl	80091f4 <xTaskRemoveFromEventList>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00e      	beq.n	8008476 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00b      	beq.n	8008476 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	e007      	b.n	8008476 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008466:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800846a:	3301      	adds	r3, #1
 800846c:	b2db      	uxtb	r3, r3
 800846e:	b25a      	sxtb	r2, r3
 8008470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008476:	2301      	movs	r3, #1
 8008478:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800847a:	e001      	b.n	8008480 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800847c:	2300      	movs	r3, #0
 800847e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008482:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800848a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800848c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800848e:	4618      	mov	r0, r3
 8008490:	3740      	adds	r7, #64	; 0x40
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
	...

08008498 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08c      	sub	sp, #48	; 0x30
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80084a4:	2300      	movs	r3, #0
 80084a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80084ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10a      	bne.n	80084c8 <xQueueReceive+0x30>
	__asm volatile
 80084b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b6:	f383 8811 	msr	BASEPRI, r3
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	623b      	str	r3, [r7, #32]
}
 80084c4:	bf00      	nop
 80084c6:	e7fe      	b.n	80084c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d103      	bne.n	80084d6 <xQueueReceive+0x3e>
 80084ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d101      	bne.n	80084da <xQueueReceive+0x42>
 80084d6:	2301      	movs	r3, #1
 80084d8:	e000      	b.n	80084dc <xQueueReceive+0x44>
 80084da:	2300      	movs	r3, #0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d10a      	bne.n	80084f6 <xQueueReceive+0x5e>
	__asm volatile
 80084e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	61fb      	str	r3, [r7, #28]
}
 80084f2:	bf00      	nop
 80084f4:	e7fe      	b.n	80084f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084f6:	f001 f83b 	bl	8009570 <xTaskGetSchedulerState>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d102      	bne.n	8008506 <xQueueReceive+0x6e>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <xQueueReceive+0x72>
 8008506:	2301      	movs	r3, #1
 8008508:	e000      	b.n	800850c <xQueueReceive+0x74>
 800850a:	2300      	movs	r3, #0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10a      	bne.n	8008526 <xQueueReceive+0x8e>
	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	61bb      	str	r3, [r7, #24]
}
 8008522:	bf00      	nop
 8008524:	e7fe      	b.n	8008524 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008526:	f001 fd7d 	bl	800a024 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800852a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	2b00      	cmp	r3, #0
 8008534:	d01f      	beq.n	8008576 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008536:	68b9      	ldr	r1, [r7, #8]
 8008538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800853a:	f000 f8f7 	bl	800872c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800853e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008540:	1e5a      	subs	r2, r3, #1
 8008542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008544:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00f      	beq.n	800856e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800854e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008550:	3310      	adds	r3, #16
 8008552:	4618      	mov	r0, r3
 8008554:	f000 fe4e 	bl	80091f4 <xTaskRemoveFromEventList>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d007      	beq.n	800856e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800855e:	4b3d      	ldr	r3, [pc, #244]	; (8008654 <xQueueReceive+0x1bc>)
 8008560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008564:	601a      	str	r2, [r3, #0]
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800856e:	f001 fd89 	bl	800a084 <vPortExitCritical>
				return pdPASS;
 8008572:	2301      	movs	r3, #1
 8008574:	e069      	b.n	800864a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d103      	bne.n	8008584 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800857c:	f001 fd82 	bl	800a084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008580:	2300      	movs	r3, #0
 8008582:	e062      	b.n	800864a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008586:	2b00      	cmp	r3, #0
 8008588:	d106      	bne.n	8008598 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800858a:	f107 0310 	add.w	r3, r7, #16
 800858e:	4618      	mov	r0, r3
 8008590:	f000 fe94 	bl	80092bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008594:	2301      	movs	r3, #1
 8008596:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008598:	f001 fd74 	bl	800a084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800859c:	f000 fc06 	bl	8008dac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085a0:	f001 fd40 	bl	800a024 <vPortEnterCritical>
 80085a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085aa:	b25b      	sxtb	r3, r3
 80085ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b0:	d103      	bne.n	80085ba <xQueueReceive+0x122>
 80085b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085c0:	b25b      	sxtb	r3, r3
 80085c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c6:	d103      	bne.n	80085d0 <xQueueReceive+0x138>
 80085c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ca:	2200      	movs	r2, #0
 80085cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085d0:	f001 fd58 	bl	800a084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085d4:	1d3a      	adds	r2, r7, #4
 80085d6:	f107 0310 	add.w	r3, r7, #16
 80085da:	4611      	mov	r1, r2
 80085dc:	4618      	mov	r0, r3
 80085de:	f000 fe83 	bl	80092e8 <xTaskCheckForTimeOut>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d123      	bne.n	8008630 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085ea:	f000 f917 	bl	800881c <prvIsQueueEmpty>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d017      	beq.n	8008624 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80085f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f6:	3324      	adds	r3, #36	; 0x24
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	4611      	mov	r1, r2
 80085fc:	4618      	mov	r0, r3
 80085fe:	f000 fda9 	bl	8009154 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008604:	f000 f8b8 	bl	8008778 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008608:	f000 fbde 	bl	8008dc8 <xTaskResumeAll>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d189      	bne.n	8008526 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008612:	4b10      	ldr	r3, [pc, #64]	; (8008654 <xQueueReceive+0x1bc>)
 8008614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008618:	601a      	str	r2, [r3, #0]
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	f3bf 8f6f 	isb	sy
 8008622:	e780      	b.n	8008526 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008626:	f000 f8a7 	bl	8008778 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800862a:	f000 fbcd 	bl	8008dc8 <xTaskResumeAll>
 800862e:	e77a      	b.n	8008526 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008632:	f000 f8a1 	bl	8008778 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008636:	f000 fbc7 	bl	8008dc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800863a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800863c:	f000 f8ee 	bl	800881c <prvIsQueueEmpty>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	f43f af6f 	beq.w	8008526 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008648:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800864a:	4618      	mov	r0, r3
 800864c:	3730      	adds	r7, #48	; 0x30
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	e000ed04 	.word	0xe000ed04

08008658 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b086      	sub	sp, #24
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008664:	2300      	movs	r3, #0
 8008666:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800866c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10d      	bne.n	8008692 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d14d      	bne.n	800871a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	4618      	mov	r0, r3
 8008684:	f000 ff92 	bl	80095ac <xTaskPriorityDisinherit>
 8008688:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	609a      	str	r2, [r3, #8]
 8008690:	e043      	b.n	800871a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d119      	bne.n	80086cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6858      	ldr	r0, [r3, #4]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a0:	461a      	mov	r2, r3
 80086a2:	68b9      	ldr	r1, [r7, #8]
 80086a4:	f002 fa32 	bl	800ab0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b0:	441a      	add	r2, r3
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	685a      	ldr	r2, [r3, #4]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d32b      	bcc.n	800871a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	605a      	str	r2, [r3, #4]
 80086ca:	e026      	b.n	800871a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	68d8      	ldr	r0, [r3, #12]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d4:	461a      	mov	r2, r3
 80086d6:	68b9      	ldr	r1, [r7, #8]
 80086d8:	f002 fa18 	bl	800ab0c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	68da      	ldr	r2, [r3, #12]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e4:	425b      	negs	r3, r3
 80086e6:	441a      	add	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	68da      	ldr	r2, [r3, #12]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d207      	bcs.n	8008708 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	689a      	ldr	r2, [r3, #8]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008700:	425b      	negs	r3, r3
 8008702:	441a      	add	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b02      	cmp	r3, #2
 800870c:	d105      	bne.n	800871a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d002      	beq.n	800871a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	3b01      	subs	r3, #1
 8008718:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	1c5a      	adds	r2, r3, #1
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008722:	697b      	ldr	r3, [r7, #20]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3718      	adds	r7, #24
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873a:	2b00      	cmp	r3, #0
 800873c:	d018      	beq.n	8008770 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68da      	ldr	r2, [r3, #12]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008746:	441a      	add	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	68da      	ldr	r2, [r3, #12]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	429a      	cmp	r2, r3
 8008756:	d303      	bcc.n	8008760 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	68d9      	ldr	r1, [r3, #12]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008768:	461a      	mov	r2, r3
 800876a:	6838      	ldr	r0, [r7, #0]
 800876c:	f002 f9ce 	bl	800ab0c <memcpy>
	}
}
 8008770:	bf00      	nop
 8008772:	3708      	adds	r7, #8
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008780:	f001 fc50 	bl	800a024 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800878a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800878c:	e011      	b.n	80087b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008792:	2b00      	cmp	r3, #0
 8008794:	d012      	beq.n	80087bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	3324      	adds	r3, #36	; 0x24
 800879a:	4618      	mov	r0, r3
 800879c:	f000 fd2a 	bl	80091f4 <xTaskRemoveFromEventList>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d001      	beq.n	80087aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80087a6:	f000 fe01 	bl	80093ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
 80087ac:	3b01      	subs	r3, #1
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	dce9      	bgt.n	800878e <prvUnlockQueue+0x16>
 80087ba:	e000      	b.n	80087be <prvUnlockQueue+0x46>
					break;
 80087bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	22ff      	movs	r2, #255	; 0xff
 80087c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80087c6:	f001 fc5d 	bl	800a084 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80087ca:	f001 fc2b 	bl	800a024 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087d6:	e011      	b.n	80087fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d012      	beq.n	8008806 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	3310      	adds	r3, #16
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 fd05 	bl	80091f4 <xTaskRemoveFromEventList>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d001      	beq.n	80087f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80087f0:	f000 fddc 	bl	80093ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80087f4:	7bbb      	ldrb	r3, [r7, #14]
 80087f6:	3b01      	subs	r3, #1
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008800:	2b00      	cmp	r3, #0
 8008802:	dce9      	bgt.n	80087d8 <prvUnlockQueue+0x60>
 8008804:	e000      	b.n	8008808 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008806:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	22ff      	movs	r2, #255	; 0xff
 800880c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008810:	f001 fc38 	bl	800a084 <vPortExitCritical>
}
 8008814:	bf00      	nop
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008824:	f001 fbfe 	bl	800a024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882c:	2b00      	cmp	r3, #0
 800882e:	d102      	bne.n	8008836 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008830:	2301      	movs	r3, #1
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	e001      	b.n	800883a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008836:	2300      	movs	r3, #0
 8008838:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800883a:	f001 fc23 	bl	800a084 <vPortExitCritical>

	return xReturn;
 800883e:	68fb      	ldr	r3, [r7, #12]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008850:	f001 fbe8 	bl	800a024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800885c:	429a      	cmp	r2, r3
 800885e:	d102      	bne.n	8008866 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008860:	2301      	movs	r3, #1
 8008862:	60fb      	str	r3, [r7, #12]
 8008864:	e001      	b.n	800886a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008866:	2300      	movs	r3, #0
 8008868:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800886a:	f001 fc0b 	bl	800a084 <vPortExitCritical>

	return xReturn;
 800886e:	68fb      	ldr	r3, [r7, #12]
}
 8008870:	4618      	mov	r0, r3
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008882:	2300      	movs	r3, #0
 8008884:	60fb      	str	r3, [r7, #12]
 8008886:	e014      	b.n	80088b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008888:	4a0f      	ldr	r2, [pc, #60]	; (80088c8 <vQueueAddToRegistry+0x50>)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10b      	bne.n	80088ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008894:	490c      	ldr	r1, [pc, #48]	; (80088c8 <vQueueAddToRegistry+0x50>)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	683a      	ldr	r2, [r7, #0]
 800889a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800889e:	4a0a      	ldr	r2, [pc, #40]	; (80088c8 <vQueueAddToRegistry+0x50>)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	00db      	lsls	r3, r3, #3
 80088a4:	4413      	add	r3, r2
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80088aa:	e006      	b.n	80088ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	3301      	adds	r3, #1
 80088b0:	60fb      	str	r3, [r7, #12]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2b07      	cmp	r3, #7
 80088b6:	d9e7      	bls.n	8008888 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80088b8:	bf00      	nop
 80088ba:	bf00      	nop
 80088bc:	3714      	adds	r7, #20
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	20001078 	.word	0x20001078

080088cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80088dc:	f001 fba2 	bl	800a024 <vPortEnterCritical>
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088e6:	b25b      	sxtb	r3, r3
 80088e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ec:	d103      	bne.n	80088f6 <vQueueWaitForMessageRestricted+0x2a>
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088fc:	b25b      	sxtb	r3, r3
 80088fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008902:	d103      	bne.n	800890c <vQueueWaitForMessageRestricted+0x40>
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	2200      	movs	r2, #0
 8008908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800890c:	f001 fbba 	bl	800a084 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008914:	2b00      	cmp	r3, #0
 8008916:	d106      	bne.n	8008926 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	3324      	adds	r3, #36	; 0x24
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	68b9      	ldr	r1, [r7, #8]
 8008920:	4618      	mov	r0, r3
 8008922:	f000 fc3b 	bl	800919c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008926:	6978      	ldr	r0, [r7, #20]
 8008928:	f7ff ff26 	bl	8008778 <prvUnlockQueue>
	}
 800892c:	bf00      	nop
 800892e:	3718      	adds	r7, #24
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008934:	b580      	push	{r7, lr}
 8008936:	b08e      	sub	sp, #56	; 0x38
 8008938:	af04      	add	r7, sp, #16
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
 8008940:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10a      	bne.n	800895e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894c:	f383 8811 	msr	BASEPRI, r3
 8008950:	f3bf 8f6f 	isb	sy
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	623b      	str	r3, [r7, #32]
}
 800895a:	bf00      	nop
 800895c:	e7fe      	b.n	800895c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800895e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10a      	bne.n	800897a <xTaskCreateStatic+0x46>
	__asm volatile
 8008964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008968:	f383 8811 	msr	BASEPRI, r3
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	f3bf 8f4f 	dsb	sy
 8008974:	61fb      	str	r3, [r7, #28]
}
 8008976:	bf00      	nop
 8008978:	e7fe      	b.n	8008978 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800897a:	235c      	movs	r3, #92	; 0x5c
 800897c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	2b5c      	cmp	r3, #92	; 0x5c
 8008982:	d00a      	beq.n	800899a <xTaskCreateStatic+0x66>
	__asm volatile
 8008984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008988:	f383 8811 	msr	BASEPRI, r3
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	f3bf 8f4f 	dsb	sy
 8008994:	61bb      	str	r3, [r7, #24]
}
 8008996:	bf00      	nop
 8008998:	e7fe      	b.n	8008998 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800899a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800899c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d01e      	beq.n	80089e0 <xTaskCreateStatic+0xac>
 80089a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d01b      	beq.n	80089e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80089ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80089b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b4:	2202      	movs	r2, #2
 80089b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80089ba:	2300      	movs	r3, #0
 80089bc:	9303      	str	r3, [sp, #12]
 80089be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c0:	9302      	str	r3, [sp, #8]
 80089c2:	f107 0314 	add.w	r3, r7, #20
 80089c6:	9301      	str	r3, [sp, #4]
 80089c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	68b9      	ldr	r1, [r7, #8]
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	f000 f850 	bl	8008a78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089da:	f000 f8dd 	bl	8008b98 <prvAddNewTaskToReadyList>
 80089de:	e001      	b.n	80089e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80089e0:	2300      	movs	r3, #0
 80089e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80089e4:	697b      	ldr	r3, [r7, #20]
	}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3728      	adds	r7, #40	; 0x28
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b08c      	sub	sp, #48	; 0x30
 80089f2:	af04      	add	r7, sp, #16
 80089f4:	60f8      	str	r0, [r7, #12]
 80089f6:	60b9      	str	r1, [r7, #8]
 80089f8:	603b      	str	r3, [r7, #0]
 80089fa:	4613      	mov	r3, r2
 80089fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80089fe:	88fb      	ldrh	r3, [r7, #6]
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	4618      	mov	r0, r3
 8008a04:	f001 fc30 	bl	800a268 <pvPortMalloc>
 8008a08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00e      	beq.n	8008a2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a10:	205c      	movs	r0, #92	; 0x5c
 8008a12:	f001 fc29 	bl	800a268 <pvPortMalloc>
 8008a16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d003      	beq.n	8008a26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	697a      	ldr	r2, [r7, #20]
 8008a22:	631a      	str	r2, [r3, #48]	; 0x30
 8008a24:	e005      	b.n	8008a32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a26:	6978      	ldr	r0, [r7, #20]
 8008a28:	f001 fcea 	bl	800a400 <vPortFree>
 8008a2c:	e001      	b.n	8008a32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d017      	beq.n	8008a68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a40:	88fa      	ldrh	r2, [r7, #6]
 8008a42:	2300      	movs	r3, #0
 8008a44:	9303      	str	r3, [sp, #12]
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	9302      	str	r3, [sp, #8]
 8008a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4c:	9301      	str	r3, [sp, #4]
 8008a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	68b9      	ldr	r1, [r7, #8]
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f000 f80e 	bl	8008a78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a5c:	69f8      	ldr	r0, [r7, #28]
 8008a5e:	f000 f89b 	bl	8008b98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a62:	2301      	movs	r3, #1
 8008a64:	61bb      	str	r3, [r7, #24]
 8008a66:	e002      	b.n	8008a6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a68:	f04f 33ff 	mov.w	r3, #4294967295
 8008a6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a6e:	69bb      	ldr	r3, [r7, #24]
	}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3720      	adds	r7, #32
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b088      	sub	sp, #32
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]
 8008a84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	461a      	mov	r2, r3
 8008a90:	21a5      	movs	r1, #165	; 0xa5
 8008a92:	f002 f849 	bl	800ab28 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	4413      	add	r3, r2
 8008aa6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	f023 0307 	bic.w	r3, r3, #7
 8008aae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	f003 0307 	and.w	r3, r3, #7
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00a      	beq.n	8008ad0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	617b      	str	r3, [r7, #20]
}
 8008acc:	bf00      	nop
 8008ace:	e7fe      	b.n	8008ace <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d01f      	beq.n	8008b16 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	61fb      	str	r3, [r7, #28]
 8008ada:	e012      	b.n	8008b02 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	7819      	ldrb	r1, [r3, #0]
 8008ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	4413      	add	r3, r2
 8008aea:	3334      	adds	r3, #52	; 0x34
 8008aec:	460a      	mov	r2, r1
 8008aee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008af0:	68ba      	ldr	r2, [r7, #8]
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	4413      	add	r3, r2
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d006      	beq.n	8008b0a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	3301      	adds	r3, #1
 8008b00:	61fb      	str	r3, [r7, #28]
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	2b0f      	cmp	r3, #15
 8008b06:	d9e9      	bls.n	8008adc <prvInitialiseNewTask+0x64>
 8008b08:	e000      	b.n	8008b0c <prvInitialiseNewTask+0x94>
			{
				break;
 8008b0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b14:	e003      	b.n	8008b1e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b20:	2b37      	cmp	r3, #55	; 0x37
 8008b22:	d901      	bls.n	8008b28 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b24:	2337      	movs	r3, #55	; 0x37
 8008b26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b32:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b36:	2200      	movs	r2, #0
 8008b38:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3c:	3304      	adds	r3, #4
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7ff f978 	bl	8007e34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b46:	3318      	adds	r3, #24
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7ff f973 	bl	8007e34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b66:	2200      	movs	r2, #0
 8008b68:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	68f9      	ldr	r1, [r7, #12]
 8008b76:	69b8      	ldr	r0, [r7, #24]
 8008b78:	f001 f928 	bl	8009dcc <pxPortInitialiseStack>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d002      	beq.n	8008b8e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b8e:	bf00      	nop
 8008b90:	3720      	adds	r7, #32
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
	...

08008b98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ba0:	f001 fa40 	bl	800a024 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ba4:	4b2d      	ldr	r3, [pc, #180]	; (8008c5c <prvAddNewTaskToReadyList+0xc4>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	4a2c      	ldr	r2, [pc, #176]	; (8008c5c <prvAddNewTaskToReadyList+0xc4>)
 8008bac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008bae:	4b2c      	ldr	r3, [pc, #176]	; (8008c60 <prvAddNewTaskToReadyList+0xc8>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d109      	bne.n	8008bca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008bb6:	4a2a      	ldr	r2, [pc, #168]	; (8008c60 <prvAddNewTaskToReadyList+0xc8>)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008bbc:	4b27      	ldr	r3, [pc, #156]	; (8008c5c <prvAddNewTaskToReadyList+0xc4>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d110      	bne.n	8008be6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008bc4:	f000 fc16 	bl	80093f4 <prvInitialiseTaskLists>
 8008bc8:	e00d      	b.n	8008be6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008bca:	4b26      	ldr	r3, [pc, #152]	; (8008c64 <prvAddNewTaskToReadyList+0xcc>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d109      	bne.n	8008be6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008bd2:	4b23      	ldr	r3, [pc, #140]	; (8008c60 <prvAddNewTaskToReadyList+0xc8>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d802      	bhi.n	8008be6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008be0:	4a1f      	ldr	r2, [pc, #124]	; (8008c60 <prvAddNewTaskToReadyList+0xc8>)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008be6:	4b20      	ldr	r3, [pc, #128]	; (8008c68 <prvAddNewTaskToReadyList+0xd0>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	3301      	adds	r3, #1
 8008bec:	4a1e      	ldr	r2, [pc, #120]	; (8008c68 <prvAddNewTaskToReadyList+0xd0>)
 8008bee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008bf0:	4b1d      	ldr	r3, [pc, #116]	; (8008c68 <prvAddNewTaskToReadyList+0xd0>)
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bfc:	4b1b      	ldr	r3, [pc, #108]	; (8008c6c <prvAddNewTaskToReadyList+0xd4>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d903      	bls.n	8008c0c <prvAddNewTaskToReadyList+0x74>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c08:	4a18      	ldr	r2, [pc, #96]	; (8008c6c <prvAddNewTaskToReadyList+0xd4>)
 8008c0a:	6013      	str	r3, [r2, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c10:	4613      	mov	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	4413      	add	r3, r2
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	4a15      	ldr	r2, [pc, #84]	; (8008c70 <prvAddNewTaskToReadyList+0xd8>)
 8008c1a:	441a      	add	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	3304      	adds	r3, #4
 8008c20:	4619      	mov	r1, r3
 8008c22:	4610      	mov	r0, r2
 8008c24:	f7ff f913 	bl	8007e4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c28:	f001 fa2c 	bl	800a084 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c2c:	4b0d      	ldr	r3, [pc, #52]	; (8008c64 <prvAddNewTaskToReadyList+0xcc>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00e      	beq.n	8008c52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c34:	4b0a      	ldr	r3, [pc, #40]	; (8008c60 <prvAddNewTaskToReadyList+0xc8>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d207      	bcs.n	8008c52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c42:	4b0c      	ldr	r3, [pc, #48]	; (8008c74 <prvAddNewTaskToReadyList+0xdc>)
 8008c44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c48:	601a      	str	r2, [r3, #0]
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c52:	bf00      	nop
 8008c54:	3708      	adds	r7, #8
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	2000158c 	.word	0x2000158c
 8008c60:	200010b8 	.word	0x200010b8
 8008c64:	20001598 	.word	0x20001598
 8008c68:	200015a8 	.word	0x200015a8
 8008c6c:	20001594 	.word	0x20001594
 8008c70:	200010bc 	.word	0x200010bc
 8008c74:	e000ed04 	.word	0xe000ed04

08008c78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c80:	2300      	movs	r3, #0
 8008c82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d017      	beq.n	8008cba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c8a:	4b13      	ldr	r3, [pc, #76]	; (8008cd8 <vTaskDelay+0x60>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00a      	beq.n	8008ca8 <vTaskDelay+0x30>
	__asm volatile
 8008c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	60bb      	str	r3, [r7, #8]
}
 8008ca4:	bf00      	nop
 8008ca6:	e7fe      	b.n	8008ca6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008ca8:	f000 f880 	bl	8008dac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008cac:	2100      	movs	r1, #0
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fcea 	bl	8009688 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008cb4:	f000 f888 	bl	8008dc8 <xTaskResumeAll>
 8008cb8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d107      	bne.n	8008cd0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008cc0:	4b06      	ldr	r3, [pc, #24]	; (8008cdc <vTaskDelay+0x64>)
 8008cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cc6:	601a      	str	r2, [r3, #0]
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008cd0:	bf00      	nop
 8008cd2:	3710      	adds	r7, #16
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	200015b4 	.word	0x200015b4
 8008cdc:	e000ed04 	.word	0xe000ed04

08008ce0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b08a      	sub	sp, #40	; 0x28
 8008ce4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008cea:	2300      	movs	r3, #0
 8008cec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008cee:	463a      	mov	r2, r7
 8008cf0:	1d39      	adds	r1, r7, #4
 8008cf2:	f107 0308 	add.w	r3, r7, #8
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7ff f848 	bl	8007d8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	68ba      	ldr	r2, [r7, #8]
 8008d02:	9202      	str	r2, [sp, #8]
 8008d04:	9301      	str	r3, [sp, #4]
 8008d06:	2300      	movs	r3, #0
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	460a      	mov	r2, r1
 8008d0e:	4921      	ldr	r1, [pc, #132]	; (8008d94 <vTaskStartScheduler+0xb4>)
 8008d10:	4821      	ldr	r0, [pc, #132]	; (8008d98 <vTaskStartScheduler+0xb8>)
 8008d12:	f7ff fe0f 	bl	8008934 <xTaskCreateStatic>
 8008d16:	4603      	mov	r3, r0
 8008d18:	4a20      	ldr	r2, [pc, #128]	; (8008d9c <vTaskStartScheduler+0xbc>)
 8008d1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d1c:	4b1f      	ldr	r3, [pc, #124]	; (8008d9c <vTaskStartScheduler+0xbc>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d002      	beq.n	8008d2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d24:	2301      	movs	r3, #1
 8008d26:	617b      	str	r3, [r7, #20]
 8008d28:	e001      	b.n	8008d2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d102      	bne.n	8008d3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008d34:	f000 fcfc 	bl	8009730 <xTimerCreateTimerTask>
 8008d38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d116      	bne.n	8008d6e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	613b      	str	r3, [r7, #16]
}
 8008d52:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d54:	4b12      	ldr	r3, [pc, #72]	; (8008da0 <vTaskStartScheduler+0xc0>)
 8008d56:	f04f 32ff 	mov.w	r2, #4294967295
 8008d5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d5c:	4b11      	ldr	r3, [pc, #68]	; (8008da4 <vTaskStartScheduler+0xc4>)
 8008d5e:	2201      	movs	r2, #1
 8008d60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d62:	4b11      	ldr	r3, [pc, #68]	; (8008da8 <vTaskStartScheduler+0xc8>)
 8008d64:	2200      	movs	r2, #0
 8008d66:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d68:	f001 f8ba 	bl	8009ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d6c:	e00e      	b.n	8008d8c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d74:	d10a      	bne.n	8008d8c <vTaskStartScheduler+0xac>
	__asm volatile
 8008d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7a:	f383 8811 	msr	BASEPRI, r3
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	f3bf 8f4f 	dsb	sy
 8008d86:	60fb      	str	r3, [r7, #12]
}
 8008d88:	bf00      	nop
 8008d8a:	e7fe      	b.n	8008d8a <vTaskStartScheduler+0xaa>
}
 8008d8c:	bf00      	nop
 8008d8e:	3718      	adds	r7, #24
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	0800c180 	.word	0x0800c180
 8008d98:	080093c5 	.word	0x080093c5
 8008d9c:	200015b0 	.word	0x200015b0
 8008da0:	200015ac 	.word	0x200015ac
 8008da4:	20001598 	.word	0x20001598
 8008da8:	20001590 	.word	0x20001590

08008dac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008dac:	b480      	push	{r7}
 8008dae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008db0:	4b04      	ldr	r3, [pc, #16]	; (8008dc4 <vTaskSuspendAll+0x18>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	3301      	adds	r3, #1
 8008db6:	4a03      	ldr	r2, [pc, #12]	; (8008dc4 <vTaskSuspendAll+0x18>)
 8008db8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008dba:	bf00      	nop
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr
 8008dc4:	200015b4 	.word	0x200015b4

08008dc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008dd6:	4b42      	ldr	r3, [pc, #264]	; (8008ee0 <xTaskResumeAll+0x118>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d10a      	bne.n	8008df4 <xTaskResumeAll+0x2c>
	__asm volatile
 8008dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de2:	f383 8811 	msr	BASEPRI, r3
 8008de6:	f3bf 8f6f 	isb	sy
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	603b      	str	r3, [r7, #0]
}
 8008df0:	bf00      	nop
 8008df2:	e7fe      	b.n	8008df2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008df4:	f001 f916 	bl	800a024 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008df8:	4b39      	ldr	r3, [pc, #228]	; (8008ee0 <xTaskResumeAll+0x118>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	4a38      	ldr	r2, [pc, #224]	; (8008ee0 <xTaskResumeAll+0x118>)
 8008e00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e02:	4b37      	ldr	r3, [pc, #220]	; (8008ee0 <xTaskResumeAll+0x118>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d162      	bne.n	8008ed0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e0a:	4b36      	ldr	r3, [pc, #216]	; (8008ee4 <xTaskResumeAll+0x11c>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d05e      	beq.n	8008ed0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e12:	e02f      	b.n	8008e74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e14:	4b34      	ldr	r3, [pc, #208]	; (8008ee8 <xTaskResumeAll+0x120>)
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	3318      	adds	r3, #24
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7ff f871 	bl	8007f08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	3304      	adds	r3, #4
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7ff f86c 	bl	8007f08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e34:	4b2d      	ldr	r3, [pc, #180]	; (8008eec <xTaskResumeAll+0x124>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d903      	bls.n	8008e44 <xTaskResumeAll+0x7c>
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e40:	4a2a      	ldr	r2, [pc, #168]	; (8008eec <xTaskResumeAll+0x124>)
 8008e42:	6013      	str	r3, [r2, #0]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e48:	4613      	mov	r3, r2
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	4413      	add	r3, r2
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	4a27      	ldr	r2, [pc, #156]	; (8008ef0 <xTaskResumeAll+0x128>)
 8008e52:	441a      	add	r2, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	3304      	adds	r3, #4
 8008e58:	4619      	mov	r1, r3
 8008e5a:	4610      	mov	r0, r2
 8008e5c:	f7fe fff7 	bl	8007e4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e64:	4b23      	ldr	r3, [pc, #140]	; (8008ef4 <xTaskResumeAll+0x12c>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d302      	bcc.n	8008e74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008e6e:	4b22      	ldr	r3, [pc, #136]	; (8008ef8 <xTaskResumeAll+0x130>)
 8008e70:	2201      	movs	r2, #1
 8008e72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e74:	4b1c      	ldr	r3, [pc, #112]	; (8008ee8 <xTaskResumeAll+0x120>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1cb      	bne.n	8008e14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d001      	beq.n	8008e86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e82:	f000 fb55 	bl	8009530 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e86:	4b1d      	ldr	r3, [pc, #116]	; (8008efc <xTaskResumeAll+0x134>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d010      	beq.n	8008eb4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e92:	f000 f847 	bl	8008f24 <xTaskIncrementTick>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d002      	beq.n	8008ea2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008e9c:	4b16      	ldr	r3, [pc, #88]	; (8008ef8 <xTaskResumeAll+0x130>)
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1f1      	bne.n	8008e92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008eae:	4b13      	ldr	r3, [pc, #76]	; (8008efc <xTaskResumeAll+0x134>)
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008eb4:	4b10      	ldr	r3, [pc, #64]	; (8008ef8 <xTaskResumeAll+0x130>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d009      	beq.n	8008ed0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008ec0:	4b0f      	ldr	r3, [pc, #60]	; (8008f00 <xTaskResumeAll+0x138>)
 8008ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ec6:	601a      	str	r2, [r3, #0]
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ed0:	f001 f8d8 	bl	800a084 <vPortExitCritical>

	return xAlreadyYielded;
 8008ed4:	68bb      	ldr	r3, [r7, #8]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	200015b4 	.word	0x200015b4
 8008ee4:	2000158c 	.word	0x2000158c
 8008ee8:	2000154c 	.word	0x2000154c
 8008eec:	20001594 	.word	0x20001594
 8008ef0:	200010bc 	.word	0x200010bc
 8008ef4:	200010b8 	.word	0x200010b8
 8008ef8:	200015a0 	.word	0x200015a0
 8008efc:	2000159c 	.word	0x2000159c
 8008f00:	e000ed04 	.word	0xe000ed04

08008f04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008f0a:	4b05      	ldr	r3, [pc, #20]	; (8008f20 <xTaskGetTickCount+0x1c>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008f10:	687b      	ldr	r3, [r7, #4]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	370c      	adds	r7, #12
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	20001590 	.word	0x20001590

08008f24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f2e:	4b4f      	ldr	r3, [pc, #316]	; (800906c <xTaskIncrementTick+0x148>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	f040 808f 	bne.w	8009056 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f38:	4b4d      	ldr	r3, [pc, #308]	; (8009070 <xTaskIncrementTick+0x14c>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f40:	4a4b      	ldr	r2, [pc, #300]	; (8009070 <xTaskIncrementTick+0x14c>)
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d120      	bne.n	8008f8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f4c:	4b49      	ldr	r3, [pc, #292]	; (8009074 <xTaskIncrementTick+0x150>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00a      	beq.n	8008f6c <xTaskIncrementTick+0x48>
	__asm volatile
 8008f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5a:	f383 8811 	msr	BASEPRI, r3
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	603b      	str	r3, [r7, #0]
}
 8008f68:	bf00      	nop
 8008f6a:	e7fe      	b.n	8008f6a <xTaskIncrementTick+0x46>
 8008f6c:	4b41      	ldr	r3, [pc, #260]	; (8009074 <xTaskIncrementTick+0x150>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	60fb      	str	r3, [r7, #12]
 8008f72:	4b41      	ldr	r3, [pc, #260]	; (8009078 <xTaskIncrementTick+0x154>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a3f      	ldr	r2, [pc, #252]	; (8009074 <xTaskIncrementTick+0x150>)
 8008f78:	6013      	str	r3, [r2, #0]
 8008f7a:	4a3f      	ldr	r2, [pc, #252]	; (8009078 <xTaskIncrementTick+0x154>)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6013      	str	r3, [r2, #0]
 8008f80:	4b3e      	ldr	r3, [pc, #248]	; (800907c <xTaskIncrementTick+0x158>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	3301      	adds	r3, #1
 8008f86:	4a3d      	ldr	r2, [pc, #244]	; (800907c <xTaskIncrementTick+0x158>)
 8008f88:	6013      	str	r3, [r2, #0]
 8008f8a:	f000 fad1 	bl	8009530 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f8e:	4b3c      	ldr	r3, [pc, #240]	; (8009080 <xTaskIncrementTick+0x15c>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d349      	bcc.n	800902c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f98:	4b36      	ldr	r3, [pc, #216]	; (8009074 <xTaskIncrementTick+0x150>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d104      	bne.n	8008fac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fa2:	4b37      	ldr	r3, [pc, #220]	; (8009080 <xTaskIncrementTick+0x15c>)
 8008fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa8:	601a      	str	r2, [r3, #0]
					break;
 8008faa:	e03f      	b.n	800902c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fac:	4b31      	ldr	r3, [pc, #196]	; (8009074 <xTaskIncrementTick+0x150>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008fbc:	693a      	ldr	r2, [r7, #16]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d203      	bcs.n	8008fcc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008fc4:	4a2e      	ldr	r2, [pc, #184]	; (8009080 <xTaskIncrementTick+0x15c>)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008fca:	e02f      	b.n	800902c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	3304      	adds	r3, #4
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7fe ff99 	bl	8007f08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d004      	beq.n	8008fe8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	3318      	adds	r3, #24
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fe ff90 	bl	8007f08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fec:	4b25      	ldr	r3, [pc, #148]	; (8009084 <xTaskIncrementTick+0x160>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d903      	bls.n	8008ffc <xTaskIncrementTick+0xd8>
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff8:	4a22      	ldr	r2, [pc, #136]	; (8009084 <xTaskIncrementTick+0x160>)
 8008ffa:	6013      	str	r3, [r2, #0]
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009000:	4613      	mov	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4413      	add	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	4a1f      	ldr	r2, [pc, #124]	; (8009088 <xTaskIncrementTick+0x164>)
 800900a:	441a      	add	r2, r3
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	3304      	adds	r3, #4
 8009010:	4619      	mov	r1, r3
 8009012:	4610      	mov	r0, r2
 8009014:	f7fe ff1b 	bl	8007e4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800901c:	4b1b      	ldr	r3, [pc, #108]	; (800908c <xTaskIncrementTick+0x168>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009022:	429a      	cmp	r2, r3
 8009024:	d3b8      	bcc.n	8008f98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009026:	2301      	movs	r3, #1
 8009028:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800902a:	e7b5      	b.n	8008f98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800902c:	4b17      	ldr	r3, [pc, #92]	; (800908c <xTaskIncrementTick+0x168>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009032:	4915      	ldr	r1, [pc, #84]	; (8009088 <xTaskIncrementTick+0x164>)
 8009034:	4613      	mov	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4413      	add	r3, r2
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	440b      	add	r3, r1
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2b01      	cmp	r3, #1
 8009042:	d901      	bls.n	8009048 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009044:	2301      	movs	r3, #1
 8009046:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009048:	4b11      	ldr	r3, [pc, #68]	; (8009090 <xTaskIncrementTick+0x16c>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d007      	beq.n	8009060 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009050:	2301      	movs	r3, #1
 8009052:	617b      	str	r3, [r7, #20]
 8009054:	e004      	b.n	8009060 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009056:	4b0f      	ldr	r3, [pc, #60]	; (8009094 <xTaskIncrementTick+0x170>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	3301      	adds	r3, #1
 800905c:	4a0d      	ldr	r2, [pc, #52]	; (8009094 <xTaskIncrementTick+0x170>)
 800905e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009060:	697b      	ldr	r3, [r7, #20]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3718      	adds	r7, #24
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	200015b4 	.word	0x200015b4
 8009070:	20001590 	.word	0x20001590
 8009074:	20001544 	.word	0x20001544
 8009078:	20001548 	.word	0x20001548
 800907c:	200015a4 	.word	0x200015a4
 8009080:	200015ac 	.word	0x200015ac
 8009084:	20001594 	.word	0x20001594
 8009088:	200010bc 	.word	0x200010bc
 800908c:	200010b8 	.word	0x200010b8
 8009090:	200015a0 	.word	0x200015a0
 8009094:	2000159c 	.word	0x2000159c

08009098 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800909e:	4b28      	ldr	r3, [pc, #160]	; (8009140 <vTaskSwitchContext+0xa8>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d003      	beq.n	80090ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80090a6:	4b27      	ldr	r3, [pc, #156]	; (8009144 <vTaskSwitchContext+0xac>)
 80090a8:	2201      	movs	r2, #1
 80090aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80090ac:	e041      	b.n	8009132 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80090ae:	4b25      	ldr	r3, [pc, #148]	; (8009144 <vTaskSwitchContext+0xac>)
 80090b0:	2200      	movs	r2, #0
 80090b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090b4:	4b24      	ldr	r3, [pc, #144]	; (8009148 <vTaskSwitchContext+0xb0>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	60fb      	str	r3, [r7, #12]
 80090ba:	e010      	b.n	80090de <vTaskSwitchContext+0x46>
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d10a      	bne.n	80090d8 <vTaskSwitchContext+0x40>
	__asm volatile
 80090c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c6:	f383 8811 	msr	BASEPRI, r3
 80090ca:	f3bf 8f6f 	isb	sy
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	607b      	str	r3, [r7, #4]
}
 80090d4:	bf00      	nop
 80090d6:	e7fe      	b.n	80090d6 <vTaskSwitchContext+0x3e>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	3b01      	subs	r3, #1
 80090dc:	60fb      	str	r3, [r7, #12]
 80090de:	491b      	ldr	r1, [pc, #108]	; (800914c <vTaskSwitchContext+0xb4>)
 80090e0:	68fa      	ldr	r2, [r7, #12]
 80090e2:	4613      	mov	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	4413      	add	r3, r2
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	440b      	add	r3, r1
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d0e4      	beq.n	80090bc <vTaskSwitchContext+0x24>
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	4613      	mov	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	4413      	add	r3, r2
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	4a13      	ldr	r2, [pc, #76]	; (800914c <vTaskSwitchContext+0xb4>)
 80090fe:	4413      	add	r3, r2
 8009100:	60bb      	str	r3, [r7, #8]
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	605a      	str	r2, [r3, #4]
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	685a      	ldr	r2, [r3, #4]
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	3308      	adds	r3, #8
 8009114:	429a      	cmp	r2, r3
 8009116:	d104      	bne.n	8009122 <vTaskSwitchContext+0x8a>
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	605a      	str	r2, [r3, #4]
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	4a09      	ldr	r2, [pc, #36]	; (8009150 <vTaskSwitchContext+0xb8>)
 800912a:	6013      	str	r3, [r2, #0]
 800912c:	4a06      	ldr	r2, [pc, #24]	; (8009148 <vTaskSwitchContext+0xb0>)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6013      	str	r3, [r2, #0]
}
 8009132:	bf00      	nop
 8009134:	3714      	adds	r7, #20
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	200015b4 	.word	0x200015b4
 8009144:	200015a0 	.word	0x200015a0
 8009148:	20001594 	.word	0x20001594
 800914c:	200010bc 	.word	0x200010bc
 8009150:	200010b8 	.word	0x200010b8

08009154 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10a      	bne.n	800917a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009168:	f383 8811 	msr	BASEPRI, r3
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	60fb      	str	r3, [r7, #12]
}
 8009176:	bf00      	nop
 8009178:	e7fe      	b.n	8009178 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800917a:	4b07      	ldr	r3, [pc, #28]	; (8009198 <vTaskPlaceOnEventList+0x44>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	3318      	adds	r3, #24
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7fe fe87 	bl	8007e96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009188:	2101      	movs	r1, #1
 800918a:	6838      	ldr	r0, [r7, #0]
 800918c:	f000 fa7c 	bl	8009688 <prvAddCurrentTaskToDelayedList>
}
 8009190:	bf00      	nop
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	200010b8 	.word	0x200010b8

0800919c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800919c:	b580      	push	{r7, lr}
 800919e:	b086      	sub	sp, #24
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d10a      	bne.n	80091c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80091ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b2:	f383 8811 	msr	BASEPRI, r3
 80091b6:	f3bf 8f6f 	isb	sy
 80091ba:	f3bf 8f4f 	dsb	sy
 80091be:	617b      	str	r3, [r7, #20]
}
 80091c0:	bf00      	nop
 80091c2:	e7fe      	b.n	80091c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091c4:	4b0a      	ldr	r3, [pc, #40]	; (80091f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	3318      	adds	r3, #24
 80091ca:	4619      	mov	r1, r3
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f7fe fe3e 	bl	8007e4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d002      	beq.n	80091de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80091d8:	f04f 33ff 	mov.w	r3, #4294967295
 80091dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80091de:	6879      	ldr	r1, [r7, #4]
 80091e0:	68b8      	ldr	r0, [r7, #8]
 80091e2:	f000 fa51 	bl	8009688 <prvAddCurrentTaskToDelayedList>
	}
 80091e6:	bf00      	nop
 80091e8:	3718      	adds	r7, #24
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	200010b8 	.word	0x200010b8

080091f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b086      	sub	sp, #24
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d10a      	bne.n	8009220 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800920a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920e:	f383 8811 	msr	BASEPRI, r3
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	60fb      	str	r3, [r7, #12]
}
 800921c:	bf00      	nop
 800921e:	e7fe      	b.n	800921e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	3318      	adds	r3, #24
 8009224:	4618      	mov	r0, r3
 8009226:	f7fe fe6f 	bl	8007f08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800922a:	4b1e      	ldr	r3, [pc, #120]	; (80092a4 <xTaskRemoveFromEventList+0xb0>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d11d      	bne.n	800926e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	3304      	adds	r3, #4
 8009236:	4618      	mov	r0, r3
 8009238:	f7fe fe66 	bl	8007f08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009240:	4b19      	ldr	r3, [pc, #100]	; (80092a8 <xTaskRemoveFromEventList+0xb4>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	429a      	cmp	r2, r3
 8009246:	d903      	bls.n	8009250 <xTaskRemoveFromEventList+0x5c>
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924c:	4a16      	ldr	r2, [pc, #88]	; (80092a8 <xTaskRemoveFromEventList+0xb4>)
 800924e:	6013      	str	r3, [r2, #0]
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009254:	4613      	mov	r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4413      	add	r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4a13      	ldr	r2, [pc, #76]	; (80092ac <xTaskRemoveFromEventList+0xb8>)
 800925e:	441a      	add	r2, r3
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	3304      	adds	r3, #4
 8009264:	4619      	mov	r1, r3
 8009266:	4610      	mov	r0, r2
 8009268:	f7fe fdf1 	bl	8007e4e <vListInsertEnd>
 800926c:	e005      	b.n	800927a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	3318      	adds	r3, #24
 8009272:	4619      	mov	r1, r3
 8009274:	480e      	ldr	r0, [pc, #56]	; (80092b0 <xTaskRemoveFromEventList+0xbc>)
 8009276:	f7fe fdea 	bl	8007e4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927e:	4b0d      	ldr	r3, [pc, #52]	; (80092b4 <xTaskRemoveFromEventList+0xc0>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009284:	429a      	cmp	r2, r3
 8009286:	d905      	bls.n	8009294 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009288:	2301      	movs	r3, #1
 800928a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800928c:	4b0a      	ldr	r3, [pc, #40]	; (80092b8 <xTaskRemoveFromEventList+0xc4>)
 800928e:	2201      	movs	r2, #1
 8009290:	601a      	str	r2, [r3, #0]
 8009292:	e001      	b.n	8009298 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009294:	2300      	movs	r3, #0
 8009296:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009298:	697b      	ldr	r3, [r7, #20]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3718      	adds	r7, #24
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	200015b4 	.word	0x200015b4
 80092a8:	20001594 	.word	0x20001594
 80092ac:	200010bc 	.word	0x200010bc
 80092b0:	2000154c 	.word	0x2000154c
 80092b4:	200010b8 	.word	0x200010b8
 80092b8:	200015a0 	.word	0x200015a0

080092bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80092c4:	4b06      	ldr	r3, [pc, #24]	; (80092e0 <vTaskInternalSetTimeOutState+0x24>)
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80092cc:	4b05      	ldr	r3, [pc, #20]	; (80092e4 <vTaskInternalSetTimeOutState+0x28>)
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	605a      	str	r2, [r3, #4]
}
 80092d4:	bf00      	nop
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr
 80092e0:	200015a4 	.word	0x200015a4
 80092e4:	20001590 	.word	0x20001590

080092e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b088      	sub	sp, #32
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10a      	bne.n	800930e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80092f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fc:	f383 8811 	msr	BASEPRI, r3
 8009300:	f3bf 8f6f 	isb	sy
 8009304:	f3bf 8f4f 	dsb	sy
 8009308:	613b      	str	r3, [r7, #16]
}
 800930a:	bf00      	nop
 800930c:	e7fe      	b.n	800930c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10a      	bne.n	800932a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	60fb      	str	r3, [r7, #12]
}
 8009326:	bf00      	nop
 8009328:	e7fe      	b.n	8009328 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800932a:	f000 fe7b 	bl	800a024 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800932e:	4b1d      	ldr	r3, [pc, #116]	; (80093a4 <xTaskCheckForTimeOut+0xbc>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	69ba      	ldr	r2, [r7, #24]
 800933a:	1ad3      	subs	r3, r2, r3
 800933c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009346:	d102      	bne.n	800934e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009348:	2300      	movs	r3, #0
 800934a:	61fb      	str	r3, [r7, #28]
 800934c:	e023      	b.n	8009396 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	4b15      	ldr	r3, [pc, #84]	; (80093a8 <xTaskCheckForTimeOut+0xc0>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	429a      	cmp	r2, r3
 8009358:	d007      	beq.n	800936a <xTaskCheckForTimeOut+0x82>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	69ba      	ldr	r2, [r7, #24]
 8009360:	429a      	cmp	r2, r3
 8009362:	d302      	bcc.n	800936a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009364:	2301      	movs	r3, #1
 8009366:	61fb      	str	r3, [r7, #28]
 8009368:	e015      	b.n	8009396 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	429a      	cmp	r2, r3
 8009372:	d20b      	bcs.n	800938c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	1ad2      	subs	r2, r2, r3
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f7ff ff9b 	bl	80092bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009386:	2300      	movs	r3, #0
 8009388:	61fb      	str	r3, [r7, #28]
 800938a:	e004      	b.n	8009396 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	2200      	movs	r2, #0
 8009390:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009392:	2301      	movs	r3, #1
 8009394:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009396:	f000 fe75 	bl	800a084 <vPortExitCritical>

	return xReturn;
 800939a:	69fb      	ldr	r3, [r7, #28]
}
 800939c:	4618      	mov	r0, r3
 800939e:	3720      	adds	r7, #32
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	20001590 	.word	0x20001590
 80093a8:	200015a4 	.word	0x200015a4

080093ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80093ac:	b480      	push	{r7}
 80093ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80093b0:	4b03      	ldr	r3, [pc, #12]	; (80093c0 <vTaskMissedYield+0x14>)
 80093b2:	2201      	movs	r2, #1
 80093b4:	601a      	str	r2, [r3, #0]
}
 80093b6:	bf00      	nop
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr
 80093c0:	200015a0 	.word	0x200015a0

080093c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80093cc:	f000 f852 	bl	8009474 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80093d0:	4b06      	ldr	r3, [pc, #24]	; (80093ec <prvIdleTask+0x28>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d9f9      	bls.n	80093cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80093d8:	4b05      	ldr	r3, [pc, #20]	; (80093f0 <prvIdleTask+0x2c>)
 80093da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093de:	601a      	str	r2, [r3, #0]
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80093e8:	e7f0      	b.n	80093cc <prvIdleTask+0x8>
 80093ea:	bf00      	nop
 80093ec:	200010bc 	.word	0x200010bc
 80093f0:	e000ed04 	.word	0xe000ed04

080093f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093fa:	2300      	movs	r3, #0
 80093fc:	607b      	str	r3, [r7, #4]
 80093fe:	e00c      	b.n	800941a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	4613      	mov	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4413      	add	r3, r2
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	4a12      	ldr	r2, [pc, #72]	; (8009454 <prvInitialiseTaskLists+0x60>)
 800940c:	4413      	add	r3, r2
 800940e:	4618      	mov	r0, r3
 8009410:	f7fe fcf0 	bl	8007df4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	3301      	adds	r3, #1
 8009418:	607b      	str	r3, [r7, #4]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2b37      	cmp	r3, #55	; 0x37
 800941e:	d9ef      	bls.n	8009400 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009420:	480d      	ldr	r0, [pc, #52]	; (8009458 <prvInitialiseTaskLists+0x64>)
 8009422:	f7fe fce7 	bl	8007df4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009426:	480d      	ldr	r0, [pc, #52]	; (800945c <prvInitialiseTaskLists+0x68>)
 8009428:	f7fe fce4 	bl	8007df4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800942c:	480c      	ldr	r0, [pc, #48]	; (8009460 <prvInitialiseTaskLists+0x6c>)
 800942e:	f7fe fce1 	bl	8007df4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009432:	480c      	ldr	r0, [pc, #48]	; (8009464 <prvInitialiseTaskLists+0x70>)
 8009434:	f7fe fcde 	bl	8007df4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009438:	480b      	ldr	r0, [pc, #44]	; (8009468 <prvInitialiseTaskLists+0x74>)
 800943a:	f7fe fcdb 	bl	8007df4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800943e:	4b0b      	ldr	r3, [pc, #44]	; (800946c <prvInitialiseTaskLists+0x78>)
 8009440:	4a05      	ldr	r2, [pc, #20]	; (8009458 <prvInitialiseTaskLists+0x64>)
 8009442:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009444:	4b0a      	ldr	r3, [pc, #40]	; (8009470 <prvInitialiseTaskLists+0x7c>)
 8009446:	4a05      	ldr	r2, [pc, #20]	; (800945c <prvInitialiseTaskLists+0x68>)
 8009448:	601a      	str	r2, [r3, #0]
}
 800944a:	bf00      	nop
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	200010bc 	.word	0x200010bc
 8009458:	2000151c 	.word	0x2000151c
 800945c:	20001530 	.word	0x20001530
 8009460:	2000154c 	.word	0x2000154c
 8009464:	20001560 	.word	0x20001560
 8009468:	20001578 	.word	0x20001578
 800946c:	20001544 	.word	0x20001544
 8009470:	20001548 	.word	0x20001548

08009474 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800947a:	e019      	b.n	80094b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800947c:	f000 fdd2 	bl	800a024 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009480:	4b10      	ldr	r3, [pc, #64]	; (80094c4 <prvCheckTasksWaitingTermination+0x50>)
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	3304      	adds	r3, #4
 800948c:	4618      	mov	r0, r3
 800948e:	f7fe fd3b 	bl	8007f08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009492:	4b0d      	ldr	r3, [pc, #52]	; (80094c8 <prvCheckTasksWaitingTermination+0x54>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	3b01      	subs	r3, #1
 8009498:	4a0b      	ldr	r2, [pc, #44]	; (80094c8 <prvCheckTasksWaitingTermination+0x54>)
 800949a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800949c:	4b0b      	ldr	r3, [pc, #44]	; (80094cc <prvCheckTasksWaitingTermination+0x58>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	3b01      	subs	r3, #1
 80094a2:	4a0a      	ldr	r2, [pc, #40]	; (80094cc <prvCheckTasksWaitingTermination+0x58>)
 80094a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80094a6:	f000 fded 	bl	800a084 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 f810 	bl	80094d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094b0:	4b06      	ldr	r3, [pc, #24]	; (80094cc <prvCheckTasksWaitingTermination+0x58>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d1e1      	bne.n	800947c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80094b8:	bf00      	nop
 80094ba:	bf00      	nop
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	20001560 	.word	0x20001560
 80094c8:	2000158c 	.word	0x2000158c
 80094cc:	20001574 	.word	0x20001574

080094d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d108      	bne.n	80094f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e6:	4618      	mov	r0, r3
 80094e8:	f000 ff8a 	bl	800a400 <vPortFree>
				vPortFree( pxTCB );
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 ff87 	bl	800a400 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80094f2:	e018      	b.n	8009526 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d103      	bne.n	8009506 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 ff7e 	bl	800a400 <vPortFree>
	}
 8009504:	e00f      	b.n	8009526 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800950c:	2b02      	cmp	r3, #2
 800950e:	d00a      	beq.n	8009526 <prvDeleteTCB+0x56>
	__asm volatile
 8009510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009514:	f383 8811 	msr	BASEPRI, r3
 8009518:	f3bf 8f6f 	isb	sy
 800951c:	f3bf 8f4f 	dsb	sy
 8009520:	60fb      	str	r3, [r7, #12]
}
 8009522:	bf00      	nop
 8009524:	e7fe      	b.n	8009524 <prvDeleteTCB+0x54>
	}
 8009526:	bf00      	nop
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
	...

08009530 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009536:	4b0c      	ldr	r3, [pc, #48]	; (8009568 <prvResetNextTaskUnblockTime+0x38>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d104      	bne.n	800954a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009540:	4b0a      	ldr	r3, [pc, #40]	; (800956c <prvResetNextTaskUnblockTime+0x3c>)
 8009542:	f04f 32ff 	mov.w	r2, #4294967295
 8009546:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009548:	e008      	b.n	800955c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800954a:	4b07      	ldr	r3, [pc, #28]	; (8009568 <prvResetNextTaskUnblockTime+0x38>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	4a04      	ldr	r2, [pc, #16]	; (800956c <prvResetNextTaskUnblockTime+0x3c>)
 800955a:	6013      	str	r3, [r2, #0]
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr
 8009568:	20001544 	.word	0x20001544
 800956c:	200015ac 	.word	0x200015ac

08009570 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009576:	4b0b      	ldr	r3, [pc, #44]	; (80095a4 <xTaskGetSchedulerState+0x34>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d102      	bne.n	8009584 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800957e:	2301      	movs	r3, #1
 8009580:	607b      	str	r3, [r7, #4]
 8009582:	e008      	b.n	8009596 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009584:	4b08      	ldr	r3, [pc, #32]	; (80095a8 <xTaskGetSchedulerState+0x38>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d102      	bne.n	8009592 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800958c:	2302      	movs	r3, #2
 800958e:	607b      	str	r3, [r7, #4]
 8009590:	e001      	b.n	8009596 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009592:	2300      	movs	r3, #0
 8009594:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009596:	687b      	ldr	r3, [r7, #4]
	}
 8009598:	4618      	mov	r0, r3
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr
 80095a4:	20001598 	.word	0x20001598
 80095a8:	200015b4 	.word	0x200015b4

080095ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80095b8:	2300      	movs	r3, #0
 80095ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d056      	beq.n	8009670 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80095c2:	4b2e      	ldr	r3, [pc, #184]	; (800967c <xTaskPriorityDisinherit+0xd0>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	693a      	ldr	r2, [r7, #16]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d00a      	beq.n	80095e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80095cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d0:	f383 8811 	msr	BASEPRI, r3
 80095d4:	f3bf 8f6f 	isb	sy
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	60fb      	str	r3, [r7, #12]
}
 80095de:	bf00      	nop
 80095e0:	e7fe      	b.n	80095e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d10a      	bne.n	8009600 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80095ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ee:	f383 8811 	msr	BASEPRI, r3
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	60bb      	str	r3, [r7, #8]
}
 80095fc:	bf00      	nop
 80095fe:	e7fe      	b.n	80095fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009604:	1e5a      	subs	r2, r3, #1
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009612:	429a      	cmp	r2, r3
 8009614:	d02c      	beq.n	8009670 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800961a:	2b00      	cmp	r3, #0
 800961c:	d128      	bne.n	8009670 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	3304      	adds	r3, #4
 8009622:	4618      	mov	r0, r3
 8009624:	f7fe fc70 	bl	8007f08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009634:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009640:	4b0f      	ldr	r3, [pc, #60]	; (8009680 <xTaskPriorityDisinherit+0xd4>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	429a      	cmp	r2, r3
 8009646:	d903      	bls.n	8009650 <xTaskPriorityDisinherit+0xa4>
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964c:	4a0c      	ldr	r2, [pc, #48]	; (8009680 <xTaskPriorityDisinherit+0xd4>)
 800964e:	6013      	str	r3, [r2, #0]
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009654:	4613      	mov	r3, r2
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	4413      	add	r3, r2
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	4a09      	ldr	r2, [pc, #36]	; (8009684 <xTaskPriorityDisinherit+0xd8>)
 800965e:	441a      	add	r2, r3
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	3304      	adds	r3, #4
 8009664:	4619      	mov	r1, r3
 8009666:	4610      	mov	r0, r2
 8009668:	f7fe fbf1 	bl	8007e4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800966c:	2301      	movs	r3, #1
 800966e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009670:	697b      	ldr	r3, [r7, #20]
	}
 8009672:	4618      	mov	r0, r3
 8009674:	3718      	adds	r7, #24
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	200010b8 	.word	0x200010b8
 8009680:	20001594 	.word	0x20001594
 8009684:	200010bc 	.word	0x200010bc

08009688 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009692:	4b21      	ldr	r3, [pc, #132]	; (8009718 <prvAddCurrentTaskToDelayedList+0x90>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009698:	4b20      	ldr	r3, [pc, #128]	; (800971c <prvAddCurrentTaskToDelayedList+0x94>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	3304      	adds	r3, #4
 800969e:	4618      	mov	r0, r3
 80096a0:	f7fe fc32 	bl	8007f08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096aa:	d10a      	bne.n	80096c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d007      	beq.n	80096c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096b2:	4b1a      	ldr	r3, [pc, #104]	; (800971c <prvAddCurrentTaskToDelayedList+0x94>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3304      	adds	r3, #4
 80096b8:	4619      	mov	r1, r3
 80096ba:	4819      	ldr	r0, [pc, #100]	; (8009720 <prvAddCurrentTaskToDelayedList+0x98>)
 80096bc:	f7fe fbc7 	bl	8007e4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80096c0:	e026      	b.n	8009710 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4413      	add	r3, r2
 80096c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80096ca:	4b14      	ldr	r3, [pc, #80]	; (800971c <prvAddCurrentTaskToDelayedList+0x94>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68ba      	ldr	r2, [r7, #8]
 80096d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d209      	bcs.n	80096ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096da:	4b12      	ldr	r3, [pc, #72]	; (8009724 <prvAddCurrentTaskToDelayedList+0x9c>)
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	4b0f      	ldr	r3, [pc, #60]	; (800971c <prvAddCurrentTaskToDelayedList+0x94>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	3304      	adds	r3, #4
 80096e4:	4619      	mov	r1, r3
 80096e6:	4610      	mov	r0, r2
 80096e8:	f7fe fbd5 	bl	8007e96 <vListInsert>
}
 80096ec:	e010      	b.n	8009710 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096ee:	4b0e      	ldr	r3, [pc, #56]	; (8009728 <prvAddCurrentTaskToDelayedList+0xa0>)
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	4b0a      	ldr	r3, [pc, #40]	; (800971c <prvAddCurrentTaskToDelayedList+0x94>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	3304      	adds	r3, #4
 80096f8:	4619      	mov	r1, r3
 80096fa:	4610      	mov	r0, r2
 80096fc:	f7fe fbcb 	bl	8007e96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009700:	4b0a      	ldr	r3, [pc, #40]	; (800972c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	68ba      	ldr	r2, [r7, #8]
 8009706:	429a      	cmp	r2, r3
 8009708:	d202      	bcs.n	8009710 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800970a:	4a08      	ldr	r2, [pc, #32]	; (800972c <prvAddCurrentTaskToDelayedList+0xa4>)
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	6013      	str	r3, [r2, #0]
}
 8009710:	bf00      	nop
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	20001590 	.word	0x20001590
 800971c:	200010b8 	.word	0x200010b8
 8009720:	20001578 	.word	0x20001578
 8009724:	20001548 	.word	0x20001548
 8009728:	20001544 	.word	0x20001544
 800972c:	200015ac 	.word	0x200015ac

08009730 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b08a      	sub	sp, #40	; 0x28
 8009734:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009736:	2300      	movs	r3, #0
 8009738:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800973a:	f000 fb07 	bl	8009d4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800973e:	4b1c      	ldr	r3, [pc, #112]	; (80097b0 <xTimerCreateTimerTask+0x80>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d021      	beq.n	800978a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009746:	2300      	movs	r3, #0
 8009748:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800974a:	2300      	movs	r3, #0
 800974c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800974e:	1d3a      	adds	r2, r7, #4
 8009750:	f107 0108 	add.w	r1, r7, #8
 8009754:	f107 030c 	add.w	r3, r7, #12
 8009758:	4618      	mov	r0, r3
 800975a:	f7fe fb31 	bl	8007dc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800975e:	6879      	ldr	r1, [r7, #4]
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	68fa      	ldr	r2, [r7, #12]
 8009764:	9202      	str	r2, [sp, #8]
 8009766:	9301      	str	r3, [sp, #4]
 8009768:	2302      	movs	r3, #2
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	2300      	movs	r3, #0
 800976e:	460a      	mov	r2, r1
 8009770:	4910      	ldr	r1, [pc, #64]	; (80097b4 <xTimerCreateTimerTask+0x84>)
 8009772:	4811      	ldr	r0, [pc, #68]	; (80097b8 <xTimerCreateTimerTask+0x88>)
 8009774:	f7ff f8de 	bl	8008934 <xTaskCreateStatic>
 8009778:	4603      	mov	r3, r0
 800977a:	4a10      	ldr	r2, [pc, #64]	; (80097bc <xTimerCreateTimerTask+0x8c>)
 800977c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800977e:	4b0f      	ldr	r3, [pc, #60]	; (80097bc <xTimerCreateTimerTask+0x8c>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d001      	beq.n	800978a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009786:	2301      	movs	r3, #1
 8009788:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10a      	bne.n	80097a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009794:	f383 8811 	msr	BASEPRI, r3
 8009798:	f3bf 8f6f 	isb	sy
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	613b      	str	r3, [r7, #16]
}
 80097a2:	bf00      	nop
 80097a4:	e7fe      	b.n	80097a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80097a6:	697b      	ldr	r3, [r7, #20]
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3718      	adds	r7, #24
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	200015e8 	.word	0x200015e8
 80097b4:	0800c188 	.word	0x0800c188
 80097b8:	080098f5 	.word	0x080098f5
 80097bc:	200015ec 	.word	0x200015ec

080097c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b08a      	sub	sp, #40	; 0x28
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
 80097cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80097ce:	2300      	movs	r3, #0
 80097d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d10a      	bne.n	80097ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80097d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097dc:	f383 8811 	msr	BASEPRI, r3
 80097e0:	f3bf 8f6f 	isb	sy
 80097e4:	f3bf 8f4f 	dsb	sy
 80097e8:	623b      	str	r3, [r7, #32]
}
 80097ea:	bf00      	nop
 80097ec:	e7fe      	b.n	80097ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80097ee:	4b1a      	ldr	r3, [pc, #104]	; (8009858 <xTimerGenericCommand+0x98>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d02a      	beq.n	800984c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	2b05      	cmp	r3, #5
 8009806:	dc18      	bgt.n	800983a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009808:	f7ff feb2 	bl	8009570 <xTaskGetSchedulerState>
 800980c:	4603      	mov	r3, r0
 800980e:	2b02      	cmp	r3, #2
 8009810:	d109      	bne.n	8009826 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009812:	4b11      	ldr	r3, [pc, #68]	; (8009858 <xTimerGenericCommand+0x98>)
 8009814:	6818      	ldr	r0, [r3, #0]
 8009816:	f107 0110 	add.w	r1, r7, #16
 800981a:	2300      	movs	r3, #0
 800981c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800981e:	f7fe fca1 	bl	8008164 <xQueueGenericSend>
 8009822:	6278      	str	r0, [r7, #36]	; 0x24
 8009824:	e012      	b.n	800984c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009826:	4b0c      	ldr	r3, [pc, #48]	; (8009858 <xTimerGenericCommand+0x98>)
 8009828:	6818      	ldr	r0, [r3, #0]
 800982a:	f107 0110 	add.w	r1, r7, #16
 800982e:	2300      	movs	r3, #0
 8009830:	2200      	movs	r2, #0
 8009832:	f7fe fc97 	bl	8008164 <xQueueGenericSend>
 8009836:	6278      	str	r0, [r7, #36]	; 0x24
 8009838:	e008      	b.n	800984c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800983a:	4b07      	ldr	r3, [pc, #28]	; (8009858 <xTimerGenericCommand+0x98>)
 800983c:	6818      	ldr	r0, [r3, #0]
 800983e:	f107 0110 	add.w	r1, r7, #16
 8009842:	2300      	movs	r3, #0
 8009844:	683a      	ldr	r2, [r7, #0]
 8009846:	f7fe fd8b 	bl	8008360 <xQueueGenericSendFromISR>
 800984a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800984c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800984e:	4618      	mov	r0, r3
 8009850:	3728      	adds	r7, #40	; 0x28
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	200015e8 	.word	0x200015e8

0800985c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b088      	sub	sp, #32
 8009860:	af02      	add	r7, sp, #8
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009866:	4b22      	ldr	r3, [pc, #136]	; (80098f0 <prvProcessExpiredTimer+0x94>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	3304      	adds	r3, #4
 8009874:	4618      	mov	r0, r3
 8009876:	f7fe fb47 	bl	8007f08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009880:	f003 0304 	and.w	r3, r3, #4
 8009884:	2b00      	cmp	r3, #0
 8009886:	d022      	beq.n	80098ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	699a      	ldr	r2, [r3, #24]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	18d1      	adds	r1, r2, r3
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	683a      	ldr	r2, [r7, #0]
 8009894:	6978      	ldr	r0, [r7, #20]
 8009896:	f000 f8d1 	bl	8009a3c <prvInsertTimerInActiveList>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d01f      	beq.n	80098e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098a0:	2300      	movs	r3, #0
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	2300      	movs	r3, #0
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	2100      	movs	r1, #0
 80098aa:	6978      	ldr	r0, [r7, #20]
 80098ac:	f7ff ff88 	bl	80097c0 <xTimerGenericCommand>
 80098b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d113      	bne.n	80098e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80098b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098bc:	f383 8811 	msr	BASEPRI, r3
 80098c0:	f3bf 8f6f 	isb	sy
 80098c4:	f3bf 8f4f 	dsb	sy
 80098c8:	60fb      	str	r3, [r7, #12]
}
 80098ca:	bf00      	nop
 80098cc:	e7fe      	b.n	80098cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098d4:	f023 0301 	bic.w	r3, r3, #1
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	6a1b      	ldr	r3, [r3, #32]
 80098e4:	6978      	ldr	r0, [r7, #20]
 80098e6:	4798      	blx	r3
}
 80098e8:	bf00      	nop
 80098ea:	3718      	adds	r7, #24
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	200015e0 	.word	0x200015e0

080098f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098fc:	f107 0308 	add.w	r3, r7, #8
 8009900:	4618      	mov	r0, r3
 8009902:	f000 f857 	bl	80099b4 <prvGetNextExpireTime>
 8009906:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	4619      	mov	r1, r3
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f000 f803 	bl	8009918 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009912:	f000 f8d5 	bl	8009ac0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009916:	e7f1      	b.n	80098fc <prvTimerTask+0x8>

08009918 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009922:	f7ff fa43 	bl	8008dac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009926:	f107 0308 	add.w	r3, r7, #8
 800992a:	4618      	mov	r0, r3
 800992c:	f000 f866 	bl	80099fc <prvSampleTimeNow>
 8009930:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d130      	bne.n	800999a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d10a      	bne.n	8009954 <prvProcessTimerOrBlockTask+0x3c>
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	429a      	cmp	r2, r3
 8009944:	d806      	bhi.n	8009954 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009946:	f7ff fa3f 	bl	8008dc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800994a:	68f9      	ldr	r1, [r7, #12]
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f7ff ff85 	bl	800985c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009952:	e024      	b.n	800999e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d008      	beq.n	800996c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800995a:	4b13      	ldr	r3, [pc, #76]	; (80099a8 <prvProcessTimerOrBlockTask+0x90>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d101      	bne.n	8009968 <prvProcessTimerOrBlockTask+0x50>
 8009964:	2301      	movs	r3, #1
 8009966:	e000      	b.n	800996a <prvProcessTimerOrBlockTask+0x52>
 8009968:	2300      	movs	r3, #0
 800996a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800996c:	4b0f      	ldr	r3, [pc, #60]	; (80099ac <prvProcessTimerOrBlockTask+0x94>)
 800996e:	6818      	ldr	r0, [r3, #0]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	1ad3      	subs	r3, r2, r3
 8009976:	683a      	ldr	r2, [r7, #0]
 8009978:	4619      	mov	r1, r3
 800997a:	f7fe ffa7 	bl	80088cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800997e:	f7ff fa23 	bl	8008dc8 <xTaskResumeAll>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d10a      	bne.n	800999e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009988:	4b09      	ldr	r3, [pc, #36]	; (80099b0 <prvProcessTimerOrBlockTask+0x98>)
 800998a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800998e:	601a      	str	r2, [r3, #0]
 8009990:	f3bf 8f4f 	dsb	sy
 8009994:	f3bf 8f6f 	isb	sy
}
 8009998:	e001      	b.n	800999e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800999a:	f7ff fa15 	bl	8008dc8 <xTaskResumeAll>
}
 800999e:	bf00      	nop
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	200015e4 	.word	0x200015e4
 80099ac:	200015e8 	.word	0x200015e8
 80099b0:	e000ed04 	.word	0xe000ed04

080099b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80099bc:	4b0e      	ldr	r3, [pc, #56]	; (80099f8 <prvGetNextExpireTime+0x44>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d101      	bne.n	80099ca <prvGetNextExpireTime+0x16>
 80099c6:	2201      	movs	r2, #1
 80099c8:	e000      	b.n	80099cc <prvGetNextExpireTime+0x18>
 80099ca:	2200      	movs	r2, #0
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d105      	bne.n	80099e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099d8:	4b07      	ldr	r3, [pc, #28]	; (80099f8 <prvGetNextExpireTime+0x44>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	60fb      	str	r3, [r7, #12]
 80099e2:	e001      	b.n	80099e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80099e4:	2300      	movs	r3, #0
 80099e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80099e8:	68fb      	ldr	r3, [r7, #12]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3714      	adds	r7, #20
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	200015e0 	.word	0x200015e0

080099fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009a04:	f7ff fa7e 	bl	8008f04 <xTaskGetTickCount>
 8009a08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009a0a:	4b0b      	ldr	r3, [pc, #44]	; (8009a38 <prvSampleTimeNow+0x3c>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d205      	bcs.n	8009a20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009a14:	f000 f936 	bl	8009c84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	601a      	str	r2, [r3, #0]
 8009a1e:	e002      	b.n	8009a26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009a26:	4a04      	ldr	r2, [pc, #16]	; (8009a38 <prvSampleTimeNow+0x3c>)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	200015f0 	.word	0x200015f0

08009a3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b086      	sub	sp, #24
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
 8009a48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	68ba      	ldr	r2, [r7, #8]
 8009a52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	68fa      	ldr	r2, [r7, #12]
 8009a58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d812      	bhi.n	8009a88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	1ad2      	subs	r2, r2, r3
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	699b      	ldr	r3, [r3, #24]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d302      	bcc.n	8009a76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009a70:	2301      	movs	r3, #1
 8009a72:	617b      	str	r3, [r7, #20]
 8009a74:	e01b      	b.n	8009aae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a76:	4b10      	ldr	r3, [pc, #64]	; (8009ab8 <prvInsertTimerInActiveList+0x7c>)
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	3304      	adds	r3, #4
 8009a7e:	4619      	mov	r1, r3
 8009a80:	4610      	mov	r0, r2
 8009a82:	f7fe fa08 	bl	8007e96 <vListInsert>
 8009a86:	e012      	b.n	8009aae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d206      	bcs.n	8009a9e <prvInsertTimerInActiveList+0x62>
 8009a90:	68ba      	ldr	r2, [r7, #8]
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d302      	bcc.n	8009a9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	617b      	str	r3, [r7, #20]
 8009a9c:	e007      	b.n	8009aae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a9e:	4b07      	ldr	r3, [pc, #28]	; (8009abc <prvInsertTimerInActiveList+0x80>)
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	3304      	adds	r3, #4
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	f7fe f9f4 	bl	8007e96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009aae:	697b      	ldr	r3, [r7, #20]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3718      	adds	r7, #24
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	200015e4 	.word	0x200015e4
 8009abc:	200015e0 	.word	0x200015e0

08009ac0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b08e      	sub	sp, #56	; 0x38
 8009ac4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ac6:	e0ca      	b.n	8009c5e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	da18      	bge.n	8009b00 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009ace:	1d3b      	adds	r3, r7, #4
 8009ad0:	3304      	adds	r3, #4
 8009ad2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d10a      	bne.n	8009af0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ade:	f383 8811 	msr	BASEPRI, r3
 8009ae2:	f3bf 8f6f 	isb	sy
 8009ae6:	f3bf 8f4f 	dsb	sy
 8009aea:	61fb      	str	r3, [r7, #28]
}
 8009aec:	bf00      	nop
 8009aee:	e7fe      	b.n	8009aee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009af6:	6850      	ldr	r0, [r2, #4]
 8009af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009afa:	6892      	ldr	r2, [r2, #8]
 8009afc:	4611      	mov	r1, r2
 8009afe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f2c0 80aa 	blt.w	8009c5c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0e:	695b      	ldr	r3, [r3, #20]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d004      	beq.n	8009b1e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b16:	3304      	adds	r3, #4
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7fe f9f5 	bl	8007f08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b1e:	463b      	mov	r3, r7
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7ff ff6b 	bl	80099fc <prvSampleTimeNow>
 8009b26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2b09      	cmp	r3, #9
 8009b2c:	f200 8097 	bhi.w	8009c5e <prvProcessReceivedCommands+0x19e>
 8009b30:	a201      	add	r2, pc, #4	; (adr r2, 8009b38 <prvProcessReceivedCommands+0x78>)
 8009b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b36:	bf00      	nop
 8009b38:	08009b61 	.word	0x08009b61
 8009b3c:	08009b61 	.word	0x08009b61
 8009b40:	08009b61 	.word	0x08009b61
 8009b44:	08009bd5 	.word	0x08009bd5
 8009b48:	08009be9 	.word	0x08009be9
 8009b4c:	08009c33 	.word	0x08009c33
 8009b50:	08009b61 	.word	0x08009b61
 8009b54:	08009b61 	.word	0x08009b61
 8009b58:	08009bd5 	.word	0x08009bd5
 8009b5c:	08009be9 	.word	0x08009be9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b66:	f043 0301 	orr.w	r3, r3, #1
 8009b6a:	b2da      	uxtb	r2, r3
 8009b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009b72:	68ba      	ldr	r2, [r7, #8]
 8009b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	18d1      	adds	r1, r2, r3
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b80:	f7ff ff5c 	bl	8009a3c <prvInsertTimerInActiveList>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d069      	beq.n	8009c5e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8c:	6a1b      	ldr	r3, [r3, #32]
 8009b8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b98:	f003 0304 	and.w	r3, r3, #4
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d05e      	beq.n	8009c5e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009ba0:	68ba      	ldr	r2, [r7, #8]
 8009ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba4:	699b      	ldr	r3, [r3, #24]
 8009ba6:	441a      	add	r2, r3
 8009ba8:	2300      	movs	r3, #0
 8009baa:	9300      	str	r3, [sp, #0]
 8009bac:	2300      	movs	r3, #0
 8009bae:	2100      	movs	r1, #0
 8009bb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bb2:	f7ff fe05 	bl	80097c0 <xTimerGenericCommand>
 8009bb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009bb8:	6a3b      	ldr	r3, [r7, #32]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d14f      	bne.n	8009c5e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	61bb      	str	r3, [r7, #24]
}
 8009bd0:	bf00      	nop
 8009bd2:	e7fe      	b.n	8009bd2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bda:	f023 0301 	bic.w	r3, r3, #1
 8009bde:	b2da      	uxtb	r2, r3
 8009be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009be6:	e03a      	b.n	8009c5e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bee:	f043 0301 	orr.w	r3, r3, #1
 8009bf2:	b2da      	uxtb	r2, r3
 8009bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c02:	699b      	ldr	r3, [r3, #24]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d10a      	bne.n	8009c1e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0c:	f383 8811 	msr	BASEPRI, r3
 8009c10:	f3bf 8f6f 	isb	sy
 8009c14:	f3bf 8f4f 	dsb	sy
 8009c18:	617b      	str	r3, [r7, #20]
}
 8009c1a:	bf00      	nop
 8009c1c:	e7fe      	b.n	8009c1c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c20:	699a      	ldr	r2, [r3, #24]
 8009c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c24:	18d1      	adds	r1, r2, r3
 8009c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c2c:	f7ff ff06 	bl	8009a3c <prvInsertTimerInActiveList>
					break;
 8009c30:	e015      	b.n	8009c5e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c38:	f003 0302 	and.w	r3, r3, #2
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d103      	bne.n	8009c48 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c42:	f000 fbdd 	bl	800a400 <vPortFree>
 8009c46:	e00a      	b.n	8009c5e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c4e:	f023 0301 	bic.w	r3, r3, #1
 8009c52:	b2da      	uxtb	r2, r3
 8009c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009c5a:	e000      	b.n	8009c5e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009c5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c5e:	4b08      	ldr	r3, [pc, #32]	; (8009c80 <prvProcessReceivedCommands+0x1c0>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	1d39      	adds	r1, r7, #4
 8009c64:	2200      	movs	r2, #0
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7fe fc16 	bl	8008498 <xQueueReceive>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	f47f af2a 	bne.w	8009ac8 <prvProcessReceivedCommands+0x8>
	}
}
 8009c74:	bf00      	nop
 8009c76:	bf00      	nop
 8009c78:	3730      	adds	r7, #48	; 0x30
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	200015e8 	.word	0x200015e8

08009c84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b088      	sub	sp, #32
 8009c88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c8a:	e048      	b.n	8009d1e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c8c:	4b2d      	ldr	r3, [pc, #180]	; (8009d44 <prvSwitchTimerLists+0xc0>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c96:	4b2b      	ldr	r3, [pc, #172]	; (8009d44 <prvSwitchTimerLists+0xc0>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	3304      	adds	r3, #4
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7fe f92f 	bl	8007f08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6a1b      	ldr	r3, [r3, #32]
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cb8:	f003 0304 	and.w	r3, r3, #4
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d02e      	beq.n	8009d1e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	699b      	ldr	r3, [r3, #24]
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009cca:	68ba      	ldr	r2, [r7, #8]
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d90e      	bls.n	8009cf0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	68ba      	ldr	r2, [r7, #8]
 8009cd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009cde:	4b19      	ldr	r3, [pc, #100]	; (8009d44 <prvSwitchTimerLists+0xc0>)
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	3304      	adds	r3, #4
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	4610      	mov	r0, r2
 8009cea:	f7fe f8d4 	bl	8007e96 <vListInsert>
 8009cee:	e016      	b.n	8009d1e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	693a      	ldr	r2, [r7, #16]
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f7ff fd60 	bl	80097c0 <xTimerGenericCommand>
 8009d00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d10a      	bne.n	8009d1e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0c:	f383 8811 	msr	BASEPRI, r3
 8009d10:	f3bf 8f6f 	isb	sy
 8009d14:	f3bf 8f4f 	dsb	sy
 8009d18:	603b      	str	r3, [r7, #0]
}
 8009d1a:	bf00      	nop
 8009d1c:	e7fe      	b.n	8009d1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d1e:	4b09      	ldr	r3, [pc, #36]	; (8009d44 <prvSwitchTimerLists+0xc0>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1b1      	bne.n	8009c8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009d28:	4b06      	ldr	r3, [pc, #24]	; (8009d44 <prvSwitchTimerLists+0xc0>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009d2e:	4b06      	ldr	r3, [pc, #24]	; (8009d48 <prvSwitchTimerLists+0xc4>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a04      	ldr	r2, [pc, #16]	; (8009d44 <prvSwitchTimerLists+0xc0>)
 8009d34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009d36:	4a04      	ldr	r2, [pc, #16]	; (8009d48 <prvSwitchTimerLists+0xc4>)
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	6013      	str	r3, [r2, #0]
}
 8009d3c:	bf00      	nop
 8009d3e:	3718      	adds	r7, #24
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	200015e0 	.word	0x200015e0
 8009d48:	200015e4 	.word	0x200015e4

08009d4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009d52:	f000 f967 	bl	800a024 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009d56:	4b15      	ldr	r3, [pc, #84]	; (8009dac <prvCheckForValidListAndQueue+0x60>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d120      	bne.n	8009da0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009d5e:	4814      	ldr	r0, [pc, #80]	; (8009db0 <prvCheckForValidListAndQueue+0x64>)
 8009d60:	f7fe f848 	bl	8007df4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009d64:	4813      	ldr	r0, [pc, #76]	; (8009db4 <prvCheckForValidListAndQueue+0x68>)
 8009d66:	f7fe f845 	bl	8007df4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009d6a:	4b13      	ldr	r3, [pc, #76]	; (8009db8 <prvCheckForValidListAndQueue+0x6c>)
 8009d6c:	4a10      	ldr	r2, [pc, #64]	; (8009db0 <prvCheckForValidListAndQueue+0x64>)
 8009d6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009d70:	4b12      	ldr	r3, [pc, #72]	; (8009dbc <prvCheckForValidListAndQueue+0x70>)
 8009d72:	4a10      	ldr	r2, [pc, #64]	; (8009db4 <prvCheckForValidListAndQueue+0x68>)
 8009d74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009d76:	2300      	movs	r3, #0
 8009d78:	9300      	str	r3, [sp, #0]
 8009d7a:	4b11      	ldr	r3, [pc, #68]	; (8009dc0 <prvCheckForValidListAndQueue+0x74>)
 8009d7c:	4a11      	ldr	r2, [pc, #68]	; (8009dc4 <prvCheckForValidListAndQueue+0x78>)
 8009d7e:	2110      	movs	r1, #16
 8009d80:	200a      	movs	r0, #10
 8009d82:	f7fe f953 	bl	800802c <xQueueGenericCreateStatic>
 8009d86:	4603      	mov	r3, r0
 8009d88:	4a08      	ldr	r2, [pc, #32]	; (8009dac <prvCheckForValidListAndQueue+0x60>)
 8009d8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009d8c:	4b07      	ldr	r3, [pc, #28]	; (8009dac <prvCheckForValidListAndQueue+0x60>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d005      	beq.n	8009da0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009d94:	4b05      	ldr	r3, [pc, #20]	; (8009dac <prvCheckForValidListAndQueue+0x60>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	490b      	ldr	r1, [pc, #44]	; (8009dc8 <prvCheckForValidListAndQueue+0x7c>)
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7fe fd6c 	bl	8008878 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009da0:	f000 f970 	bl	800a084 <vPortExitCritical>
}
 8009da4:	bf00      	nop
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	200015e8 	.word	0x200015e8
 8009db0:	200015b8 	.word	0x200015b8
 8009db4:	200015cc 	.word	0x200015cc
 8009db8:	200015e0 	.word	0x200015e0
 8009dbc:	200015e4 	.word	0x200015e4
 8009dc0:	20001694 	.word	0x20001694
 8009dc4:	200015f4 	.word	0x200015f4
 8009dc8:	0800c190 	.word	0x0800c190

08009dcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	3b04      	subs	r3, #4
 8009ddc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	3b04      	subs	r3, #4
 8009dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	f023 0201 	bic.w	r2, r3, #1
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	3b04      	subs	r3, #4
 8009dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009dfc:	4a0c      	ldr	r2, [pc, #48]	; (8009e30 <pxPortInitialiseStack+0x64>)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	3b14      	subs	r3, #20
 8009e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	3b04      	subs	r3, #4
 8009e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f06f 0202 	mvn.w	r2, #2
 8009e1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	3b20      	subs	r3, #32
 8009e20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e22:	68fb      	ldr	r3, [r7, #12]
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3714      	adds	r7, #20
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr
 8009e30:	08009e35 	.word	0x08009e35

08009e34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e3e:	4b12      	ldr	r3, [pc, #72]	; (8009e88 <prvTaskExitError+0x54>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e46:	d00a      	beq.n	8009e5e <prvTaskExitError+0x2a>
	__asm volatile
 8009e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	60fb      	str	r3, [r7, #12]
}
 8009e5a:	bf00      	nop
 8009e5c:	e7fe      	b.n	8009e5c <prvTaskExitError+0x28>
	__asm volatile
 8009e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	60bb      	str	r3, [r7, #8]
}
 8009e70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e72:	bf00      	nop
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d0fc      	beq.n	8009e74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e7a:	bf00      	nop
 8009e7c:	bf00      	nop
 8009e7e:	3714      	adds	r7, #20
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr
 8009e88:	20000030 	.word	0x20000030
 8009e8c:	00000000 	.word	0x00000000

08009e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e90:	4b07      	ldr	r3, [pc, #28]	; (8009eb0 <pxCurrentTCBConst2>)
 8009e92:	6819      	ldr	r1, [r3, #0]
 8009e94:	6808      	ldr	r0, [r1, #0]
 8009e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9a:	f380 8809 	msr	PSP, r0
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f04f 0000 	mov.w	r0, #0
 8009ea6:	f380 8811 	msr	BASEPRI, r0
 8009eaa:	4770      	bx	lr
 8009eac:	f3af 8000 	nop.w

08009eb0 <pxCurrentTCBConst2>:
 8009eb0:	200010b8 	.word	0x200010b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009eb4:	bf00      	nop
 8009eb6:	bf00      	nop

08009eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009eb8:	4808      	ldr	r0, [pc, #32]	; (8009edc <prvPortStartFirstTask+0x24>)
 8009eba:	6800      	ldr	r0, [r0, #0]
 8009ebc:	6800      	ldr	r0, [r0, #0]
 8009ebe:	f380 8808 	msr	MSP, r0
 8009ec2:	f04f 0000 	mov.w	r0, #0
 8009ec6:	f380 8814 	msr	CONTROL, r0
 8009eca:	b662      	cpsie	i
 8009ecc:	b661      	cpsie	f
 8009ece:	f3bf 8f4f 	dsb	sy
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	df00      	svc	0
 8009ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009eda:	bf00      	nop
 8009edc:	e000ed08 	.word	0xe000ed08

08009ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b086      	sub	sp, #24
 8009ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ee6:	4b46      	ldr	r3, [pc, #280]	; (800a000 <xPortStartScheduler+0x120>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a46      	ldr	r2, [pc, #280]	; (800a004 <xPortStartScheduler+0x124>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d10a      	bne.n	8009f06 <xPortStartScheduler+0x26>
	__asm volatile
 8009ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef4:	f383 8811 	msr	BASEPRI, r3
 8009ef8:	f3bf 8f6f 	isb	sy
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	613b      	str	r3, [r7, #16]
}
 8009f02:	bf00      	nop
 8009f04:	e7fe      	b.n	8009f04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009f06:	4b3e      	ldr	r3, [pc, #248]	; (800a000 <xPortStartScheduler+0x120>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a3f      	ldr	r2, [pc, #252]	; (800a008 <xPortStartScheduler+0x128>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d10a      	bne.n	8009f26 <xPortStartScheduler+0x46>
	__asm volatile
 8009f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	60fb      	str	r3, [r7, #12]
}
 8009f22:	bf00      	nop
 8009f24:	e7fe      	b.n	8009f24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f26:	4b39      	ldr	r3, [pc, #228]	; (800a00c <xPortStartScheduler+0x12c>)
 8009f28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	22ff      	movs	r2, #255	; 0xff
 8009f36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f40:	78fb      	ldrb	r3, [r7, #3]
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009f48:	b2da      	uxtb	r2, r3
 8009f4a:	4b31      	ldr	r3, [pc, #196]	; (800a010 <xPortStartScheduler+0x130>)
 8009f4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f4e:	4b31      	ldr	r3, [pc, #196]	; (800a014 <xPortStartScheduler+0x134>)
 8009f50:	2207      	movs	r2, #7
 8009f52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f54:	e009      	b.n	8009f6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009f56:	4b2f      	ldr	r3, [pc, #188]	; (800a014 <xPortStartScheduler+0x134>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	4a2d      	ldr	r2, [pc, #180]	; (800a014 <xPortStartScheduler+0x134>)
 8009f5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f60:	78fb      	ldrb	r3, [r7, #3]
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	005b      	lsls	r3, r3, #1
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f6a:	78fb      	ldrb	r3, [r7, #3]
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f72:	2b80      	cmp	r3, #128	; 0x80
 8009f74:	d0ef      	beq.n	8009f56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f76:	4b27      	ldr	r3, [pc, #156]	; (800a014 <xPortStartScheduler+0x134>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f1c3 0307 	rsb	r3, r3, #7
 8009f7e:	2b04      	cmp	r3, #4
 8009f80:	d00a      	beq.n	8009f98 <xPortStartScheduler+0xb8>
	__asm volatile
 8009f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f86:	f383 8811 	msr	BASEPRI, r3
 8009f8a:	f3bf 8f6f 	isb	sy
 8009f8e:	f3bf 8f4f 	dsb	sy
 8009f92:	60bb      	str	r3, [r7, #8]
}
 8009f94:	bf00      	nop
 8009f96:	e7fe      	b.n	8009f96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f98:	4b1e      	ldr	r3, [pc, #120]	; (800a014 <xPortStartScheduler+0x134>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	021b      	lsls	r3, r3, #8
 8009f9e:	4a1d      	ldr	r2, [pc, #116]	; (800a014 <xPortStartScheduler+0x134>)
 8009fa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009fa2:	4b1c      	ldr	r3, [pc, #112]	; (800a014 <xPortStartScheduler+0x134>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009faa:	4a1a      	ldr	r2, [pc, #104]	; (800a014 <xPortStartScheduler+0x134>)
 8009fac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009fb6:	4b18      	ldr	r3, [pc, #96]	; (800a018 <xPortStartScheduler+0x138>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a17      	ldr	r2, [pc, #92]	; (800a018 <xPortStartScheduler+0x138>)
 8009fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009fc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009fc2:	4b15      	ldr	r3, [pc, #84]	; (800a018 <xPortStartScheduler+0x138>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a14      	ldr	r2, [pc, #80]	; (800a018 <xPortStartScheduler+0x138>)
 8009fc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009fcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009fce:	f000 f8dd 	bl	800a18c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009fd2:	4b12      	ldr	r3, [pc, #72]	; (800a01c <xPortStartScheduler+0x13c>)
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009fd8:	f000 f8fc 	bl	800a1d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009fdc:	4b10      	ldr	r3, [pc, #64]	; (800a020 <xPortStartScheduler+0x140>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a0f      	ldr	r2, [pc, #60]	; (800a020 <xPortStartScheduler+0x140>)
 8009fe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009fe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009fe8:	f7ff ff66 	bl	8009eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009fec:	f7ff f854 	bl	8009098 <vTaskSwitchContext>
	prvTaskExitError();
 8009ff0:	f7ff ff20 	bl	8009e34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3718      	adds	r7, #24
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	e000ed00 	.word	0xe000ed00
 800a004:	410fc271 	.word	0x410fc271
 800a008:	410fc270 	.word	0x410fc270
 800a00c:	e000e400 	.word	0xe000e400
 800a010:	200016e4 	.word	0x200016e4
 800a014:	200016e8 	.word	0x200016e8
 800a018:	e000ed20 	.word	0xe000ed20
 800a01c:	20000030 	.word	0x20000030
 800a020:	e000ef34 	.word	0xe000ef34

0800a024 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
	__asm volatile
 800a02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02e:	f383 8811 	msr	BASEPRI, r3
 800a032:	f3bf 8f6f 	isb	sy
 800a036:	f3bf 8f4f 	dsb	sy
 800a03a:	607b      	str	r3, [r7, #4]
}
 800a03c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a03e:	4b0f      	ldr	r3, [pc, #60]	; (800a07c <vPortEnterCritical+0x58>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	3301      	adds	r3, #1
 800a044:	4a0d      	ldr	r2, [pc, #52]	; (800a07c <vPortEnterCritical+0x58>)
 800a046:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a048:	4b0c      	ldr	r3, [pc, #48]	; (800a07c <vPortEnterCritical+0x58>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d10f      	bne.n	800a070 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a050:	4b0b      	ldr	r3, [pc, #44]	; (800a080 <vPortEnterCritical+0x5c>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	b2db      	uxtb	r3, r3
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00a      	beq.n	800a070 <vPortEnterCritical+0x4c>
	__asm volatile
 800a05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05e:	f383 8811 	msr	BASEPRI, r3
 800a062:	f3bf 8f6f 	isb	sy
 800a066:	f3bf 8f4f 	dsb	sy
 800a06a:	603b      	str	r3, [r7, #0]
}
 800a06c:	bf00      	nop
 800a06e:	e7fe      	b.n	800a06e <vPortEnterCritical+0x4a>
	}
}
 800a070:	bf00      	nop
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	20000030 	.word	0x20000030
 800a080:	e000ed04 	.word	0xe000ed04

0800a084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a08a:	4b12      	ldr	r3, [pc, #72]	; (800a0d4 <vPortExitCritical+0x50>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d10a      	bne.n	800a0a8 <vPortExitCritical+0x24>
	__asm volatile
 800a092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a096:	f383 8811 	msr	BASEPRI, r3
 800a09a:	f3bf 8f6f 	isb	sy
 800a09e:	f3bf 8f4f 	dsb	sy
 800a0a2:	607b      	str	r3, [r7, #4]
}
 800a0a4:	bf00      	nop
 800a0a6:	e7fe      	b.n	800a0a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a0a8:	4b0a      	ldr	r3, [pc, #40]	; (800a0d4 <vPortExitCritical+0x50>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	4a09      	ldr	r2, [pc, #36]	; (800a0d4 <vPortExitCritical+0x50>)
 800a0b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a0b2:	4b08      	ldr	r3, [pc, #32]	; (800a0d4 <vPortExitCritical+0x50>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d105      	bne.n	800a0c6 <vPortExitCritical+0x42>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	f383 8811 	msr	BASEPRI, r3
}
 800a0c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a0c6:	bf00      	nop
 800a0c8:	370c      	adds	r7, #12
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	20000030 	.word	0x20000030
	...

0800a0e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a0e0:	f3ef 8009 	mrs	r0, PSP
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	4b15      	ldr	r3, [pc, #84]	; (800a140 <pxCurrentTCBConst>)
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	f01e 0f10 	tst.w	lr, #16
 800a0f0:	bf08      	it	eq
 800a0f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a0f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fa:	6010      	str	r0, [r2, #0]
 800a0fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a100:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a104:	f380 8811 	msr	BASEPRI, r0
 800a108:	f3bf 8f4f 	dsb	sy
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f7fe ffc2 	bl	8009098 <vTaskSwitchContext>
 800a114:	f04f 0000 	mov.w	r0, #0
 800a118:	f380 8811 	msr	BASEPRI, r0
 800a11c:	bc09      	pop	{r0, r3}
 800a11e:	6819      	ldr	r1, [r3, #0]
 800a120:	6808      	ldr	r0, [r1, #0]
 800a122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a126:	f01e 0f10 	tst.w	lr, #16
 800a12a:	bf08      	it	eq
 800a12c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a130:	f380 8809 	msr	PSP, r0
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	f3af 8000 	nop.w

0800a140 <pxCurrentTCBConst>:
 800a140:	200010b8 	.word	0x200010b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a144:	bf00      	nop
 800a146:	bf00      	nop

0800a148 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
	__asm volatile
 800a14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	607b      	str	r3, [r7, #4]
}
 800a160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a162:	f7fe fedf 	bl	8008f24 <xTaskIncrementTick>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d003      	beq.n	800a174 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a16c:	4b06      	ldr	r3, [pc, #24]	; (800a188 <xPortSysTickHandler+0x40>)
 800a16e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a172:	601a      	str	r2, [r3, #0]
 800a174:	2300      	movs	r3, #0
 800a176:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	f383 8811 	msr	BASEPRI, r3
}
 800a17e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a180:	bf00      	nop
 800a182:	3708      	adds	r7, #8
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}
 800a188:	e000ed04 	.word	0xe000ed04

0800a18c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a18c:	b480      	push	{r7}
 800a18e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a190:	4b0b      	ldr	r3, [pc, #44]	; (800a1c0 <vPortSetupTimerInterrupt+0x34>)
 800a192:	2200      	movs	r2, #0
 800a194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a196:	4b0b      	ldr	r3, [pc, #44]	; (800a1c4 <vPortSetupTimerInterrupt+0x38>)
 800a198:	2200      	movs	r2, #0
 800a19a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a19c:	4b0a      	ldr	r3, [pc, #40]	; (800a1c8 <vPortSetupTimerInterrupt+0x3c>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a0a      	ldr	r2, [pc, #40]	; (800a1cc <vPortSetupTimerInterrupt+0x40>)
 800a1a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1a6:	099b      	lsrs	r3, r3, #6
 800a1a8:	4a09      	ldr	r2, [pc, #36]	; (800a1d0 <vPortSetupTimerInterrupt+0x44>)
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a1ae:	4b04      	ldr	r3, [pc, #16]	; (800a1c0 <vPortSetupTimerInterrupt+0x34>)
 800a1b0:	2207      	movs	r2, #7
 800a1b2:	601a      	str	r2, [r3, #0]
}
 800a1b4:	bf00      	nop
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop
 800a1c0:	e000e010 	.word	0xe000e010
 800a1c4:	e000e018 	.word	0xe000e018
 800a1c8:	20000024 	.word	0x20000024
 800a1cc:	10624dd3 	.word	0x10624dd3
 800a1d0:	e000e014 	.word	0xe000e014

0800a1d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a1d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a1e4 <vPortEnableVFP+0x10>
 800a1d8:	6801      	ldr	r1, [r0, #0]
 800a1da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a1de:	6001      	str	r1, [r0, #0]
 800a1e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a1e2:	bf00      	nop
 800a1e4:	e000ed88 	.word	0xe000ed88

0800a1e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a1ee:	f3ef 8305 	mrs	r3, IPSR
 800a1f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2b0f      	cmp	r3, #15
 800a1f8:	d914      	bls.n	800a224 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a1fa:	4a17      	ldr	r2, [pc, #92]	; (800a258 <vPortValidateInterruptPriority+0x70>)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	4413      	add	r3, r2
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a204:	4b15      	ldr	r3, [pc, #84]	; (800a25c <vPortValidateInterruptPriority+0x74>)
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	7afa      	ldrb	r2, [r7, #11]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d20a      	bcs.n	800a224 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	607b      	str	r3, [r7, #4]
}
 800a220:	bf00      	nop
 800a222:	e7fe      	b.n	800a222 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a224:	4b0e      	ldr	r3, [pc, #56]	; (800a260 <vPortValidateInterruptPriority+0x78>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a22c:	4b0d      	ldr	r3, [pc, #52]	; (800a264 <vPortValidateInterruptPriority+0x7c>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	429a      	cmp	r2, r3
 800a232:	d90a      	bls.n	800a24a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a238:	f383 8811 	msr	BASEPRI, r3
 800a23c:	f3bf 8f6f 	isb	sy
 800a240:	f3bf 8f4f 	dsb	sy
 800a244:	603b      	str	r3, [r7, #0]
}
 800a246:	bf00      	nop
 800a248:	e7fe      	b.n	800a248 <vPortValidateInterruptPriority+0x60>
	}
 800a24a:	bf00      	nop
 800a24c:	3714      	adds	r7, #20
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	e000e3f0 	.word	0xe000e3f0
 800a25c:	200016e4 	.word	0x200016e4
 800a260:	e000ed0c 	.word	0xe000ed0c
 800a264:	200016e8 	.word	0x200016e8

0800a268 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b08a      	sub	sp, #40	; 0x28
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a270:	2300      	movs	r3, #0
 800a272:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a274:	f7fe fd9a 	bl	8008dac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a278:	4b5b      	ldr	r3, [pc, #364]	; (800a3e8 <pvPortMalloc+0x180>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d101      	bne.n	800a284 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a280:	f000 f920 	bl	800a4c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a284:	4b59      	ldr	r3, [pc, #356]	; (800a3ec <pvPortMalloc+0x184>)
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4013      	ands	r3, r2
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f040 8093 	bne.w	800a3b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d01d      	beq.n	800a2d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a298:	2208      	movs	r2, #8
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4413      	add	r3, r2
 800a29e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f003 0307 	and.w	r3, r3, #7
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d014      	beq.n	800a2d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f023 0307 	bic.w	r3, r3, #7
 800a2b0:	3308      	adds	r3, #8
 800a2b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f003 0307 	and.w	r3, r3, #7
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00a      	beq.n	800a2d4 <pvPortMalloc+0x6c>
	__asm volatile
 800a2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c2:	f383 8811 	msr	BASEPRI, r3
 800a2c6:	f3bf 8f6f 	isb	sy
 800a2ca:	f3bf 8f4f 	dsb	sy
 800a2ce:	617b      	str	r3, [r7, #20]
}
 800a2d0:	bf00      	nop
 800a2d2:	e7fe      	b.n	800a2d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d06e      	beq.n	800a3b8 <pvPortMalloc+0x150>
 800a2da:	4b45      	ldr	r3, [pc, #276]	; (800a3f0 <pvPortMalloc+0x188>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d869      	bhi.n	800a3b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a2e4:	4b43      	ldr	r3, [pc, #268]	; (800a3f4 <pvPortMalloc+0x18c>)
 800a2e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a2e8:	4b42      	ldr	r3, [pc, #264]	; (800a3f4 <pvPortMalloc+0x18c>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2ee:	e004      	b.n	800a2fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	429a      	cmp	r2, r3
 800a302:	d903      	bls.n	800a30c <pvPortMalloc+0xa4>
 800a304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1f1      	bne.n	800a2f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a30c:	4b36      	ldr	r3, [pc, #216]	; (800a3e8 <pvPortMalloc+0x180>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a312:	429a      	cmp	r2, r3
 800a314:	d050      	beq.n	800a3b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a316:	6a3b      	ldr	r3, [r7, #32]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2208      	movs	r2, #8
 800a31c:	4413      	add	r3, r2
 800a31e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	6a3b      	ldr	r3, [r7, #32]
 800a326:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32a:	685a      	ldr	r2, [r3, #4]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	1ad2      	subs	r2, r2, r3
 800a330:	2308      	movs	r3, #8
 800a332:	005b      	lsls	r3, r3, #1
 800a334:	429a      	cmp	r2, r3
 800a336:	d91f      	bls.n	800a378 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4413      	add	r3, r2
 800a33e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	f003 0307 	and.w	r3, r3, #7
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00a      	beq.n	800a360 <pvPortMalloc+0xf8>
	__asm volatile
 800a34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34e:	f383 8811 	msr	BASEPRI, r3
 800a352:	f3bf 8f6f 	isb	sy
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	613b      	str	r3, [r7, #16]
}
 800a35c:	bf00      	nop
 800a35e:	e7fe      	b.n	800a35e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a362:	685a      	ldr	r2, [r3, #4]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	1ad2      	subs	r2, r2, r3
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a372:	69b8      	ldr	r0, [r7, #24]
 800a374:	f000 f908 	bl	800a588 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a378:	4b1d      	ldr	r3, [pc, #116]	; (800a3f0 <pvPortMalloc+0x188>)
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	1ad3      	subs	r3, r2, r3
 800a382:	4a1b      	ldr	r2, [pc, #108]	; (800a3f0 <pvPortMalloc+0x188>)
 800a384:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a386:	4b1a      	ldr	r3, [pc, #104]	; (800a3f0 <pvPortMalloc+0x188>)
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	4b1b      	ldr	r3, [pc, #108]	; (800a3f8 <pvPortMalloc+0x190>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d203      	bcs.n	800a39a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a392:	4b17      	ldr	r3, [pc, #92]	; (800a3f0 <pvPortMalloc+0x188>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a18      	ldr	r2, [pc, #96]	; (800a3f8 <pvPortMalloc+0x190>)
 800a398:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39c:	685a      	ldr	r2, [r3, #4]
 800a39e:	4b13      	ldr	r3, [pc, #76]	; (800a3ec <pvPortMalloc+0x184>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	431a      	orrs	r2, r3
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a3ae:	4b13      	ldr	r3, [pc, #76]	; (800a3fc <pvPortMalloc+0x194>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	4a11      	ldr	r2, [pc, #68]	; (800a3fc <pvPortMalloc+0x194>)
 800a3b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a3b8:	f7fe fd06 	bl	8008dc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	f003 0307 	and.w	r3, r3, #7
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00a      	beq.n	800a3dc <pvPortMalloc+0x174>
	__asm volatile
 800a3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ca:	f383 8811 	msr	BASEPRI, r3
 800a3ce:	f3bf 8f6f 	isb	sy
 800a3d2:	f3bf 8f4f 	dsb	sy
 800a3d6:	60fb      	str	r3, [r7, #12]
}
 800a3d8:	bf00      	nop
 800a3da:	e7fe      	b.n	800a3da <pvPortMalloc+0x172>
	return pvReturn;
 800a3dc:	69fb      	ldr	r3, [r7, #28]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3728      	adds	r7, #40	; 0x28
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	200052f4 	.word	0x200052f4
 800a3ec:	20005308 	.word	0x20005308
 800a3f0:	200052f8 	.word	0x200052f8
 800a3f4:	200052ec 	.word	0x200052ec
 800a3f8:	200052fc 	.word	0x200052fc
 800a3fc:	20005300 	.word	0x20005300

0800a400 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b086      	sub	sp, #24
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d04d      	beq.n	800a4ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a412:	2308      	movs	r3, #8
 800a414:	425b      	negs	r3, r3
 800a416:	697a      	ldr	r2, [r7, #20]
 800a418:	4413      	add	r3, r2
 800a41a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	685a      	ldr	r2, [r3, #4]
 800a424:	4b24      	ldr	r3, [pc, #144]	; (800a4b8 <vPortFree+0xb8>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4013      	ands	r3, r2
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d10a      	bne.n	800a444 <vPortFree+0x44>
	__asm volatile
 800a42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	60fb      	str	r3, [r7, #12]
}
 800a440:	bf00      	nop
 800a442:	e7fe      	b.n	800a442 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00a      	beq.n	800a462 <vPortFree+0x62>
	__asm volatile
 800a44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a450:	f383 8811 	msr	BASEPRI, r3
 800a454:	f3bf 8f6f 	isb	sy
 800a458:	f3bf 8f4f 	dsb	sy
 800a45c:	60bb      	str	r3, [r7, #8]
}
 800a45e:	bf00      	nop
 800a460:	e7fe      	b.n	800a460 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	685a      	ldr	r2, [r3, #4]
 800a466:	4b14      	ldr	r3, [pc, #80]	; (800a4b8 <vPortFree+0xb8>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4013      	ands	r3, r2
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d01e      	beq.n	800a4ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d11a      	bne.n	800a4ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	4b0e      	ldr	r3, [pc, #56]	; (800a4b8 <vPortFree+0xb8>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	43db      	mvns	r3, r3
 800a482:	401a      	ands	r2, r3
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a488:	f7fe fc90 	bl	8008dac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	685a      	ldr	r2, [r3, #4]
 800a490:	4b0a      	ldr	r3, [pc, #40]	; (800a4bc <vPortFree+0xbc>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4413      	add	r3, r2
 800a496:	4a09      	ldr	r2, [pc, #36]	; (800a4bc <vPortFree+0xbc>)
 800a498:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a49a:	6938      	ldr	r0, [r7, #16]
 800a49c:	f000 f874 	bl	800a588 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a4a0:	4b07      	ldr	r3, [pc, #28]	; (800a4c0 <vPortFree+0xc0>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	4a06      	ldr	r2, [pc, #24]	; (800a4c0 <vPortFree+0xc0>)
 800a4a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a4aa:	f7fe fc8d 	bl	8008dc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a4ae:	bf00      	nop
 800a4b0:	3718      	adds	r7, #24
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	20005308 	.word	0x20005308
 800a4bc:	200052f8 	.word	0x200052f8
 800a4c0:	20005304 	.word	0x20005304

0800a4c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a4ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a4ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a4d0:	4b27      	ldr	r3, [pc, #156]	; (800a570 <prvHeapInit+0xac>)
 800a4d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f003 0307 	and.w	r3, r3, #7
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00c      	beq.n	800a4f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	3307      	adds	r3, #7
 800a4e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f023 0307 	bic.w	r3, r3, #7
 800a4ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a4ec:	68ba      	ldr	r2, [r7, #8]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	1ad3      	subs	r3, r2, r3
 800a4f2:	4a1f      	ldr	r2, [pc, #124]	; (800a570 <prvHeapInit+0xac>)
 800a4f4:	4413      	add	r3, r2
 800a4f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a4fc:	4a1d      	ldr	r2, [pc, #116]	; (800a574 <prvHeapInit+0xb0>)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a502:	4b1c      	ldr	r3, [pc, #112]	; (800a574 <prvHeapInit+0xb0>)
 800a504:	2200      	movs	r2, #0
 800a506:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	68ba      	ldr	r2, [r7, #8]
 800a50c:	4413      	add	r3, r2
 800a50e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a510:	2208      	movs	r2, #8
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	1a9b      	subs	r3, r3, r2
 800a516:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f023 0307 	bic.w	r3, r3, #7
 800a51e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	4a15      	ldr	r2, [pc, #84]	; (800a578 <prvHeapInit+0xb4>)
 800a524:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a526:	4b14      	ldr	r3, [pc, #80]	; (800a578 <prvHeapInit+0xb4>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2200      	movs	r2, #0
 800a52c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a52e:	4b12      	ldr	r3, [pc, #72]	; (800a578 <prvHeapInit+0xb4>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2200      	movs	r2, #0
 800a534:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	1ad2      	subs	r2, r2, r3
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a544:	4b0c      	ldr	r3, [pc, #48]	; (800a578 <prvHeapInit+0xb4>)
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	4a0a      	ldr	r2, [pc, #40]	; (800a57c <prvHeapInit+0xb8>)
 800a552:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	4a09      	ldr	r2, [pc, #36]	; (800a580 <prvHeapInit+0xbc>)
 800a55a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a55c:	4b09      	ldr	r3, [pc, #36]	; (800a584 <prvHeapInit+0xc0>)
 800a55e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a562:	601a      	str	r2, [r3, #0]
}
 800a564:	bf00      	nop
 800a566:	3714      	adds	r7, #20
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr
 800a570:	200016ec 	.word	0x200016ec
 800a574:	200052ec 	.word	0x200052ec
 800a578:	200052f4 	.word	0x200052f4
 800a57c:	200052fc 	.word	0x200052fc
 800a580:	200052f8 	.word	0x200052f8
 800a584:	20005308 	.word	0x20005308

0800a588 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a588:	b480      	push	{r7}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a590:	4b28      	ldr	r3, [pc, #160]	; (800a634 <prvInsertBlockIntoFreeList+0xac>)
 800a592:	60fb      	str	r3, [r7, #12]
 800a594:	e002      	b.n	800a59c <prvInsertBlockIntoFreeList+0x14>
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	60fb      	str	r3, [r7, #12]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d8f7      	bhi.n	800a596 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	68ba      	ldr	r2, [r7, #8]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d108      	bne.n	800a5ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	685a      	ldr	r2, [r3, #4]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	441a      	add	r2, r3
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	68ba      	ldr	r2, [r7, #8]
 800a5d4:	441a      	add	r2, r3
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d118      	bne.n	800a610 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	4b15      	ldr	r3, [pc, #84]	; (800a638 <prvInsertBlockIntoFreeList+0xb0>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d00d      	beq.n	800a606 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	685a      	ldr	r2, [r3, #4]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	441a      	add	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	601a      	str	r2, [r3, #0]
 800a604:	e008      	b.n	800a618 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a606:	4b0c      	ldr	r3, [pc, #48]	; (800a638 <prvInsertBlockIntoFreeList+0xb0>)
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	601a      	str	r2, [r3, #0]
 800a60e:	e003      	b.n	800a618 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d002      	beq.n	800a626 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a626:	bf00      	nop
 800a628:	3714      	adds	r7, #20
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	200052ec 	.word	0x200052ec
 800a638:	200052f4 	.word	0x200052f4

0800a63c <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800a642:	2300      	movs	r3, #0
 800a644:	71fb      	strb	r3, [r7, #7]
 800a646:	e026      	b.n	800a696 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800a648:	79fb      	ldrb	r3, [r7, #7]
 800a64a:	3b50      	subs	r3, #80	; 0x50
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	2100      	movs	r1, #0
 800a650:	4618      	mov	r0, r3
 800a652:	f000 f82b 	bl	800a6ac <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800a656:	2100      	movs	r1, #0
 800a658:	2000      	movs	r0, #0
 800a65a:	f000 f827 	bl	800a6ac <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800a65e:	2100      	movs	r1, #0
 800a660:	2010      	movs	r0, #16
 800a662:	f000 f823 	bl	800a6ac <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800a666:	2300      	movs	r3, #0
 800a668:	71bb      	strb	r3, [r7, #6]
 800a66a:	e00d      	b.n	800a688 <OLED_Refresh_Gram+0x4c>
 800a66c:	79ba      	ldrb	r2, [r7, #6]
 800a66e:	79fb      	ldrb	r3, [r7, #7]
 800a670:	490d      	ldr	r1, [pc, #52]	; (800a6a8 <OLED_Refresh_Gram+0x6c>)
 800a672:	00d2      	lsls	r2, r2, #3
 800a674:	440a      	add	r2, r1
 800a676:	4413      	add	r3, r2
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	2101      	movs	r1, #1
 800a67c:	4618      	mov	r0, r3
 800a67e:	f000 f815 	bl	800a6ac <OLED_WR_Byte>
 800a682:	79bb      	ldrb	r3, [r7, #6]
 800a684:	3301      	adds	r3, #1
 800a686:	71bb      	strb	r3, [r7, #6]
 800a688:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	daed      	bge.n	800a66c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800a690:	79fb      	ldrb	r3, [r7, #7]
 800a692:	3301      	adds	r3, #1
 800a694:	71fb      	strb	r3, [r7, #7]
 800a696:	79fb      	ldrb	r3, [r7, #7]
 800a698:	2b07      	cmp	r3, #7
 800a69a:	d9d5      	bls.n	800a648 <OLED_Refresh_Gram+0xc>
	}   
}
 800a69c:	bf00      	nop
 800a69e:	bf00      	nop
 800a6a0:	3708      	adds	r7, #8
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	2000530c 	.word	0x2000530c

0800a6ac <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	460a      	mov	r2, r1
 800a6b6:	71fb      	strb	r3, [r7, #7]
 800a6b8:	4613      	mov	r3, r2
 800a6ba:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800a6bc:	79bb      	ldrb	r3, [r7, #6]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d006      	beq.n	800a6d0 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a6c8:	481c      	ldr	r0, [pc, #112]	; (800a73c <OLED_WR_Byte+0x90>)
 800a6ca:	f7f9 f841 	bl	8003750 <HAL_GPIO_WritePin>
 800a6ce:	e005      	b.n	800a6dc <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a6d6:	4819      	ldr	r0, [pc, #100]	; (800a73c <OLED_WR_Byte+0x90>)
 800a6d8:	f7f9 f83a 	bl	8003750 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800a6dc:	2300      	movs	r3, #0
 800a6de:	73fb      	strb	r3, [r7, #15]
 800a6e0:	e01e      	b.n	800a720 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	2120      	movs	r1, #32
 800a6e6:	4815      	ldr	r0, [pc, #84]	; (800a73c <OLED_WR_Byte+0x90>)
 800a6e8:	f7f9 f832 	bl	8003750 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800a6ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	da05      	bge.n	800a700 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	2140      	movs	r1, #64	; 0x40
 800a6f8:	4810      	ldr	r0, [pc, #64]	; (800a73c <OLED_WR_Byte+0x90>)
 800a6fa:	f7f9 f829 	bl	8003750 <HAL_GPIO_WritePin>
 800a6fe:	e004      	b.n	800a70a <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800a700:	2200      	movs	r2, #0
 800a702:	2140      	movs	r1, #64	; 0x40
 800a704:	480d      	ldr	r0, [pc, #52]	; (800a73c <OLED_WR_Byte+0x90>)
 800a706:	f7f9 f823 	bl	8003750 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800a70a:	2201      	movs	r2, #1
 800a70c:	2120      	movs	r1, #32
 800a70e:	480b      	ldr	r0, [pc, #44]	; (800a73c <OLED_WR_Byte+0x90>)
 800a710:	f7f9 f81e 	bl	8003750 <HAL_GPIO_WritePin>
		dat<<=1;   
 800a714:	79fb      	ldrb	r3, [r7, #7]
 800a716:	005b      	lsls	r3, r3, #1
 800a718:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800a71a:	7bfb      	ldrb	r3, [r7, #15]
 800a71c:	3301      	adds	r3, #1
 800a71e:	73fb      	strb	r3, [r7, #15]
 800a720:	7bfb      	ldrb	r3, [r7, #15]
 800a722:	2b07      	cmp	r3, #7
 800a724:	d9dd      	bls.n	800a6e2 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800a726:	2201      	movs	r2, #1
 800a728:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a72c:	4803      	ldr	r0, [pc, #12]	; (800a73c <OLED_WR_Byte+0x90>)
 800a72e:	f7f9 f80f 	bl	8003750 <HAL_GPIO_WritePin>
} 
 800a732:	bf00      	nop
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	40021000 	.word	0x40021000

0800a740 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800a746:	2300      	movs	r3, #0
 800a748:	71fb      	strb	r3, [r7, #7]
 800a74a:	e014      	b.n	800a776 <OLED_Clear+0x36>
 800a74c:	2300      	movs	r3, #0
 800a74e:	71bb      	strb	r3, [r7, #6]
 800a750:	e00a      	b.n	800a768 <OLED_Clear+0x28>
 800a752:	79ba      	ldrb	r2, [r7, #6]
 800a754:	79fb      	ldrb	r3, [r7, #7]
 800a756:	490c      	ldr	r1, [pc, #48]	; (800a788 <OLED_Clear+0x48>)
 800a758:	00d2      	lsls	r2, r2, #3
 800a75a:	440a      	add	r2, r1
 800a75c:	4413      	add	r3, r2
 800a75e:	2200      	movs	r2, #0
 800a760:	701a      	strb	r2, [r3, #0]
 800a762:	79bb      	ldrb	r3, [r7, #6]
 800a764:	3301      	adds	r3, #1
 800a766:	71bb      	strb	r3, [r7, #6]
 800a768:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	daf0      	bge.n	800a752 <OLED_Clear+0x12>
 800a770:	79fb      	ldrb	r3, [r7, #7]
 800a772:	3301      	adds	r3, #1
 800a774:	71fb      	strb	r3, [r7, #7]
 800a776:	79fb      	ldrb	r3, [r7, #7]
 800a778:	2b07      	cmp	r3, #7
 800a77a:	d9e7      	bls.n	800a74c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800a77c:	f7ff ff5e 	bl	800a63c <OLED_Refresh_Gram>
}
 800a780:	bf00      	nop
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	2000530c 	.word	0x2000530c

0800a78c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	4603      	mov	r3, r0
 800a794:	71fb      	strb	r3, [r7, #7]
 800a796:	460b      	mov	r3, r1
 800a798:	71bb      	strb	r3, [r7, #6]
 800a79a:	4613      	mov	r3, r2
 800a79c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800a7a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	db41      	blt.n	800a82e <OLED_DrawPoint+0xa2>
 800a7aa:	79bb      	ldrb	r3, [r7, #6]
 800a7ac:	2b3f      	cmp	r3, #63	; 0x3f
 800a7ae:	d83e      	bhi.n	800a82e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800a7b0:	79bb      	ldrb	r3, [r7, #6]
 800a7b2:	08db      	lsrs	r3, r3, #3
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	f1c3 0307 	rsb	r3, r3, #7
 800a7ba:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800a7bc:	79bb      	ldrb	r3, [r7, #6]
 800a7be:	f003 0307 	and.w	r3, r3, #7
 800a7c2:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800a7c4:	7b7b      	ldrb	r3, [r7, #13]
 800a7c6:	f1c3 0307 	rsb	r3, r3, #7
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a7d0:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800a7d2:	797b      	ldrb	r3, [r7, #5]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d012      	beq.n	800a7fe <OLED_DrawPoint+0x72>
 800a7d8:	79fa      	ldrb	r2, [r7, #7]
 800a7da:	7bbb      	ldrb	r3, [r7, #14]
 800a7dc:	4917      	ldr	r1, [pc, #92]	; (800a83c <OLED_DrawPoint+0xb0>)
 800a7de:	00d2      	lsls	r2, r2, #3
 800a7e0:	440a      	add	r2, r1
 800a7e2:	4413      	add	r3, r2
 800a7e4:	7818      	ldrb	r0, [r3, #0]
 800a7e6:	79fa      	ldrb	r2, [r7, #7]
 800a7e8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ea:	7bf9      	ldrb	r1, [r7, #15]
 800a7ec:	4301      	orrs	r1, r0
 800a7ee:	b2c8      	uxtb	r0, r1
 800a7f0:	4912      	ldr	r1, [pc, #72]	; (800a83c <OLED_DrawPoint+0xb0>)
 800a7f2:	00d2      	lsls	r2, r2, #3
 800a7f4:	440a      	add	r2, r1
 800a7f6:	4413      	add	r3, r2
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	701a      	strb	r2, [r3, #0]
 800a7fc:	e018      	b.n	800a830 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800a7fe:	79fa      	ldrb	r2, [r7, #7]
 800a800:	7bbb      	ldrb	r3, [r7, #14]
 800a802:	490e      	ldr	r1, [pc, #56]	; (800a83c <OLED_DrawPoint+0xb0>)
 800a804:	00d2      	lsls	r2, r2, #3
 800a806:	440a      	add	r2, r1
 800a808:	4413      	add	r3, r2
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	b25a      	sxtb	r2, r3
 800a80e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a812:	43db      	mvns	r3, r3
 800a814:	b25b      	sxtb	r3, r3
 800a816:	4013      	ands	r3, r2
 800a818:	b259      	sxtb	r1, r3
 800a81a:	79fa      	ldrb	r2, [r7, #7]
 800a81c:	7bbb      	ldrb	r3, [r7, #14]
 800a81e:	b2c8      	uxtb	r0, r1
 800a820:	4906      	ldr	r1, [pc, #24]	; (800a83c <OLED_DrawPoint+0xb0>)
 800a822:	00d2      	lsls	r2, r2, #3
 800a824:	440a      	add	r2, r1
 800a826:	4413      	add	r3, r2
 800a828:	4602      	mov	r2, r0
 800a82a:	701a      	strb	r2, [r3, #0]
 800a82c:	e000      	b.n	800a830 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800a82e:	bf00      	nop
}
 800a830:	3714      	adds	r7, #20
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	2000530c 	.word	0x2000530c

0800a840 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800a840:	b590      	push	{r4, r7, lr}
 800a842:	b085      	sub	sp, #20
 800a844:	af00      	add	r7, sp, #0
 800a846:	4604      	mov	r4, r0
 800a848:	4608      	mov	r0, r1
 800a84a:	4611      	mov	r1, r2
 800a84c:	461a      	mov	r2, r3
 800a84e:	4623      	mov	r3, r4
 800a850:	71fb      	strb	r3, [r7, #7]
 800a852:	4603      	mov	r3, r0
 800a854:	71bb      	strb	r3, [r7, #6]
 800a856:	460b      	mov	r3, r1
 800a858:	717b      	strb	r3, [r7, #5]
 800a85a:	4613      	mov	r3, r2
 800a85c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800a85e:	79bb      	ldrb	r3, [r7, #6]
 800a860:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800a862:	797b      	ldrb	r3, [r7, #5]
 800a864:	3b20      	subs	r3, #32
 800a866:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800a868:	2300      	movs	r3, #0
 800a86a:	73bb      	strb	r3, [r7, #14]
 800a86c:	e04d      	b.n	800a90a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800a86e:	793b      	ldrb	r3, [r7, #4]
 800a870:	2b0c      	cmp	r3, #12
 800a872:	d10b      	bne.n	800a88c <OLED_ShowChar+0x4c>
 800a874:	797a      	ldrb	r2, [r7, #5]
 800a876:	7bb9      	ldrb	r1, [r7, #14]
 800a878:	4828      	ldr	r0, [pc, #160]	; (800a91c <OLED_ShowChar+0xdc>)
 800a87a:	4613      	mov	r3, r2
 800a87c:	005b      	lsls	r3, r3, #1
 800a87e:	4413      	add	r3, r2
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	4403      	add	r3, r0
 800a884:	440b      	add	r3, r1
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	73fb      	strb	r3, [r7, #15]
 800a88a:	e007      	b.n	800a89c <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800a88c:	797a      	ldrb	r2, [r7, #5]
 800a88e:	7bbb      	ldrb	r3, [r7, #14]
 800a890:	4923      	ldr	r1, [pc, #140]	; (800a920 <OLED_ShowChar+0xe0>)
 800a892:	0112      	lsls	r2, r2, #4
 800a894:	440a      	add	r2, r1
 800a896:	4413      	add	r3, r2
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800a89c:	2300      	movs	r3, #0
 800a89e:	737b      	strb	r3, [r7, #13]
 800a8a0:	e02d      	b.n	800a8fe <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800a8a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	da07      	bge.n	800a8ba <OLED_ShowChar+0x7a>
 800a8aa:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a8ae:	79b9      	ldrb	r1, [r7, #6]
 800a8b0:	79fb      	ldrb	r3, [r7, #7]
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7ff ff6a 	bl	800a78c <OLED_DrawPoint>
 800a8b8:	e00c      	b.n	800a8d4 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800a8ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	bf0c      	ite	eq
 800a8c2:	2301      	moveq	r3, #1
 800a8c4:	2300      	movne	r3, #0
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	79b9      	ldrb	r1, [r7, #6]
 800a8cc:	79fb      	ldrb	r3, [r7, #7]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7ff ff5c 	bl	800a78c <OLED_DrawPoint>
			temp<<=1;
 800a8d4:	7bfb      	ldrb	r3, [r7, #15]
 800a8d6:	005b      	lsls	r3, r3, #1
 800a8d8:	73fb      	strb	r3, [r7, #15]
			y++;
 800a8da:	79bb      	ldrb	r3, [r7, #6]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800a8e0:	79ba      	ldrb	r2, [r7, #6]
 800a8e2:	7b3b      	ldrb	r3, [r7, #12]
 800a8e4:	1ad2      	subs	r2, r2, r3
 800a8e6:	793b      	ldrb	r3, [r7, #4]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d105      	bne.n	800a8f8 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800a8ec:	7b3b      	ldrb	r3, [r7, #12]
 800a8ee:	71bb      	strb	r3, [r7, #6]
				x++;
 800a8f0:	79fb      	ldrb	r3, [r7, #7]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	71fb      	strb	r3, [r7, #7]
				break;
 800a8f6:	e005      	b.n	800a904 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800a8f8:	7b7b      	ldrb	r3, [r7, #13]
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	737b      	strb	r3, [r7, #13]
 800a8fe:	7b7b      	ldrb	r3, [r7, #13]
 800a900:	2b07      	cmp	r3, #7
 800a902:	d9ce      	bls.n	800a8a2 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800a904:	7bbb      	ldrb	r3, [r7, #14]
 800a906:	3301      	adds	r3, #1
 800a908:	73bb      	strb	r3, [r7, #14]
 800a90a:	7bba      	ldrb	r2, [r7, #14]
 800a90c:	793b      	ldrb	r3, [r7, #4]
 800a90e:	429a      	cmp	r2, r3
 800a910:	d3ad      	bcc.n	800a86e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800a912:	bf00      	nop
 800a914:	bf00      	nop
 800a916:	3714      	adds	r7, #20
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd90      	pop	{r4, r7, pc}
 800a91c:	0800c2ac 	.word	0x0800c2ac
 800a920:	0800c720 	.word	0x0800c720

0800a924 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af02      	add	r7, sp, #8
 800a92a:	4603      	mov	r3, r0
 800a92c:	603a      	str	r2, [r7, #0]
 800a92e:	71fb      	strb	r3, [r7, #7]
 800a930:	460b      	mov	r3, r1
 800a932:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800a934:	e01f      	b.n	800a976 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800a936:	79fb      	ldrb	r3, [r7, #7]
 800a938:	2b7a      	cmp	r3, #122	; 0x7a
 800a93a:	d904      	bls.n	800a946 <OLED_ShowString+0x22>
 800a93c:	2300      	movs	r3, #0
 800a93e:	71fb      	strb	r3, [r7, #7]
 800a940:	79bb      	ldrb	r3, [r7, #6]
 800a942:	3310      	adds	r3, #16
 800a944:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800a946:	79bb      	ldrb	r3, [r7, #6]
 800a948:	2b3a      	cmp	r3, #58	; 0x3a
 800a94a:	d905      	bls.n	800a958 <OLED_ShowString+0x34>
 800a94c:	2300      	movs	r3, #0
 800a94e:	71fb      	strb	r3, [r7, #7]
 800a950:	79fb      	ldrb	r3, [r7, #7]
 800a952:	71bb      	strb	r3, [r7, #6]
 800a954:	f7ff fef4 	bl	800a740 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	781a      	ldrb	r2, [r3, #0]
 800a95c:	79b9      	ldrb	r1, [r7, #6]
 800a95e:	79f8      	ldrb	r0, [r7, #7]
 800a960:	2301      	movs	r3, #1
 800a962:	9300      	str	r3, [sp, #0]
 800a964:	230c      	movs	r3, #12
 800a966:	f7ff ff6b 	bl	800a840 <OLED_ShowChar>
        x+=8;
 800a96a:	79fb      	ldrb	r3, [r7, #7]
 800a96c:	3308      	adds	r3, #8
 800a96e:	71fb      	strb	r3, [r7, #7]
        p++;
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	3301      	adds	r3, #1
 800a974:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1db      	bne.n	800a936 <OLED_ShowString+0x12>
    }  
}	 
 800a97e:	bf00      	nop
 800a980:	bf00      	nop
 800a982:	3708      	adds	r7, #8
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <OLED_Init>:

void OLED_Init(void)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800a98c:	f7f9 feba 	bl	8004704 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800a990:	4b41      	ldr	r3, [pc, #260]	; (800aa98 <OLED_Init+0x110>)
 800a992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a994:	4a40      	ldr	r2, [pc, #256]	; (800aa98 <OLED_Init+0x110>)
 800a996:	f023 0301 	bic.w	r3, r3, #1
 800a99a:	6713      	str	r3, [r2, #112]	; 0x70
 800a99c:	4b3e      	ldr	r3, [pc, #248]	; (800aa98 <OLED_Init+0x110>)
 800a99e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9a0:	4a3d      	ldr	r2, [pc, #244]	; (800aa98 <OLED_Init+0x110>)
 800a9a2:	f023 0304 	bic.w	r3, r3, #4
 800a9a6:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800a9a8:	f7f9 fec0 	bl	800472c <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	2180      	movs	r1, #128	; 0x80
 800a9b0:	483a      	ldr	r0, [pc, #232]	; (800aa9c <OLED_Init+0x114>)
 800a9b2:	f7f8 fecd 	bl	8003750 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800a9b6:	2064      	movs	r0, #100	; 0x64
 800a9b8:	f7f8 fb4e 	bl	8003058 <HAL_Delay>
	OLED_RST_Set();
 800a9bc:	2201      	movs	r2, #1
 800a9be:	2180      	movs	r1, #128	; 0x80
 800a9c0:	4836      	ldr	r0, [pc, #216]	; (800aa9c <OLED_Init+0x114>)
 800a9c2:	f7f8 fec5 	bl	8003750 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800a9c6:	2100      	movs	r1, #0
 800a9c8:	20ae      	movs	r0, #174	; 0xae
 800a9ca:	f7ff fe6f 	bl	800a6ac <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	20d5      	movs	r0, #213	; 0xd5
 800a9d2:	f7ff fe6b 	bl	800a6ac <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	2050      	movs	r0, #80	; 0x50
 800a9da:	f7ff fe67 	bl	800a6ac <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800a9de:	2100      	movs	r1, #0
 800a9e0:	20a8      	movs	r0, #168	; 0xa8
 800a9e2:	f7ff fe63 	bl	800a6ac <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	203f      	movs	r0, #63	; 0x3f
 800a9ea:	f7ff fe5f 	bl	800a6ac <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800a9ee:	2100      	movs	r1, #0
 800a9f0:	20d3      	movs	r0, #211	; 0xd3
 800a9f2:	f7ff fe5b 	bl	800a6ac <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	2000      	movs	r0, #0
 800a9fa:	f7ff fe57 	bl	800a6ac <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800a9fe:	2100      	movs	r1, #0
 800aa00:	2040      	movs	r0, #64	; 0x40
 800aa02:	f7ff fe53 	bl	800a6ac <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800aa06:	2100      	movs	r1, #0
 800aa08:	208d      	movs	r0, #141	; 0x8d
 800aa0a:	f7ff fe4f 	bl	800a6ac <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800aa0e:	2100      	movs	r1, #0
 800aa10:	2014      	movs	r0, #20
 800aa12:	f7ff fe4b 	bl	800a6ac <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800aa16:	2100      	movs	r1, #0
 800aa18:	2020      	movs	r0, #32
 800aa1a:	f7ff fe47 	bl	800a6ac <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800aa1e:	2100      	movs	r1, #0
 800aa20:	2002      	movs	r0, #2
 800aa22:	f7ff fe43 	bl	800a6ac <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800aa26:	2100      	movs	r1, #0
 800aa28:	20a1      	movs	r0, #161	; 0xa1
 800aa2a:	f7ff fe3f 	bl	800a6ac <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800aa2e:	2100      	movs	r1, #0
 800aa30:	20c0      	movs	r0, #192	; 0xc0
 800aa32:	f7ff fe3b 	bl	800a6ac <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800aa36:	2100      	movs	r1, #0
 800aa38:	20da      	movs	r0, #218	; 0xda
 800aa3a:	f7ff fe37 	bl	800a6ac <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800aa3e:	2100      	movs	r1, #0
 800aa40:	2012      	movs	r0, #18
 800aa42:	f7ff fe33 	bl	800a6ac <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800aa46:	2100      	movs	r1, #0
 800aa48:	2081      	movs	r0, #129	; 0x81
 800aa4a:	f7ff fe2f 	bl	800a6ac <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800aa4e:	2100      	movs	r1, #0
 800aa50:	20ef      	movs	r0, #239	; 0xef
 800aa52:	f7ff fe2b 	bl	800a6ac <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800aa56:	2100      	movs	r1, #0
 800aa58:	20d9      	movs	r0, #217	; 0xd9
 800aa5a:	f7ff fe27 	bl	800a6ac <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800aa5e:	2100      	movs	r1, #0
 800aa60:	20f1      	movs	r0, #241	; 0xf1
 800aa62:	f7ff fe23 	bl	800a6ac <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800aa66:	2100      	movs	r1, #0
 800aa68:	20db      	movs	r0, #219	; 0xdb
 800aa6a:	f7ff fe1f 	bl	800a6ac <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800aa6e:	2100      	movs	r1, #0
 800aa70:	2030      	movs	r0, #48	; 0x30
 800aa72:	f7ff fe1b 	bl	800a6ac <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800aa76:	2100      	movs	r1, #0
 800aa78:	20a4      	movs	r0, #164	; 0xa4
 800aa7a:	f7ff fe17 	bl	800a6ac <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800aa7e:	2100      	movs	r1, #0
 800aa80:	20a6      	movs	r0, #166	; 0xa6
 800aa82:	f7ff fe13 	bl	800a6ac <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800aa86:	2100      	movs	r1, #0
 800aa88:	20af      	movs	r0, #175	; 0xaf
 800aa8a:	f7ff fe0f 	bl	800a6ac <OLED_WR_Byte>
	OLED_Clear(); 
 800aa8e:	f7ff fe57 	bl	800a740 <OLED_Clear>
 800aa92:	bf00      	nop
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	40023800 	.word	0x40023800
 800aa9c:	40021000 	.word	0x40021000

0800aaa0 <atoi>:
 800aaa0:	220a      	movs	r2, #10
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	f000 ba36 	b.w	800af14 <strtol>

0800aaa8 <__errno>:
 800aaa8:	4b01      	ldr	r3, [pc, #4]	; (800aab0 <__errno+0x8>)
 800aaaa:	6818      	ldr	r0, [r3, #0]
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	20000034 	.word	0x20000034

0800aab4 <__libc_init_array>:
 800aab4:	b570      	push	{r4, r5, r6, lr}
 800aab6:	4d0d      	ldr	r5, [pc, #52]	; (800aaec <__libc_init_array+0x38>)
 800aab8:	4c0d      	ldr	r4, [pc, #52]	; (800aaf0 <__libc_init_array+0x3c>)
 800aaba:	1b64      	subs	r4, r4, r5
 800aabc:	10a4      	asrs	r4, r4, #2
 800aabe:	2600      	movs	r6, #0
 800aac0:	42a6      	cmp	r6, r4
 800aac2:	d109      	bne.n	800aad8 <__libc_init_array+0x24>
 800aac4:	4d0b      	ldr	r5, [pc, #44]	; (800aaf4 <__libc_init_array+0x40>)
 800aac6:	4c0c      	ldr	r4, [pc, #48]	; (800aaf8 <__libc_init_array+0x44>)
 800aac8:	f001 fade 	bl	800c088 <_init>
 800aacc:	1b64      	subs	r4, r4, r5
 800aace:	10a4      	asrs	r4, r4, #2
 800aad0:	2600      	movs	r6, #0
 800aad2:	42a6      	cmp	r6, r4
 800aad4:	d105      	bne.n	800aae2 <__libc_init_array+0x2e>
 800aad6:	bd70      	pop	{r4, r5, r6, pc}
 800aad8:	f855 3b04 	ldr.w	r3, [r5], #4
 800aadc:	4798      	blx	r3
 800aade:	3601      	adds	r6, #1
 800aae0:	e7ee      	b.n	800aac0 <__libc_init_array+0xc>
 800aae2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aae6:	4798      	blx	r3
 800aae8:	3601      	adds	r6, #1
 800aaea:	e7f2      	b.n	800aad2 <__libc_init_array+0x1e>
 800aaec:	0800cf64 	.word	0x0800cf64
 800aaf0:	0800cf64 	.word	0x0800cf64
 800aaf4:	0800cf64 	.word	0x0800cf64
 800aaf8:	0800cf68 	.word	0x0800cf68

0800aafc <malloc>:
 800aafc:	4b02      	ldr	r3, [pc, #8]	; (800ab08 <malloc+0xc>)
 800aafe:	4601      	mov	r1, r0
 800ab00:	6818      	ldr	r0, [r3, #0]
 800ab02:	f000 b885 	b.w	800ac10 <_malloc_r>
 800ab06:	bf00      	nop
 800ab08:	20000034 	.word	0x20000034

0800ab0c <memcpy>:
 800ab0c:	440a      	add	r2, r1
 800ab0e:	4291      	cmp	r1, r2
 800ab10:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab14:	d100      	bne.n	800ab18 <memcpy+0xc>
 800ab16:	4770      	bx	lr
 800ab18:	b510      	push	{r4, lr}
 800ab1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab22:	4291      	cmp	r1, r2
 800ab24:	d1f9      	bne.n	800ab1a <memcpy+0xe>
 800ab26:	bd10      	pop	{r4, pc}

0800ab28 <memset>:
 800ab28:	4402      	add	r2, r0
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d100      	bne.n	800ab32 <memset+0xa>
 800ab30:	4770      	bx	lr
 800ab32:	f803 1b01 	strb.w	r1, [r3], #1
 800ab36:	e7f9      	b.n	800ab2c <memset+0x4>

0800ab38 <_free_r>:
 800ab38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab3a:	2900      	cmp	r1, #0
 800ab3c:	d044      	beq.n	800abc8 <_free_r+0x90>
 800ab3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab42:	9001      	str	r0, [sp, #4]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	f1a1 0404 	sub.w	r4, r1, #4
 800ab4a:	bfb8      	it	lt
 800ab4c:	18e4      	addlt	r4, r4, r3
 800ab4e:	f000 fcfb 	bl	800b548 <__malloc_lock>
 800ab52:	4a1e      	ldr	r2, [pc, #120]	; (800abcc <_free_r+0x94>)
 800ab54:	9801      	ldr	r0, [sp, #4]
 800ab56:	6813      	ldr	r3, [r2, #0]
 800ab58:	b933      	cbnz	r3, 800ab68 <_free_r+0x30>
 800ab5a:	6063      	str	r3, [r4, #4]
 800ab5c:	6014      	str	r4, [r2, #0]
 800ab5e:	b003      	add	sp, #12
 800ab60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab64:	f000 bcf6 	b.w	800b554 <__malloc_unlock>
 800ab68:	42a3      	cmp	r3, r4
 800ab6a:	d908      	bls.n	800ab7e <_free_r+0x46>
 800ab6c:	6825      	ldr	r5, [r4, #0]
 800ab6e:	1961      	adds	r1, r4, r5
 800ab70:	428b      	cmp	r3, r1
 800ab72:	bf01      	itttt	eq
 800ab74:	6819      	ldreq	r1, [r3, #0]
 800ab76:	685b      	ldreq	r3, [r3, #4]
 800ab78:	1949      	addeq	r1, r1, r5
 800ab7a:	6021      	streq	r1, [r4, #0]
 800ab7c:	e7ed      	b.n	800ab5a <_free_r+0x22>
 800ab7e:	461a      	mov	r2, r3
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	b10b      	cbz	r3, 800ab88 <_free_r+0x50>
 800ab84:	42a3      	cmp	r3, r4
 800ab86:	d9fa      	bls.n	800ab7e <_free_r+0x46>
 800ab88:	6811      	ldr	r1, [r2, #0]
 800ab8a:	1855      	adds	r5, r2, r1
 800ab8c:	42a5      	cmp	r5, r4
 800ab8e:	d10b      	bne.n	800aba8 <_free_r+0x70>
 800ab90:	6824      	ldr	r4, [r4, #0]
 800ab92:	4421      	add	r1, r4
 800ab94:	1854      	adds	r4, r2, r1
 800ab96:	42a3      	cmp	r3, r4
 800ab98:	6011      	str	r1, [r2, #0]
 800ab9a:	d1e0      	bne.n	800ab5e <_free_r+0x26>
 800ab9c:	681c      	ldr	r4, [r3, #0]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	6053      	str	r3, [r2, #4]
 800aba2:	4421      	add	r1, r4
 800aba4:	6011      	str	r1, [r2, #0]
 800aba6:	e7da      	b.n	800ab5e <_free_r+0x26>
 800aba8:	d902      	bls.n	800abb0 <_free_r+0x78>
 800abaa:	230c      	movs	r3, #12
 800abac:	6003      	str	r3, [r0, #0]
 800abae:	e7d6      	b.n	800ab5e <_free_r+0x26>
 800abb0:	6825      	ldr	r5, [r4, #0]
 800abb2:	1961      	adds	r1, r4, r5
 800abb4:	428b      	cmp	r3, r1
 800abb6:	bf04      	itt	eq
 800abb8:	6819      	ldreq	r1, [r3, #0]
 800abba:	685b      	ldreq	r3, [r3, #4]
 800abbc:	6063      	str	r3, [r4, #4]
 800abbe:	bf04      	itt	eq
 800abc0:	1949      	addeq	r1, r1, r5
 800abc2:	6021      	streq	r1, [r4, #0]
 800abc4:	6054      	str	r4, [r2, #4]
 800abc6:	e7ca      	b.n	800ab5e <_free_r+0x26>
 800abc8:	b003      	add	sp, #12
 800abca:	bd30      	pop	{r4, r5, pc}
 800abcc:	2000570c 	.word	0x2000570c

0800abd0 <sbrk_aligned>:
 800abd0:	b570      	push	{r4, r5, r6, lr}
 800abd2:	4e0e      	ldr	r6, [pc, #56]	; (800ac0c <sbrk_aligned+0x3c>)
 800abd4:	460c      	mov	r4, r1
 800abd6:	6831      	ldr	r1, [r6, #0]
 800abd8:	4605      	mov	r5, r0
 800abda:	b911      	cbnz	r1, 800abe2 <sbrk_aligned+0x12>
 800abdc:	f000 f88c 	bl	800acf8 <_sbrk_r>
 800abe0:	6030      	str	r0, [r6, #0]
 800abe2:	4621      	mov	r1, r4
 800abe4:	4628      	mov	r0, r5
 800abe6:	f000 f887 	bl	800acf8 <_sbrk_r>
 800abea:	1c43      	adds	r3, r0, #1
 800abec:	d00a      	beq.n	800ac04 <sbrk_aligned+0x34>
 800abee:	1cc4      	adds	r4, r0, #3
 800abf0:	f024 0403 	bic.w	r4, r4, #3
 800abf4:	42a0      	cmp	r0, r4
 800abf6:	d007      	beq.n	800ac08 <sbrk_aligned+0x38>
 800abf8:	1a21      	subs	r1, r4, r0
 800abfa:	4628      	mov	r0, r5
 800abfc:	f000 f87c 	bl	800acf8 <_sbrk_r>
 800ac00:	3001      	adds	r0, #1
 800ac02:	d101      	bne.n	800ac08 <sbrk_aligned+0x38>
 800ac04:	f04f 34ff 	mov.w	r4, #4294967295
 800ac08:	4620      	mov	r0, r4
 800ac0a:	bd70      	pop	{r4, r5, r6, pc}
 800ac0c:	20005710 	.word	0x20005710

0800ac10 <_malloc_r>:
 800ac10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac14:	1ccd      	adds	r5, r1, #3
 800ac16:	f025 0503 	bic.w	r5, r5, #3
 800ac1a:	3508      	adds	r5, #8
 800ac1c:	2d0c      	cmp	r5, #12
 800ac1e:	bf38      	it	cc
 800ac20:	250c      	movcc	r5, #12
 800ac22:	2d00      	cmp	r5, #0
 800ac24:	4607      	mov	r7, r0
 800ac26:	db01      	blt.n	800ac2c <_malloc_r+0x1c>
 800ac28:	42a9      	cmp	r1, r5
 800ac2a:	d905      	bls.n	800ac38 <_malloc_r+0x28>
 800ac2c:	230c      	movs	r3, #12
 800ac2e:	603b      	str	r3, [r7, #0]
 800ac30:	2600      	movs	r6, #0
 800ac32:	4630      	mov	r0, r6
 800ac34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac38:	4e2e      	ldr	r6, [pc, #184]	; (800acf4 <_malloc_r+0xe4>)
 800ac3a:	f000 fc85 	bl	800b548 <__malloc_lock>
 800ac3e:	6833      	ldr	r3, [r6, #0]
 800ac40:	461c      	mov	r4, r3
 800ac42:	bb34      	cbnz	r4, 800ac92 <_malloc_r+0x82>
 800ac44:	4629      	mov	r1, r5
 800ac46:	4638      	mov	r0, r7
 800ac48:	f7ff ffc2 	bl	800abd0 <sbrk_aligned>
 800ac4c:	1c43      	adds	r3, r0, #1
 800ac4e:	4604      	mov	r4, r0
 800ac50:	d14d      	bne.n	800acee <_malloc_r+0xde>
 800ac52:	6834      	ldr	r4, [r6, #0]
 800ac54:	4626      	mov	r6, r4
 800ac56:	2e00      	cmp	r6, #0
 800ac58:	d140      	bne.n	800acdc <_malloc_r+0xcc>
 800ac5a:	6823      	ldr	r3, [r4, #0]
 800ac5c:	4631      	mov	r1, r6
 800ac5e:	4638      	mov	r0, r7
 800ac60:	eb04 0803 	add.w	r8, r4, r3
 800ac64:	f000 f848 	bl	800acf8 <_sbrk_r>
 800ac68:	4580      	cmp	r8, r0
 800ac6a:	d13a      	bne.n	800ace2 <_malloc_r+0xd2>
 800ac6c:	6821      	ldr	r1, [r4, #0]
 800ac6e:	3503      	adds	r5, #3
 800ac70:	1a6d      	subs	r5, r5, r1
 800ac72:	f025 0503 	bic.w	r5, r5, #3
 800ac76:	3508      	adds	r5, #8
 800ac78:	2d0c      	cmp	r5, #12
 800ac7a:	bf38      	it	cc
 800ac7c:	250c      	movcc	r5, #12
 800ac7e:	4629      	mov	r1, r5
 800ac80:	4638      	mov	r0, r7
 800ac82:	f7ff ffa5 	bl	800abd0 <sbrk_aligned>
 800ac86:	3001      	adds	r0, #1
 800ac88:	d02b      	beq.n	800ace2 <_malloc_r+0xd2>
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	442b      	add	r3, r5
 800ac8e:	6023      	str	r3, [r4, #0]
 800ac90:	e00e      	b.n	800acb0 <_malloc_r+0xa0>
 800ac92:	6822      	ldr	r2, [r4, #0]
 800ac94:	1b52      	subs	r2, r2, r5
 800ac96:	d41e      	bmi.n	800acd6 <_malloc_r+0xc6>
 800ac98:	2a0b      	cmp	r2, #11
 800ac9a:	d916      	bls.n	800acca <_malloc_r+0xba>
 800ac9c:	1961      	adds	r1, r4, r5
 800ac9e:	42a3      	cmp	r3, r4
 800aca0:	6025      	str	r5, [r4, #0]
 800aca2:	bf18      	it	ne
 800aca4:	6059      	strne	r1, [r3, #4]
 800aca6:	6863      	ldr	r3, [r4, #4]
 800aca8:	bf08      	it	eq
 800acaa:	6031      	streq	r1, [r6, #0]
 800acac:	5162      	str	r2, [r4, r5]
 800acae:	604b      	str	r3, [r1, #4]
 800acb0:	4638      	mov	r0, r7
 800acb2:	f104 060b 	add.w	r6, r4, #11
 800acb6:	f000 fc4d 	bl	800b554 <__malloc_unlock>
 800acba:	f026 0607 	bic.w	r6, r6, #7
 800acbe:	1d23      	adds	r3, r4, #4
 800acc0:	1af2      	subs	r2, r6, r3
 800acc2:	d0b6      	beq.n	800ac32 <_malloc_r+0x22>
 800acc4:	1b9b      	subs	r3, r3, r6
 800acc6:	50a3      	str	r3, [r4, r2]
 800acc8:	e7b3      	b.n	800ac32 <_malloc_r+0x22>
 800acca:	6862      	ldr	r2, [r4, #4]
 800accc:	42a3      	cmp	r3, r4
 800acce:	bf0c      	ite	eq
 800acd0:	6032      	streq	r2, [r6, #0]
 800acd2:	605a      	strne	r2, [r3, #4]
 800acd4:	e7ec      	b.n	800acb0 <_malloc_r+0xa0>
 800acd6:	4623      	mov	r3, r4
 800acd8:	6864      	ldr	r4, [r4, #4]
 800acda:	e7b2      	b.n	800ac42 <_malloc_r+0x32>
 800acdc:	4634      	mov	r4, r6
 800acde:	6876      	ldr	r6, [r6, #4]
 800ace0:	e7b9      	b.n	800ac56 <_malloc_r+0x46>
 800ace2:	230c      	movs	r3, #12
 800ace4:	603b      	str	r3, [r7, #0]
 800ace6:	4638      	mov	r0, r7
 800ace8:	f000 fc34 	bl	800b554 <__malloc_unlock>
 800acec:	e7a1      	b.n	800ac32 <_malloc_r+0x22>
 800acee:	6025      	str	r5, [r4, #0]
 800acf0:	e7de      	b.n	800acb0 <_malloc_r+0xa0>
 800acf2:	bf00      	nop
 800acf4:	2000570c 	.word	0x2000570c

0800acf8 <_sbrk_r>:
 800acf8:	b538      	push	{r3, r4, r5, lr}
 800acfa:	4d06      	ldr	r5, [pc, #24]	; (800ad14 <_sbrk_r+0x1c>)
 800acfc:	2300      	movs	r3, #0
 800acfe:	4604      	mov	r4, r0
 800ad00:	4608      	mov	r0, r1
 800ad02:	602b      	str	r3, [r5, #0]
 800ad04:	f7f8 f8c4 	bl	8002e90 <_sbrk>
 800ad08:	1c43      	adds	r3, r0, #1
 800ad0a:	d102      	bne.n	800ad12 <_sbrk_r+0x1a>
 800ad0c:	682b      	ldr	r3, [r5, #0]
 800ad0e:	b103      	cbz	r3, 800ad12 <_sbrk_r+0x1a>
 800ad10:	6023      	str	r3, [r4, #0]
 800ad12:	bd38      	pop	{r3, r4, r5, pc}
 800ad14:	20005718 	.word	0x20005718

0800ad18 <siprintf>:
 800ad18:	b40e      	push	{r1, r2, r3}
 800ad1a:	b500      	push	{lr}
 800ad1c:	b09c      	sub	sp, #112	; 0x70
 800ad1e:	ab1d      	add	r3, sp, #116	; 0x74
 800ad20:	9002      	str	r0, [sp, #8]
 800ad22:	9006      	str	r0, [sp, #24]
 800ad24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ad28:	4809      	ldr	r0, [pc, #36]	; (800ad50 <siprintf+0x38>)
 800ad2a:	9107      	str	r1, [sp, #28]
 800ad2c:	9104      	str	r1, [sp, #16]
 800ad2e:	4909      	ldr	r1, [pc, #36]	; (800ad54 <siprintf+0x3c>)
 800ad30:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad34:	9105      	str	r1, [sp, #20]
 800ad36:	6800      	ldr	r0, [r0, #0]
 800ad38:	9301      	str	r3, [sp, #4]
 800ad3a:	a902      	add	r1, sp, #8
 800ad3c:	f000 fc6c 	bl	800b618 <_svfiprintf_r>
 800ad40:	9b02      	ldr	r3, [sp, #8]
 800ad42:	2200      	movs	r2, #0
 800ad44:	701a      	strb	r2, [r3, #0]
 800ad46:	b01c      	add	sp, #112	; 0x70
 800ad48:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad4c:	b003      	add	sp, #12
 800ad4e:	4770      	bx	lr
 800ad50:	20000034 	.word	0x20000034
 800ad54:	ffff0208 	.word	0xffff0208

0800ad58 <strtok>:
 800ad58:	4b16      	ldr	r3, [pc, #88]	; (800adb4 <strtok+0x5c>)
 800ad5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad5c:	681e      	ldr	r6, [r3, #0]
 800ad5e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800ad60:	4605      	mov	r5, r0
 800ad62:	b9fc      	cbnz	r4, 800ada4 <strtok+0x4c>
 800ad64:	2050      	movs	r0, #80	; 0x50
 800ad66:	9101      	str	r1, [sp, #4]
 800ad68:	f7ff fec8 	bl	800aafc <malloc>
 800ad6c:	9901      	ldr	r1, [sp, #4]
 800ad6e:	65b0      	str	r0, [r6, #88]	; 0x58
 800ad70:	4602      	mov	r2, r0
 800ad72:	b920      	cbnz	r0, 800ad7e <strtok+0x26>
 800ad74:	4b10      	ldr	r3, [pc, #64]	; (800adb8 <strtok+0x60>)
 800ad76:	4811      	ldr	r0, [pc, #68]	; (800adbc <strtok+0x64>)
 800ad78:	2157      	movs	r1, #87	; 0x57
 800ad7a:	f000 f995 	bl	800b0a8 <__assert_func>
 800ad7e:	e9c0 4400 	strd	r4, r4, [r0]
 800ad82:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ad86:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ad8a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ad8e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ad92:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ad96:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ad9a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ad9e:	6184      	str	r4, [r0, #24]
 800ada0:	7704      	strb	r4, [r0, #28]
 800ada2:	6244      	str	r4, [r0, #36]	; 0x24
 800ada4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800ada6:	2301      	movs	r3, #1
 800ada8:	4628      	mov	r0, r5
 800adaa:	b002      	add	sp, #8
 800adac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800adb0:	f000 b806 	b.w	800adc0 <__strtok_r>
 800adb4:	20000034 	.word	0x20000034
 800adb8:	0800cd14 	.word	0x0800cd14
 800adbc:	0800cd2b 	.word	0x0800cd2b

0800adc0 <__strtok_r>:
 800adc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adc2:	b908      	cbnz	r0, 800adc8 <__strtok_r+0x8>
 800adc4:	6810      	ldr	r0, [r2, #0]
 800adc6:	b188      	cbz	r0, 800adec <__strtok_r+0x2c>
 800adc8:	4604      	mov	r4, r0
 800adca:	4620      	mov	r0, r4
 800adcc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800add0:	460f      	mov	r7, r1
 800add2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800add6:	b91e      	cbnz	r6, 800ade0 <__strtok_r+0x20>
 800add8:	b965      	cbnz	r5, 800adf4 <__strtok_r+0x34>
 800adda:	6015      	str	r5, [r2, #0]
 800addc:	4628      	mov	r0, r5
 800adde:	e005      	b.n	800adec <__strtok_r+0x2c>
 800ade0:	42b5      	cmp	r5, r6
 800ade2:	d1f6      	bne.n	800add2 <__strtok_r+0x12>
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d1f0      	bne.n	800adca <__strtok_r+0xa>
 800ade8:	6014      	str	r4, [r2, #0]
 800adea:	7003      	strb	r3, [r0, #0]
 800adec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adee:	461c      	mov	r4, r3
 800adf0:	e00c      	b.n	800ae0c <__strtok_r+0x4c>
 800adf2:	b915      	cbnz	r5, 800adfa <__strtok_r+0x3a>
 800adf4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800adf8:	460e      	mov	r6, r1
 800adfa:	f816 5b01 	ldrb.w	r5, [r6], #1
 800adfe:	42ab      	cmp	r3, r5
 800ae00:	d1f7      	bne.n	800adf2 <__strtok_r+0x32>
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d0f3      	beq.n	800adee <__strtok_r+0x2e>
 800ae06:	2300      	movs	r3, #0
 800ae08:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ae0c:	6014      	str	r4, [r2, #0]
 800ae0e:	e7ed      	b.n	800adec <__strtok_r+0x2c>

0800ae10 <_strtol_l.constprop.0>:
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae16:	d001      	beq.n	800ae1c <_strtol_l.constprop.0+0xc>
 800ae18:	2b24      	cmp	r3, #36	; 0x24
 800ae1a:	d906      	bls.n	800ae2a <_strtol_l.constprop.0+0x1a>
 800ae1c:	f7ff fe44 	bl	800aaa8 <__errno>
 800ae20:	2316      	movs	r3, #22
 800ae22:	6003      	str	r3, [r0, #0]
 800ae24:	2000      	movs	r0, #0
 800ae26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae2a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800af10 <_strtol_l.constprop.0+0x100>
 800ae2e:	460d      	mov	r5, r1
 800ae30:	462e      	mov	r6, r5
 800ae32:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae36:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ae3a:	f017 0708 	ands.w	r7, r7, #8
 800ae3e:	d1f7      	bne.n	800ae30 <_strtol_l.constprop.0+0x20>
 800ae40:	2c2d      	cmp	r4, #45	; 0x2d
 800ae42:	d132      	bne.n	800aeaa <_strtol_l.constprop.0+0x9a>
 800ae44:	782c      	ldrb	r4, [r5, #0]
 800ae46:	2701      	movs	r7, #1
 800ae48:	1cb5      	adds	r5, r6, #2
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d05b      	beq.n	800af06 <_strtol_l.constprop.0+0xf6>
 800ae4e:	2b10      	cmp	r3, #16
 800ae50:	d109      	bne.n	800ae66 <_strtol_l.constprop.0+0x56>
 800ae52:	2c30      	cmp	r4, #48	; 0x30
 800ae54:	d107      	bne.n	800ae66 <_strtol_l.constprop.0+0x56>
 800ae56:	782c      	ldrb	r4, [r5, #0]
 800ae58:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ae5c:	2c58      	cmp	r4, #88	; 0x58
 800ae5e:	d14d      	bne.n	800aefc <_strtol_l.constprop.0+0xec>
 800ae60:	786c      	ldrb	r4, [r5, #1]
 800ae62:	2310      	movs	r3, #16
 800ae64:	3502      	adds	r5, #2
 800ae66:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ae6a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae6e:	f04f 0c00 	mov.w	ip, #0
 800ae72:	fbb8 f9f3 	udiv	r9, r8, r3
 800ae76:	4666      	mov	r6, ip
 800ae78:	fb03 8a19 	mls	sl, r3, r9, r8
 800ae7c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ae80:	f1be 0f09 	cmp.w	lr, #9
 800ae84:	d816      	bhi.n	800aeb4 <_strtol_l.constprop.0+0xa4>
 800ae86:	4674      	mov	r4, lr
 800ae88:	42a3      	cmp	r3, r4
 800ae8a:	dd24      	ble.n	800aed6 <_strtol_l.constprop.0+0xc6>
 800ae8c:	f1bc 0f00 	cmp.w	ip, #0
 800ae90:	db1e      	blt.n	800aed0 <_strtol_l.constprop.0+0xc0>
 800ae92:	45b1      	cmp	r9, r6
 800ae94:	d31c      	bcc.n	800aed0 <_strtol_l.constprop.0+0xc0>
 800ae96:	d101      	bne.n	800ae9c <_strtol_l.constprop.0+0x8c>
 800ae98:	45a2      	cmp	sl, r4
 800ae9a:	db19      	blt.n	800aed0 <_strtol_l.constprop.0+0xc0>
 800ae9c:	fb06 4603 	mla	r6, r6, r3, r4
 800aea0:	f04f 0c01 	mov.w	ip, #1
 800aea4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aea8:	e7e8      	b.n	800ae7c <_strtol_l.constprop.0+0x6c>
 800aeaa:	2c2b      	cmp	r4, #43	; 0x2b
 800aeac:	bf04      	itt	eq
 800aeae:	782c      	ldrbeq	r4, [r5, #0]
 800aeb0:	1cb5      	addeq	r5, r6, #2
 800aeb2:	e7ca      	b.n	800ae4a <_strtol_l.constprop.0+0x3a>
 800aeb4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800aeb8:	f1be 0f19 	cmp.w	lr, #25
 800aebc:	d801      	bhi.n	800aec2 <_strtol_l.constprop.0+0xb2>
 800aebe:	3c37      	subs	r4, #55	; 0x37
 800aec0:	e7e2      	b.n	800ae88 <_strtol_l.constprop.0+0x78>
 800aec2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800aec6:	f1be 0f19 	cmp.w	lr, #25
 800aeca:	d804      	bhi.n	800aed6 <_strtol_l.constprop.0+0xc6>
 800aecc:	3c57      	subs	r4, #87	; 0x57
 800aece:	e7db      	b.n	800ae88 <_strtol_l.constprop.0+0x78>
 800aed0:	f04f 3cff 	mov.w	ip, #4294967295
 800aed4:	e7e6      	b.n	800aea4 <_strtol_l.constprop.0+0x94>
 800aed6:	f1bc 0f00 	cmp.w	ip, #0
 800aeda:	da05      	bge.n	800aee8 <_strtol_l.constprop.0+0xd8>
 800aedc:	2322      	movs	r3, #34	; 0x22
 800aede:	6003      	str	r3, [r0, #0]
 800aee0:	4646      	mov	r6, r8
 800aee2:	b942      	cbnz	r2, 800aef6 <_strtol_l.constprop.0+0xe6>
 800aee4:	4630      	mov	r0, r6
 800aee6:	e79e      	b.n	800ae26 <_strtol_l.constprop.0+0x16>
 800aee8:	b107      	cbz	r7, 800aeec <_strtol_l.constprop.0+0xdc>
 800aeea:	4276      	negs	r6, r6
 800aeec:	2a00      	cmp	r2, #0
 800aeee:	d0f9      	beq.n	800aee4 <_strtol_l.constprop.0+0xd4>
 800aef0:	f1bc 0f00 	cmp.w	ip, #0
 800aef4:	d000      	beq.n	800aef8 <_strtol_l.constprop.0+0xe8>
 800aef6:	1e69      	subs	r1, r5, #1
 800aef8:	6011      	str	r1, [r2, #0]
 800aefa:	e7f3      	b.n	800aee4 <_strtol_l.constprop.0+0xd4>
 800aefc:	2430      	movs	r4, #48	; 0x30
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d1b1      	bne.n	800ae66 <_strtol_l.constprop.0+0x56>
 800af02:	2308      	movs	r3, #8
 800af04:	e7af      	b.n	800ae66 <_strtol_l.constprop.0+0x56>
 800af06:	2c30      	cmp	r4, #48	; 0x30
 800af08:	d0a5      	beq.n	800ae56 <_strtol_l.constprop.0+0x46>
 800af0a:	230a      	movs	r3, #10
 800af0c:	e7ab      	b.n	800ae66 <_strtol_l.constprop.0+0x56>
 800af0e:	bf00      	nop
 800af10:	0800cdc5 	.word	0x0800cdc5

0800af14 <strtol>:
 800af14:	4613      	mov	r3, r2
 800af16:	460a      	mov	r2, r1
 800af18:	4601      	mov	r1, r0
 800af1a:	4802      	ldr	r0, [pc, #8]	; (800af24 <strtol+0x10>)
 800af1c:	6800      	ldr	r0, [r0, #0]
 800af1e:	f7ff bf77 	b.w	800ae10 <_strtol_l.constprop.0>
 800af22:	bf00      	nop
 800af24:	20000034 	.word	0x20000034

0800af28 <__swbuf_r>:
 800af28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2a:	460e      	mov	r6, r1
 800af2c:	4614      	mov	r4, r2
 800af2e:	4605      	mov	r5, r0
 800af30:	b118      	cbz	r0, 800af3a <__swbuf_r+0x12>
 800af32:	6983      	ldr	r3, [r0, #24]
 800af34:	b90b      	cbnz	r3, 800af3a <__swbuf_r+0x12>
 800af36:	f000 f9ef 	bl	800b318 <__sinit>
 800af3a:	4b21      	ldr	r3, [pc, #132]	; (800afc0 <__swbuf_r+0x98>)
 800af3c:	429c      	cmp	r4, r3
 800af3e:	d12b      	bne.n	800af98 <__swbuf_r+0x70>
 800af40:	686c      	ldr	r4, [r5, #4]
 800af42:	69a3      	ldr	r3, [r4, #24]
 800af44:	60a3      	str	r3, [r4, #8]
 800af46:	89a3      	ldrh	r3, [r4, #12]
 800af48:	071a      	lsls	r2, r3, #28
 800af4a:	d52f      	bpl.n	800afac <__swbuf_r+0x84>
 800af4c:	6923      	ldr	r3, [r4, #16]
 800af4e:	b36b      	cbz	r3, 800afac <__swbuf_r+0x84>
 800af50:	6923      	ldr	r3, [r4, #16]
 800af52:	6820      	ldr	r0, [r4, #0]
 800af54:	1ac0      	subs	r0, r0, r3
 800af56:	6963      	ldr	r3, [r4, #20]
 800af58:	b2f6      	uxtb	r6, r6
 800af5a:	4283      	cmp	r3, r0
 800af5c:	4637      	mov	r7, r6
 800af5e:	dc04      	bgt.n	800af6a <__swbuf_r+0x42>
 800af60:	4621      	mov	r1, r4
 800af62:	4628      	mov	r0, r5
 800af64:	f000 f944 	bl	800b1f0 <_fflush_r>
 800af68:	bb30      	cbnz	r0, 800afb8 <__swbuf_r+0x90>
 800af6a:	68a3      	ldr	r3, [r4, #8]
 800af6c:	3b01      	subs	r3, #1
 800af6e:	60a3      	str	r3, [r4, #8]
 800af70:	6823      	ldr	r3, [r4, #0]
 800af72:	1c5a      	adds	r2, r3, #1
 800af74:	6022      	str	r2, [r4, #0]
 800af76:	701e      	strb	r6, [r3, #0]
 800af78:	6963      	ldr	r3, [r4, #20]
 800af7a:	3001      	adds	r0, #1
 800af7c:	4283      	cmp	r3, r0
 800af7e:	d004      	beq.n	800af8a <__swbuf_r+0x62>
 800af80:	89a3      	ldrh	r3, [r4, #12]
 800af82:	07db      	lsls	r3, r3, #31
 800af84:	d506      	bpl.n	800af94 <__swbuf_r+0x6c>
 800af86:	2e0a      	cmp	r6, #10
 800af88:	d104      	bne.n	800af94 <__swbuf_r+0x6c>
 800af8a:	4621      	mov	r1, r4
 800af8c:	4628      	mov	r0, r5
 800af8e:	f000 f92f 	bl	800b1f0 <_fflush_r>
 800af92:	b988      	cbnz	r0, 800afb8 <__swbuf_r+0x90>
 800af94:	4638      	mov	r0, r7
 800af96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af98:	4b0a      	ldr	r3, [pc, #40]	; (800afc4 <__swbuf_r+0x9c>)
 800af9a:	429c      	cmp	r4, r3
 800af9c:	d101      	bne.n	800afa2 <__swbuf_r+0x7a>
 800af9e:	68ac      	ldr	r4, [r5, #8]
 800afa0:	e7cf      	b.n	800af42 <__swbuf_r+0x1a>
 800afa2:	4b09      	ldr	r3, [pc, #36]	; (800afc8 <__swbuf_r+0xa0>)
 800afa4:	429c      	cmp	r4, r3
 800afa6:	bf08      	it	eq
 800afa8:	68ec      	ldreq	r4, [r5, #12]
 800afaa:	e7ca      	b.n	800af42 <__swbuf_r+0x1a>
 800afac:	4621      	mov	r1, r4
 800afae:	4628      	mov	r0, r5
 800afb0:	f000 f80c 	bl	800afcc <__swsetup_r>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	d0cb      	beq.n	800af50 <__swbuf_r+0x28>
 800afb8:	f04f 37ff 	mov.w	r7, #4294967295
 800afbc:	e7ea      	b.n	800af94 <__swbuf_r+0x6c>
 800afbe:	bf00      	nop
 800afc0:	0800cee8 	.word	0x0800cee8
 800afc4:	0800cf08 	.word	0x0800cf08
 800afc8:	0800cec8 	.word	0x0800cec8

0800afcc <__swsetup_r>:
 800afcc:	4b32      	ldr	r3, [pc, #200]	; (800b098 <__swsetup_r+0xcc>)
 800afce:	b570      	push	{r4, r5, r6, lr}
 800afd0:	681d      	ldr	r5, [r3, #0]
 800afd2:	4606      	mov	r6, r0
 800afd4:	460c      	mov	r4, r1
 800afd6:	b125      	cbz	r5, 800afe2 <__swsetup_r+0x16>
 800afd8:	69ab      	ldr	r3, [r5, #24]
 800afda:	b913      	cbnz	r3, 800afe2 <__swsetup_r+0x16>
 800afdc:	4628      	mov	r0, r5
 800afde:	f000 f99b 	bl	800b318 <__sinit>
 800afe2:	4b2e      	ldr	r3, [pc, #184]	; (800b09c <__swsetup_r+0xd0>)
 800afe4:	429c      	cmp	r4, r3
 800afe6:	d10f      	bne.n	800b008 <__swsetup_r+0x3c>
 800afe8:	686c      	ldr	r4, [r5, #4]
 800afea:	89a3      	ldrh	r3, [r4, #12]
 800afec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aff0:	0719      	lsls	r1, r3, #28
 800aff2:	d42c      	bmi.n	800b04e <__swsetup_r+0x82>
 800aff4:	06dd      	lsls	r5, r3, #27
 800aff6:	d411      	bmi.n	800b01c <__swsetup_r+0x50>
 800aff8:	2309      	movs	r3, #9
 800affa:	6033      	str	r3, [r6, #0]
 800affc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b000:	81a3      	strh	r3, [r4, #12]
 800b002:	f04f 30ff 	mov.w	r0, #4294967295
 800b006:	e03e      	b.n	800b086 <__swsetup_r+0xba>
 800b008:	4b25      	ldr	r3, [pc, #148]	; (800b0a0 <__swsetup_r+0xd4>)
 800b00a:	429c      	cmp	r4, r3
 800b00c:	d101      	bne.n	800b012 <__swsetup_r+0x46>
 800b00e:	68ac      	ldr	r4, [r5, #8]
 800b010:	e7eb      	b.n	800afea <__swsetup_r+0x1e>
 800b012:	4b24      	ldr	r3, [pc, #144]	; (800b0a4 <__swsetup_r+0xd8>)
 800b014:	429c      	cmp	r4, r3
 800b016:	bf08      	it	eq
 800b018:	68ec      	ldreq	r4, [r5, #12]
 800b01a:	e7e6      	b.n	800afea <__swsetup_r+0x1e>
 800b01c:	0758      	lsls	r0, r3, #29
 800b01e:	d512      	bpl.n	800b046 <__swsetup_r+0x7a>
 800b020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b022:	b141      	cbz	r1, 800b036 <__swsetup_r+0x6a>
 800b024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b028:	4299      	cmp	r1, r3
 800b02a:	d002      	beq.n	800b032 <__swsetup_r+0x66>
 800b02c:	4630      	mov	r0, r6
 800b02e:	f7ff fd83 	bl	800ab38 <_free_r>
 800b032:	2300      	movs	r3, #0
 800b034:	6363      	str	r3, [r4, #52]	; 0x34
 800b036:	89a3      	ldrh	r3, [r4, #12]
 800b038:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b03c:	81a3      	strh	r3, [r4, #12]
 800b03e:	2300      	movs	r3, #0
 800b040:	6063      	str	r3, [r4, #4]
 800b042:	6923      	ldr	r3, [r4, #16]
 800b044:	6023      	str	r3, [r4, #0]
 800b046:	89a3      	ldrh	r3, [r4, #12]
 800b048:	f043 0308 	orr.w	r3, r3, #8
 800b04c:	81a3      	strh	r3, [r4, #12]
 800b04e:	6923      	ldr	r3, [r4, #16]
 800b050:	b94b      	cbnz	r3, 800b066 <__swsetup_r+0x9a>
 800b052:	89a3      	ldrh	r3, [r4, #12]
 800b054:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b05c:	d003      	beq.n	800b066 <__swsetup_r+0x9a>
 800b05e:	4621      	mov	r1, r4
 800b060:	4630      	mov	r0, r6
 800b062:	f000 fa31 	bl	800b4c8 <__smakebuf_r>
 800b066:	89a0      	ldrh	r0, [r4, #12]
 800b068:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b06c:	f010 0301 	ands.w	r3, r0, #1
 800b070:	d00a      	beq.n	800b088 <__swsetup_r+0xbc>
 800b072:	2300      	movs	r3, #0
 800b074:	60a3      	str	r3, [r4, #8]
 800b076:	6963      	ldr	r3, [r4, #20]
 800b078:	425b      	negs	r3, r3
 800b07a:	61a3      	str	r3, [r4, #24]
 800b07c:	6923      	ldr	r3, [r4, #16]
 800b07e:	b943      	cbnz	r3, 800b092 <__swsetup_r+0xc6>
 800b080:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b084:	d1ba      	bne.n	800affc <__swsetup_r+0x30>
 800b086:	bd70      	pop	{r4, r5, r6, pc}
 800b088:	0781      	lsls	r1, r0, #30
 800b08a:	bf58      	it	pl
 800b08c:	6963      	ldrpl	r3, [r4, #20]
 800b08e:	60a3      	str	r3, [r4, #8]
 800b090:	e7f4      	b.n	800b07c <__swsetup_r+0xb0>
 800b092:	2000      	movs	r0, #0
 800b094:	e7f7      	b.n	800b086 <__swsetup_r+0xba>
 800b096:	bf00      	nop
 800b098:	20000034 	.word	0x20000034
 800b09c:	0800cee8 	.word	0x0800cee8
 800b0a0:	0800cf08 	.word	0x0800cf08
 800b0a4:	0800cec8 	.word	0x0800cec8

0800b0a8 <__assert_func>:
 800b0a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0aa:	4614      	mov	r4, r2
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	4b09      	ldr	r3, [pc, #36]	; (800b0d4 <__assert_func+0x2c>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	68d8      	ldr	r0, [r3, #12]
 800b0b6:	b14c      	cbz	r4, 800b0cc <__assert_func+0x24>
 800b0b8:	4b07      	ldr	r3, [pc, #28]	; (800b0d8 <__assert_func+0x30>)
 800b0ba:	9100      	str	r1, [sp, #0]
 800b0bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b0c0:	4906      	ldr	r1, [pc, #24]	; (800b0dc <__assert_func+0x34>)
 800b0c2:	462b      	mov	r3, r5
 800b0c4:	f000 f9a6 	bl	800b414 <fiprintf>
 800b0c8:	f000 feea 	bl	800bea0 <abort>
 800b0cc:	4b04      	ldr	r3, [pc, #16]	; (800b0e0 <__assert_func+0x38>)
 800b0ce:	461c      	mov	r4, r3
 800b0d0:	e7f3      	b.n	800b0ba <__assert_func+0x12>
 800b0d2:	bf00      	nop
 800b0d4:	20000034 	.word	0x20000034
 800b0d8:	0800cd88 	.word	0x0800cd88
 800b0dc:	0800cd95 	.word	0x0800cd95
 800b0e0:	0800cdc3 	.word	0x0800cdc3

0800b0e4 <__sflush_r>:
 800b0e4:	898a      	ldrh	r2, [r1, #12]
 800b0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ea:	4605      	mov	r5, r0
 800b0ec:	0710      	lsls	r0, r2, #28
 800b0ee:	460c      	mov	r4, r1
 800b0f0:	d458      	bmi.n	800b1a4 <__sflush_r+0xc0>
 800b0f2:	684b      	ldr	r3, [r1, #4]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	dc05      	bgt.n	800b104 <__sflush_r+0x20>
 800b0f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	dc02      	bgt.n	800b104 <__sflush_r+0x20>
 800b0fe:	2000      	movs	r0, #0
 800b100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b104:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b106:	2e00      	cmp	r6, #0
 800b108:	d0f9      	beq.n	800b0fe <__sflush_r+0x1a>
 800b10a:	2300      	movs	r3, #0
 800b10c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b110:	682f      	ldr	r7, [r5, #0]
 800b112:	602b      	str	r3, [r5, #0]
 800b114:	d032      	beq.n	800b17c <__sflush_r+0x98>
 800b116:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b118:	89a3      	ldrh	r3, [r4, #12]
 800b11a:	075a      	lsls	r2, r3, #29
 800b11c:	d505      	bpl.n	800b12a <__sflush_r+0x46>
 800b11e:	6863      	ldr	r3, [r4, #4]
 800b120:	1ac0      	subs	r0, r0, r3
 800b122:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b124:	b10b      	cbz	r3, 800b12a <__sflush_r+0x46>
 800b126:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b128:	1ac0      	subs	r0, r0, r3
 800b12a:	2300      	movs	r3, #0
 800b12c:	4602      	mov	r2, r0
 800b12e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b130:	6a21      	ldr	r1, [r4, #32]
 800b132:	4628      	mov	r0, r5
 800b134:	47b0      	blx	r6
 800b136:	1c43      	adds	r3, r0, #1
 800b138:	89a3      	ldrh	r3, [r4, #12]
 800b13a:	d106      	bne.n	800b14a <__sflush_r+0x66>
 800b13c:	6829      	ldr	r1, [r5, #0]
 800b13e:	291d      	cmp	r1, #29
 800b140:	d82c      	bhi.n	800b19c <__sflush_r+0xb8>
 800b142:	4a2a      	ldr	r2, [pc, #168]	; (800b1ec <__sflush_r+0x108>)
 800b144:	40ca      	lsrs	r2, r1
 800b146:	07d6      	lsls	r6, r2, #31
 800b148:	d528      	bpl.n	800b19c <__sflush_r+0xb8>
 800b14a:	2200      	movs	r2, #0
 800b14c:	6062      	str	r2, [r4, #4]
 800b14e:	04d9      	lsls	r1, r3, #19
 800b150:	6922      	ldr	r2, [r4, #16]
 800b152:	6022      	str	r2, [r4, #0]
 800b154:	d504      	bpl.n	800b160 <__sflush_r+0x7c>
 800b156:	1c42      	adds	r2, r0, #1
 800b158:	d101      	bne.n	800b15e <__sflush_r+0x7a>
 800b15a:	682b      	ldr	r3, [r5, #0]
 800b15c:	b903      	cbnz	r3, 800b160 <__sflush_r+0x7c>
 800b15e:	6560      	str	r0, [r4, #84]	; 0x54
 800b160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b162:	602f      	str	r7, [r5, #0]
 800b164:	2900      	cmp	r1, #0
 800b166:	d0ca      	beq.n	800b0fe <__sflush_r+0x1a>
 800b168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b16c:	4299      	cmp	r1, r3
 800b16e:	d002      	beq.n	800b176 <__sflush_r+0x92>
 800b170:	4628      	mov	r0, r5
 800b172:	f7ff fce1 	bl	800ab38 <_free_r>
 800b176:	2000      	movs	r0, #0
 800b178:	6360      	str	r0, [r4, #52]	; 0x34
 800b17a:	e7c1      	b.n	800b100 <__sflush_r+0x1c>
 800b17c:	6a21      	ldr	r1, [r4, #32]
 800b17e:	2301      	movs	r3, #1
 800b180:	4628      	mov	r0, r5
 800b182:	47b0      	blx	r6
 800b184:	1c41      	adds	r1, r0, #1
 800b186:	d1c7      	bne.n	800b118 <__sflush_r+0x34>
 800b188:	682b      	ldr	r3, [r5, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d0c4      	beq.n	800b118 <__sflush_r+0x34>
 800b18e:	2b1d      	cmp	r3, #29
 800b190:	d001      	beq.n	800b196 <__sflush_r+0xb2>
 800b192:	2b16      	cmp	r3, #22
 800b194:	d101      	bne.n	800b19a <__sflush_r+0xb6>
 800b196:	602f      	str	r7, [r5, #0]
 800b198:	e7b1      	b.n	800b0fe <__sflush_r+0x1a>
 800b19a:	89a3      	ldrh	r3, [r4, #12]
 800b19c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1a0:	81a3      	strh	r3, [r4, #12]
 800b1a2:	e7ad      	b.n	800b100 <__sflush_r+0x1c>
 800b1a4:	690f      	ldr	r7, [r1, #16]
 800b1a6:	2f00      	cmp	r7, #0
 800b1a8:	d0a9      	beq.n	800b0fe <__sflush_r+0x1a>
 800b1aa:	0793      	lsls	r3, r2, #30
 800b1ac:	680e      	ldr	r6, [r1, #0]
 800b1ae:	bf08      	it	eq
 800b1b0:	694b      	ldreq	r3, [r1, #20]
 800b1b2:	600f      	str	r7, [r1, #0]
 800b1b4:	bf18      	it	ne
 800b1b6:	2300      	movne	r3, #0
 800b1b8:	eba6 0807 	sub.w	r8, r6, r7
 800b1bc:	608b      	str	r3, [r1, #8]
 800b1be:	f1b8 0f00 	cmp.w	r8, #0
 800b1c2:	dd9c      	ble.n	800b0fe <__sflush_r+0x1a>
 800b1c4:	6a21      	ldr	r1, [r4, #32]
 800b1c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b1c8:	4643      	mov	r3, r8
 800b1ca:	463a      	mov	r2, r7
 800b1cc:	4628      	mov	r0, r5
 800b1ce:	47b0      	blx	r6
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	dc06      	bgt.n	800b1e2 <__sflush_r+0xfe>
 800b1d4:	89a3      	ldrh	r3, [r4, #12]
 800b1d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1da:	81a3      	strh	r3, [r4, #12]
 800b1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e0:	e78e      	b.n	800b100 <__sflush_r+0x1c>
 800b1e2:	4407      	add	r7, r0
 800b1e4:	eba8 0800 	sub.w	r8, r8, r0
 800b1e8:	e7e9      	b.n	800b1be <__sflush_r+0xda>
 800b1ea:	bf00      	nop
 800b1ec:	20400001 	.word	0x20400001

0800b1f0 <_fflush_r>:
 800b1f0:	b538      	push	{r3, r4, r5, lr}
 800b1f2:	690b      	ldr	r3, [r1, #16]
 800b1f4:	4605      	mov	r5, r0
 800b1f6:	460c      	mov	r4, r1
 800b1f8:	b913      	cbnz	r3, 800b200 <_fflush_r+0x10>
 800b1fa:	2500      	movs	r5, #0
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	bd38      	pop	{r3, r4, r5, pc}
 800b200:	b118      	cbz	r0, 800b20a <_fflush_r+0x1a>
 800b202:	6983      	ldr	r3, [r0, #24]
 800b204:	b90b      	cbnz	r3, 800b20a <_fflush_r+0x1a>
 800b206:	f000 f887 	bl	800b318 <__sinit>
 800b20a:	4b14      	ldr	r3, [pc, #80]	; (800b25c <_fflush_r+0x6c>)
 800b20c:	429c      	cmp	r4, r3
 800b20e:	d11b      	bne.n	800b248 <_fflush_r+0x58>
 800b210:	686c      	ldr	r4, [r5, #4]
 800b212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d0ef      	beq.n	800b1fa <_fflush_r+0xa>
 800b21a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b21c:	07d0      	lsls	r0, r2, #31
 800b21e:	d404      	bmi.n	800b22a <_fflush_r+0x3a>
 800b220:	0599      	lsls	r1, r3, #22
 800b222:	d402      	bmi.n	800b22a <_fflush_r+0x3a>
 800b224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b226:	f000 f927 	bl	800b478 <__retarget_lock_acquire_recursive>
 800b22a:	4628      	mov	r0, r5
 800b22c:	4621      	mov	r1, r4
 800b22e:	f7ff ff59 	bl	800b0e4 <__sflush_r>
 800b232:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b234:	07da      	lsls	r2, r3, #31
 800b236:	4605      	mov	r5, r0
 800b238:	d4e0      	bmi.n	800b1fc <_fflush_r+0xc>
 800b23a:	89a3      	ldrh	r3, [r4, #12]
 800b23c:	059b      	lsls	r3, r3, #22
 800b23e:	d4dd      	bmi.n	800b1fc <_fflush_r+0xc>
 800b240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b242:	f000 f91a 	bl	800b47a <__retarget_lock_release_recursive>
 800b246:	e7d9      	b.n	800b1fc <_fflush_r+0xc>
 800b248:	4b05      	ldr	r3, [pc, #20]	; (800b260 <_fflush_r+0x70>)
 800b24a:	429c      	cmp	r4, r3
 800b24c:	d101      	bne.n	800b252 <_fflush_r+0x62>
 800b24e:	68ac      	ldr	r4, [r5, #8]
 800b250:	e7df      	b.n	800b212 <_fflush_r+0x22>
 800b252:	4b04      	ldr	r3, [pc, #16]	; (800b264 <_fflush_r+0x74>)
 800b254:	429c      	cmp	r4, r3
 800b256:	bf08      	it	eq
 800b258:	68ec      	ldreq	r4, [r5, #12]
 800b25a:	e7da      	b.n	800b212 <_fflush_r+0x22>
 800b25c:	0800cee8 	.word	0x0800cee8
 800b260:	0800cf08 	.word	0x0800cf08
 800b264:	0800cec8 	.word	0x0800cec8

0800b268 <std>:
 800b268:	2300      	movs	r3, #0
 800b26a:	b510      	push	{r4, lr}
 800b26c:	4604      	mov	r4, r0
 800b26e:	e9c0 3300 	strd	r3, r3, [r0]
 800b272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b276:	6083      	str	r3, [r0, #8]
 800b278:	8181      	strh	r1, [r0, #12]
 800b27a:	6643      	str	r3, [r0, #100]	; 0x64
 800b27c:	81c2      	strh	r2, [r0, #14]
 800b27e:	6183      	str	r3, [r0, #24]
 800b280:	4619      	mov	r1, r3
 800b282:	2208      	movs	r2, #8
 800b284:	305c      	adds	r0, #92	; 0x5c
 800b286:	f7ff fc4f 	bl	800ab28 <memset>
 800b28a:	4b05      	ldr	r3, [pc, #20]	; (800b2a0 <std+0x38>)
 800b28c:	6263      	str	r3, [r4, #36]	; 0x24
 800b28e:	4b05      	ldr	r3, [pc, #20]	; (800b2a4 <std+0x3c>)
 800b290:	62a3      	str	r3, [r4, #40]	; 0x28
 800b292:	4b05      	ldr	r3, [pc, #20]	; (800b2a8 <std+0x40>)
 800b294:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b296:	4b05      	ldr	r3, [pc, #20]	; (800b2ac <std+0x44>)
 800b298:	6224      	str	r4, [r4, #32]
 800b29a:	6323      	str	r3, [r4, #48]	; 0x30
 800b29c:	bd10      	pop	{r4, pc}
 800b29e:	bf00      	nop
 800b2a0:	0800bdf5 	.word	0x0800bdf5
 800b2a4:	0800be17 	.word	0x0800be17
 800b2a8:	0800be4f 	.word	0x0800be4f
 800b2ac:	0800be73 	.word	0x0800be73

0800b2b0 <_cleanup_r>:
 800b2b0:	4901      	ldr	r1, [pc, #4]	; (800b2b8 <_cleanup_r+0x8>)
 800b2b2:	f000 b8c1 	b.w	800b438 <_fwalk_reent>
 800b2b6:	bf00      	nop
 800b2b8:	0800b1f1 	.word	0x0800b1f1

0800b2bc <__sfmoreglue>:
 800b2bc:	b570      	push	{r4, r5, r6, lr}
 800b2be:	2268      	movs	r2, #104	; 0x68
 800b2c0:	1e4d      	subs	r5, r1, #1
 800b2c2:	4355      	muls	r5, r2
 800b2c4:	460e      	mov	r6, r1
 800b2c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b2ca:	f7ff fca1 	bl	800ac10 <_malloc_r>
 800b2ce:	4604      	mov	r4, r0
 800b2d0:	b140      	cbz	r0, 800b2e4 <__sfmoreglue+0x28>
 800b2d2:	2100      	movs	r1, #0
 800b2d4:	e9c0 1600 	strd	r1, r6, [r0]
 800b2d8:	300c      	adds	r0, #12
 800b2da:	60a0      	str	r0, [r4, #8]
 800b2dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b2e0:	f7ff fc22 	bl	800ab28 <memset>
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	bd70      	pop	{r4, r5, r6, pc}

0800b2e8 <__sfp_lock_acquire>:
 800b2e8:	4801      	ldr	r0, [pc, #4]	; (800b2f0 <__sfp_lock_acquire+0x8>)
 800b2ea:	f000 b8c5 	b.w	800b478 <__retarget_lock_acquire_recursive>
 800b2ee:	bf00      	nop
 800b2f0:	20005715 	.word	0x20005715

0800b2f4 <__sfp_lock_release>:
 800b2f4:	4801      	ldr	r0, [pc, #4]	; (800b2fc <__sfp_lock_release+0x8>)
 800b2f6:	f000 b8c0 	b.w	800b47a <__retarget_lock_release_recursive>
 800b2fa:	bf00      	nop
 800b2fc:	20005715 	.word	0x20005715

0800b300 <__sinit_lock_acquire>:
 800b300:	4801      	ldr	r0, [pc, #4]	; (800b308 <__sinit_lock_acquire+0x8>)
 800b302:	f000 b8b9 	b.w	800b478 <__retarget_lock_acquire_recursive>
 800b306:	bf00      	nop
 800b308:	20005716 	.word	0x20005716

0800b30c <__sinit_lock_release>:
 800b30c:	4801      	ldr	r0, [pc, #4]	; (800b314 <__sinit_lock_release+0x8>)
 800b30e:	f000 b8b4 	b.w	800b47a <__retarget_lock_release_recursive>
 800b312:	bf00      	nop
 800b314:	20005716 	.word	0x20005716

0800b318 <__sinit>:
 800b318:	b510      	push	{r4, lr}
 800b31a:	4604      	mov	r4, r0
 800b31c:	f7ff fff0 	bl	800b300 <__sinit_lock_acquire>
 800b320:	69a3      	ldr	r3, [r4, #24]
 800b322:	b11b      	cbz	r3, 800b32c <__sinit+0x14>
 800b324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b328:	f7ff bff0 	b.w	800b30c <__sinit_lock_release>
 800b32c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b330:	6523      	str	r3, [r4, #80]	; 0x50
 800b332:	4b13      	ldr	r3, [pc, #76]	; (800b380 <__sinit+0x68>)
 800b334:	4a13      	ldr	r2, [pc, #76]	; (800b384 <__sinit+0x6c>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	62a2      	str	r2, [r4, #40]	; 0x28
 800b33a:	42a3      	cmp	r3, r4
 800b33c:	bf04      	itt	eq
 800b33e:	2301      	moveq	r3, #1
 800b340:	61a3      	streq	r3, [r4, #24]
 800b342:	4620      	mov	r0, r4
 800b344:	f000 f820 	bl	800b388 <__sfp>
 800b348:	6060      	str	r0, [r4, #4]
 800b34a:	4620      	mov	r0, r4
 800b34c:	f000 f81c 	bl	800b388 <__sfp>
 800b350:	60a0      	str	r0, [r4, #8]
 800b352:	4620      	mov	r0, r4
 800b354:	f000 f818 	bl	800b388 <__sfp>
 800b358:	2200      	movs	r2, #0
 800b35a:	60e0      	str	r0, [r4, #12]
 800b35c:	2104      	movs	r1, #4
 800b35e:	6860      	ldr	r0, [r4, #4]
 800b360:	f7ff ff82 	bl	800b268 <std>
 800b364:	68a0      	ldr	r0, [r4, #8]
 800b366:	2201      	movs	r2, #1
 800b368:	2109      	movs	r1, #9
 800b36a:	f7ff ff7d 	bl	800b268 <std>
 800b36e:	68e0      	ldr	r0, [r4, #12]
 800b370:	2202      	movs	r2, #2
 800b372:	2112      	movs	r1, #18
 800b374:	f7ff ff78 	bl	800b268 <std>
 800b378:	2301      	movs	r3, #1
 800b37a:	61a3      	str	r3, [r4, #24]
 800b37c:	e7d2      	b.n	800b324 <__sinit+0xc>
 800b37e:	bf00      	nop
 800b380:	0800cd10 	.word	0x0800cd10
 800b384:	0800b2b1 	.word	0x0800b2b1

0800b388 <__sfp>:
 800b388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38a:	4607      	mov	r7, r0
 800b38c:	f7ff ffac 	bl	800b2e8 <__sfp_lock_acquire>
 800b390:	4b1e      	ldr	r3, [pc, #120]	; (800b40c <__sfp+0x84>)
 800b392:	681e      	ldr	r6, [r3, #0]
 800b394:	69b3      	ldr	r3, [r6, #24]
 800b396:	b913      	cbnz	r3, 800b39e <__sfp+0x16>
 800b398:	4630      	mov	r0, r6
 800b39a:	f7ff ffbd 	bl	800b318 <__sinit>
 800b39e:	3648      	adds	r6, #72	; 0x48
 800b3a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	d503      	bpl.n	800b3b0 <__sfp+0x28>
 800b3a8:	6833      	ldr	r3, [r6, #0]
 800b3aa:	b30b      	cbz	r3, 800b3f0 <__sfp+0x68>
 800b3ac:	6836      	ldr	r6, [r6, #0]
 800b3ae:	e7f7      	b.n	800b3a0 <__sfp+0x18>
 800b3b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b3b4:	b9d5      	cbnz	r5, 800b3ec <__sfp+0x64>
 800b3b6:	4b16      	ldr	r3, [pc, #88]	; (800b410 <__sfp+0x88>)
 800b3b8:	60e3      	str	r3, [r4, #12]
 800b3ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b3be:	6665      	str	r5, [r4, #100]	; 0x64
 800b3c0:	f000 f859 	bl	800b476 <__retarget_lock_init_recursive>
 800b3c4:	f7ff ff96 	bl	800b2f4 <__sfp_lock_release>
 800b3c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b3cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b3d0:	6025      	str	r5, [r4, #0]
 800b3d2:	61a5      	str	r5, [r4, #24]
 800b3d4:	2208      	movs	r2, #8
 800b3d6:	4629      	mov	r1, r5
 800b3d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b3dc:	f7ff fba4 	bl	800ab28 <memset>
 800b3e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b3e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3ec:	3468      	adds	r4, #104	; 0x68
 800b3ee:	e7d9      	b.n	800b3a4 <__sfp+0x1c>
 800b3f0:	2104      	movs	r1, #4
 800b3f2:	4638      	mov	r0, r7
 800b3f4:	f7ff ff62 	bl	800b2bc <__sfmoreglue>
 800b3f8:	4604      	mov	r4, r0
 800b3fa:	6030      	str	r0, [r6, #0]
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	d1d5      	bne.n	800b3ac <__sfp+0x24>
 800b400:	f7ff ff78 	bl	800b2f4 <__sfp_lock_release>
 800b404:	230c      	movs	r3, #12
 800b406:	603b      	str	r3, [r7, #0]
 800b408:	e7ee      	b.n	800b3e8 <__sfp+0x60>
 800b40a:	bf00      	nop
 800b40c:	0800cd10 	.word	0x0800cd10
 800b410:	ffff0001 	.word	0xffff0001

0800b414 <fiprintf>:
 800b414:	b40e      	push	{r1, r2, r3}
 800b416:	b503      	push	{r0, r1, lr}
 800b418:	4601      	mov	r1, r0
 800b41a:	ab03      	add	r3, sp, #12
 800b41c:	4805      	ldr	r0, [pc, #20]	; (800b434 <fiprintf+0x20>)
 800b41e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b422:	6800      	ldr	r0, [r0, #0]
 800b424:	9301      	str	r3, [sp, #4]
 800b426:	f000 fa21 	bl	800b86c <_vfiprintf_r>
 800b42a:	b002      	add	sp, #8
 800b42c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b430:	b003      	add	sp, #12
 800b432:	4770      	bx	lr
 800b434:	20000034 	.word	0x20000034

0800b438 <_fwalk_reent>:
 800b438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b43c:	4606      	mov	r6, r0
 800b43e:	4688      	mov	r8, r1
 800b440:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b444:	2700      	movs	r7, #0
 800b446:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b44a:	f1b9 0901 	subs.w	r9, r9, #1
 800b44e:	d505      	bpl.n	800b45c <_fwalk_reent+0x24>
 800b450:	6824      	ldr	r4, [r4, #0]
 800b452:	2c00      	cmp	r4, #0
 800b454:	d1f7      	bne.n	800b446 <_fwalk_reent+0xe>
 800b456:	4638      	mov	r0, r7
 800b458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b45c:	89ab      	ldrh	r3, [r5, #12]
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d907      	bls.n	800b472 <_fwalk_reent+0x3a>
 800b462:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b466:	3301      	adds	r3, #1
 800b468:	d003      	beq.n	800b472 <_fwalk_reent+0x3a>
 800b46a:	4629      	mov	r1, r5
 800b46c:	4630      	mov	r0, r6
 800b46e:	47c0      	blx	r8
 800b470:	4307      	orrs	r7, r0
 800b472:	3568      	adds	r5, #104	; 0x68
 800b474:	e7e9      	b.n	800b44a <_fwalk_reent+0x12>

0800b476 <__retarget_lock_init_recursive>:
 800b476:	4770      	bx	lr

0800b478 <__retarget_lock_acquire_recursive>:
 800b478:	4770      	bx	lr

0800b47a <__retarget_lock_release_recursive>:
 800b47a:	4770      	bx	lr

0800b47c <__swhatbuf_r>:
 800b47c:	b570      	push	{r4, r5, r6, lr}
 800b47e:	460e      	mov	r6, r1
 800b480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b484:	2900      	cmp	r1, #0
 800b486:	b096      	sub	sp, #88	; 0x58
 800b488:	4614      	mov	r4, r2
 800b48a:	461d      	mov	r5, r3
 800b48c:	da08      	bge.n	800b4a0 <__swhatbuf_r+0x24>
 800b48e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b492:	2200      	movs	r2, #0
 800b494:	602a      	str	r2, [r5, #0]
 800b496:	061a      	lsls	r2, r3, #24
 800b498:	d410      	bmi.n	800b4bc <__swhatbuf_r+0x40>
 800b49a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b49e:	e00e      	b.n	800b4be <__swhatbuf_r+0x42>
 800b4a0:	466a      	mov	r2, sp
 800b4a2:	f000 fd15 	bl	800bed0 <_fstat_r>
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	dbf1      	blt.n	800b48e <__swhatbuf_r+0x12>
 800b4aa:	9a01      	ldr	r2, [sp, #4]
 800b4ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b4b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b4b4:	425a      	negs	r2, r3
 800b4b6:	415a      	adcs	r2, r3
 800b4b8:	602a      	str	r2, [r5, #0]
 800b4ba:	e7ee      	b.n	800b49a <__swhatbuf_r+0x1e>
 800b4bc:	2340      	movs	r3, #64	; 0x40
 800b4be:	2000      	movs	r0, #0
 800b4c0:	6023      	str	r3, [r4, #0]
 800b4c2:	b016      	add	sp, #88	; 0x58
 800b4c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b4c8 <__smakebuf_r>:
 800b4c8:	898b      	ldrh	r3, [r1, #12]
 800b4ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4cc:	079d      	lsls	r5, r3, #30
 800b4ce:	4606      	mov	r6, r0
 800b4d0:	460c      	mov	r4, r1
 800b4d2:	d507      	bpl.n	800b4e4 <__smakebuf_r+0x1c>
 800b4d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b4d8:	6023      	str	r3, [r4, #0]
 800b4da:	6123      	str	r3, [r4, #16]
 800b4dc:	2301      	movs	r3, #1
 800b4de:	6163      	str	r3, [r4, #20]
 800b4e0:	b002      	add	sp, #8
 800b4e2:	bd70      	pop	{r4, r5, r6, pc}
 800b4e4:	ab01      	add	r3, sp, #4
 800b4e6:	466a      	mov	r2, sp
 800b4e8:	f7ff ffc8 	bl	800b47c <__swhatbuf_r>
 800b4ec:	9900      	ldr	r1, [sp, #0]
 800b4ee:	4605      	mov	r5, r0
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	f7ff fb8d 	bl	800ac10 <_malloc_r>
 800b4f6:	b948      	cbnz	r0, 800b50c <__smakebuf_r+0x44>
 800b4f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4fc:	059a      	lsls	r2, r3, #22
 800b4fe:	d4ef      	bmi.n	800b4e0 <__smakebuf_r+0x18>
 800b500:	f023 0303 	bic.w	r3, r3, #3
 800b504:	f043 0302 	orr.w	r3, r3, #2
 800b508:	81a3      	strh	r3, [r4, #12]
 800b50a:	e7e3      	b.n	800b4d4 <__smakebuf_r+0xc>
 800b50c:	4b0d      	ldr	r3, [pc, #52]	; (800b544 <__smakebuf_r+0x7c>)
 800b50e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b510:	89a3      	ldrh	r3, [r4, #12]
 800b512:	6020      	str	r0, [r4, #0]
 800b514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b518:	81a3      	strh	r3, [r4, #12]
 800b51a:	9b00      	ldr	r3, [sp, #0]
 800b51c:	6163      	str	r3, [r4, #20]
 800b51e:	9b01      	ldr	r3, [sp, #4]
 800b520:	6120      	str	r0, [r4, #16]
 800b522:	b15b      	cbz	r3, 800b53c <__smakebuf_r+0x74>
 800b524:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b528:	4630      	mov	r0, r6
 800b52a:	f000 fce3 	bl	800bef4 <_isatty_r>
 800b52e:	b128      	cbz	r0, 800b53c <__smakebuf_r+0x74>
 800b530:	89a3      	ldrh	r3, [r4, #12]
 800b532:	f023 0303 	bic.w	r3, r3, #3
 800b536:	f043 0301 	orr.w	r3, r3, #1
 800b53a:	81a3      	strh	r3, [r4, #12]
 800b53c:	89a0      	ldrh	r0, [r4, #12]
 800b53e:	4305      	orrs	r5, r0
 800b540:	81a5      	strh	r5, [r4, #12]
 800b542:	e7cd      	b.n	800b4e0 <__smakebuf_r+0x18>
 800b544:	0800b2b1 	.word	0x0800b2b1

0800b548 <__malloc_lock>:
 800b548:	4801      	ldr	r0, [pc, #4]	; (800b550 <__malloc_lock+0x8>)
 800b54a:	f7ff bf95 	b.w	800b478 <__retarget_lock_acquire_recursive>
 800b54e:	bf00      	nop
 800b550:	20005714 	.word	0x20005714

0800b554 <__malloc_unlock>:
 800b554:	4801      	ldr	r0, [pc, #4]	; (800b55c <__malloc_unlock+0x8>)
 800b556:	f7ff bf90 	b.w	800b47a <__retarget_lock_release_recursive>
 800b55a:	bf00      	nop
 800b55c:	20005714 	.word	0x20005714

0800b560 <__ssputs_r>:
 800b560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b564:	688e      	ldr	r6, [r1, #8]
 800b566:	429e      	cmp	r6, r3
 800b568:	4682      	mov	sl, r0
 800b56a:	460c      	mov	r4, r1
 800b56c:	4690      	mov	r8, r2
 800b56e:	461f      	mov	r7, r3
 800b570:	d838      	bhi.n	800b5e4 <__ssputs_r+0x84>
 800b572:	898a      	ldrh	r2, [r1, #12]
 800b574:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b578:	d032      	beq.n	800b5e0 <__ssputs_r+0x80>
 800b57a:	6825      	ldr	r5, [r4, #0]
 800b57c:	6909      	ldr	r1, [r1, #16]
 800b57e:	eba5 0901 	sub.w	r9, r5, r1
 800b582:	6965      	ldr	r5, [r4, #20]
 800b584:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b588:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b58c:	3301      	adds	r3, #1
 800b58e:	444b      	add	r3, r9
 800b590:	106d      	asrs	r5, r5, #1
 800b592:	429d      	cmp	r5, r3
 800b594:	bf38      	it	cc
 800b596:	461d      	movcc	r5, r3
 800b598:	0553      	lsls	r3, r2, #21
 800b59a:	d531      	bpl.n	800b600 <__ssputs_r+0xa0>
 800b59c:	4629      	mov	r1, r5
 800b59e:	f7ff fb37 	bl	800ac10 <_malloc_r>
 800b5a2:	4606      	mov	r6, r0
 800b5a4:	b950      	cbnz	r0, 800b5bc <__ssputs_r+0x5c>
 800b5a6:	230c      	movs	r3, #12
 800b5a8:	f8ca 3000 	str.w	r3, [sl]
 800b5ac:	89a3      	ldrh	r3, [r4, #12]
 800b5ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5b2:	81a3      	strh	r3, [r4, #12]
 800b5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5bc:	6921      	ldr	r1, [r4, #16]
 800b5be:	464a      	mov	r2, r9
 800b5c0:	f7ff faa4 	bl	800ab0c <memcpy>
 800b5c4:	89a3      	ldrh	r3, [r4, #12]
 800b5c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b5ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5ce:	81a3      	strh	r3, [r4, #12]
 800b5d0:	6126      	str	r6, [r4, #16]
 800b5d2:	6165      	str	r5, [r4, #20]
 800b5d4:	444e      	add	r6, r9
 800b5d6:	eba5 0509 	sub.w	r5, r5, r9
 800b5da:	6026      	str	r6, [r4, #0]
 800b5dc:	60a5      	str	r5, [r4, #8]
 800b5de:	463e      	mov	r6, r7
 800b5e0:	42be      	cmp	r6, r7
 800b5e2:	d900      	bls.n	800b5e6 <__ssputs_r+0x86>
 800b5e4:	463e      	mov	r6, r7
 800b5e6:	6820      	ldr	r0, [r4, #0]
 800b5e8:	4632      	mov	r2, r6
 800b5ea:	4641      	mov	r1, r8
 800b5ec:	f000 fca4 	bl	800bf38 <memmove>
 800b5f0:	68a3      	ldr	r3, [r4, #8]
 800b5f2:	1b9b      	subs	r3, r3, r6
 800b5f4:	60a3      	str	r3, [r4, #8]
 800b5f6:	6823      	ldr	r3, [r4, #0]
 800b5f8:	4433      	add	r3, r6
 800b5fa:	6023      	str	r3, [r4, #0]
 800b5fc:	2000      	movs	r0, #0
 800b5fe:	e7db      	b.n	800b5b8 <__ssputs_r+0x58>
 800b600:	462a      	mov	r2, r5
 800b602:	f000 fcb3 	bl	800bf6c <_realloc_r>
 800b606:	4606      	mov	r6, r0
 800b608:	2800      	cmp	r0, #0
 800b60a:	d1e1      	bne.n	800b5d0 <__ssputs_r+0x70>
 800b60c:	6921      	ldr	r1, [r4, #16]
 800b60e:	4650      	mov	r0, sl
 800b610:	f7ff fa92 	bl	800ab38 <_free_r>
 800b614:	e7c7      	b.n	800b5a6 <__ssputs_r+0x46>
	...

0800b618 <_svfiprintf_r>:
 800b618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b61c:	4698      	mov	r8, r3
 800b61e:	898b      	ldrh	r3, [r1, #12]
 800b620:	061b      	lsls	r3, r3, #24
 800b622:	b09d      	sub	sp, #116	; 0x74
 800b624:	4607      	mov	r7, r0
 800b626:	460d      	mov	r5, r1
 800b628:	4614      	mov	r4, r2
 800b62a:	d50e      	bpl.n	800b64a <_svfiprintf_r+0x32>
 800b62c:	690b      	ldr	r3, [r1, #16]
 800b62e:	b963      	cbnz	r3, 800b64a <_svfiprintf_r+0x32>
 800b630:	2140      	movs	r1, #64	; 0x40
 800b632:	f7ff faed 	bl	800ac10 <_malloc_r>
 800b636:	6028      	str	r0, [r5, #0]
 800b638:	6128      	str	r0, [r5, #16]
 800b63a:	b920      	cbnz	r0, 800b646 <_svfiprintf_r+0x2e>
 800b63c:	230c      	movs	r3, #12
 800b63e:	603b      	str	r3, [r7, #0]
 800b640:	f04f 30ff 	mov.w	r0, #4294967295
 800b644:	e0d1      	b.n	800b7ea <_svfiprintf_r+0x1d2>
 800b646:	2340      	movs	r3, #64	; 0x40
 800b648:	616b      	str	r3, [r5, #20]
 800b64a:	2300      	movs	r3, #0
 800b64c:	9309      	str	r3, [sp, #36]	; 0x24
 800b64e:	2320      	movs	r3, #32
 800b650:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b654:	f8cd 800c 	str.w	r8, [sp, #12]
 800b658:	2330      	movs	r3, #48	; 0x30
 800b65a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b804 <_svfiprintf_r+0x1ec>
 800b65e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b662:	f04f 0901 	mov.w	r9, #1
 800b666:	4623      	mov	r3, r4
 800b668:	469a      	mov	sl, r3
 800b66a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b66e:	b10a      	cbz	r2, 800b674 <_svfiprintf_r+0x5c>
 800b670:	2a25      	cmp	r2, #37	; 0x25
 800b672:	d1f9      	bne.n	800b668 <_svfiprintf_r+0x50>
 800b674:	ebba 0b04 	subs.w	fp, sl, r4
 800b678:	d00b      	beq.n	800b692 <_svfiprintf_r+0x7a>
 800b67a:	465b      	mov	r3, fp
 800b67c:	4622      	mov	r2, r4
 800b67e:	4629      	mov	r1, r5
 800b680:	4638      	mov	r0, r7
 800b682:	f7ff ff6d 	bl	800b560 <__ssputs_r>
 800b686:	3001      	adds	r0, #1
 800b688:	f000 80aa 	beq.w	800b7e0 <_svfiprintf_r+0x1c8>
 800b68c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b68e:	445a      	add	r2, fp
 800b690:	9209      	str	r2, [sp, #36]	; 0x24
 800b692:	f89a 3000 	ldrb.w	r3, [sl]
 800b696:	2b00      	cmp	r3, #0
 800b698:	f000 80a2 	beq.w	800b7e0 <_svfiprintf_r+0x1c8>
 800b69c:	2300      	movs	r3, #0
 800b69e:	f04f 32ff 	mov.w	r2, #4294967295
 800b6a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6a6:	f10a 0a01 	add.w	sl, sl, #1
 800b6aa:	9304      	str	r3, [sp, #16]
 800b6ac:	9307      	str	r3, [sp, #28]
 800b6ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6b2:	931a      	str	r3, [sp, #104]	; 0x68
 800b6b4:	4654      	mov	r4, sl
 800b6b6:	2205      	movs	r2, #5
 800b6b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6bc:	4851      	ldr	r0, [pc, #324]	; (800b804 <_svfiprintf_r+0x1ec>)
 800b6be:	f7f4 fd97 	bl	80001f0 <memchr>
 800b6c2:	9a04      	ldr	r2, [sp, #16]
 800b6c4:	b9d8      	cbnz	r0, 800b6fe <_svfiprintf_r+0xe6>
 800b6c6:	06d0      	lsls	r0, r2, #27
 800b6c8:	bf44      	itt	mi
 800b6ca:	2320      	movmi	r3, #32
 800b6cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6d0:	0711      	lsls	r1, r2, #28
 800b6d2:	bf44      	itt	mi
 800b6d4:	232b      	movmi	r3, #43	; 0x2b
 800b6d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6da:	f89a 3000 	ldrb.w	r3, [sl]
 800b6de:	2b2a      	cmp	r3, #42	; 0x2a
 800b6e0:	d015      	beq.n	800b70e <_svfiprintf_r+0xf6>
 800b6e2:	9a07      	ldr	r2, [sp, #28]
 800b6e4:	4654      	mov	r4, sl
 800b6e6:	2000      	movs	r0, #0
 800b6e8:	f04f 0c0a 	mov.w	ip, #10
 800b6ec:	4621      	mov	r1, r4
 800b6ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6f2:	3b30      	subs	r3, #48	; 0x30
 800b6f4:	2b09      	cmp	r3, #9
 800b6f6:	d94e      	bls.n	800b796 <_svfiprintf_r+0x17e>
 800b6f8:	b1b0      	cbz	r0, 800b728 <_svfiprintf_r+0x110>
 800b6fa:	9207      	str	r2, [sp, #28]
 800b6fc:	e014      	b.n	800b728 <_svfiprintf_r+0x110>
 800b6fe:	eba0 0308 	sub.w	r3, r0, r8
 800b702:	fa09 f303 	lsl.w	r3, r9, r3
 800b706:	4313      	orrs	r3, r2
 800b708:	9304      	str	r3, [sp, #16]
 800b70a:	46a2      	mov	sl, r4
 800b70c:	e7d2      	b.n	800b6b4 <_svfiprintf_r+0x9c>
 800b70e:	9b03      	ldr	r3, [sp, #12]
 800b710:	1d19      	adds	r1, r3, #4
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	9103      	str	r1, [sp, #12]
 800b716:	2b00      	cmp	r3, #0
 800b718:	bfbb      	ittet	lt
 800b71a:	425b      	neglt	r3, r3
 800b71c:	f042 0202 	orrlt.w	r2, r2, #2
 800b720:	9307      	strge	r3, [sp, #28]
 800b722:	9307      	strlt	r3, [sp, #28]
 800b724:	bfb8      	it	lt
 800b726:	9204      	strlt	r2, [sp, #16]
 800b728:	7823      	ldrb	r3, [r4, #0]
 800b72a:	2b2e      	cmp	r3, #46	; 0x2e
 800b72c:	d10c      	bne.n	800b748 <_svfiprintf_r+0x130>
 800b72e:	7863      	ldrb	r3, [r4, #1]
 800b730:	2b2a      	cmp	r3, #42	; 0x2a
 800b732:	d135      	bne.n	800b7a0 <_svfiprintf_r+0x188>
 800b734:	9b03      	ldr	r3, [sp, #12]
 800b736:	1d1a      	adds	r2, r3, #4
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	9203      	str	r2, [sp, #12]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	bfb8      	it	lt
 800b740:	f04f 33ff 	movlt.w	r3, #4294967295
 800b744:	3402      	adds	r4, #2
 800b746:	9305      	str	r3, [sp, #20]
 800b748:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b814 <_svfiprintf_r+0x1fc>
 800b74c:	7821      	ldrb	r1, [r4, #0]
 800b74e:	2203      	movs	r2, #3
 800b750:	4650      	mov	r0, sl
 800b752:	f7f4 fd4d 	bl	80001f0 <memchr>
 800b756:	b140      	cbz	r0, 800b76a <_svfiprintf_r+0x152>
 800b758:	2340      	movs	r3, #64	; 0x40
 800b75a:	eba0 000a 	sub.w	r0, r0, sl
 800b75e:	fa03 f000 	lsl.w	r0, r3, r0
 800b762:	9b04      	ldr	r3, [sp, #16]
 800b764:	4303      	orrs	r3, r0
 800b766:	3401      	adds	r4, #1
 800b768:	9304      	str	r3, [sp, #16]
 800b76a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b76e:	4826      	ldr	r0, [pc, #152]	; (800b808 <_svfiprintf_r+0x1f0>)
 800b770:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b774:	2206      	movs	r2, #6
 800b776:	f7f4 fd3b 	bl	80001f0 <memchr>
 800b77a:	2800      	cmp	r0, #0
 800b77c:	d038      	beq.n	800b7f0 <_svfiprintf_r+0x1d8>
 800b77e:	4b23      	ldr	r3, [pc, #140]	; (800b80c <_svfiprintf_r+0x1f4>)
 800b780:	bb1b      	cbnz	r3, 800b7ca <_svfiprintf_r+0x1b2>
 800b782:	9b03      	ldr	r3, [sp, #12]
 800b784:	3307      	adds	r3, #7
 800b786:	f023 0307 	bic.w	r3, r3, #7
 800b78a:	3308      	adds	r3, #8
 800b78c:	9303      	str	r3, [sp, #12]
 800b78e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b790:	4433      	add	r3, r6
 800b792:	9309      	str	r3, [sp, #36]	; 0x24
 800b794:	e767      	b.n	800b666 <_svfiprintf_r+0x4e>
 800b796:	fb0c 3202 	mla	r2, ip, r2, r3
 800b79a:	460c      	mov	r4, r1
 800b79c:	2001      	movs	r0, #1
 800b79e:	e7a5      	b.n	800b6ec <_svfiprintf_r+0xd4>
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	3401      	adds	r4, #1
 800b7a4:	9305      	str	r3, [sp, #20]
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	f04f 0c0a 	mov.w	ip, #10
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7b2:	3a30      	subs	r2, #48	; 0x30
 800b7b4:	2a09      	cmp	r2, #9
 800b7b6:	d903      	bls.n	800b7c0 <_svfiprintf_r+0x1a8>
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d0c5      	beq.n	800b748 <_svfiprintf_r+0x130>
 800b7bc:	9105      	str	r1, [sp, #20]
 800b7be:	e7c3      	b.n	800b748 <_svfiprintf_r+0x130>
 800b7c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7c4:	4604      	mov	r4, r0
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e7f0      	b.n	800b7ac <_svfiprintf_r+0x194>
 800b7ca:	ab03      	add	r3, sp, #12
 800b7cc:	9300      	str	r3, [sp, #0]
 800b7ce:	462a      	mov	r2, r5
 800b7d0:	4b0f      	ldr	r3, [pc, #60]	; (800b810 <_svfiprintf_r+0x1f8>)
 800b7d2:	a904      	add	r1, sp, #16
 800b7d4:	4638      	mov	r0, r7
 800b7d6:	f3af 8000 	nop.w
 800b7da:	1c42      	adds	r2, r0, #1
 800b7dc:	4606      	mov	r6, r0
 800b7de:	d1d6      	bne.n	800b78e <_svfiprintf_r+0x176>
 800b7e0:	89ab      	ldrh	r3, [r5, #12]
 800b7e2:	065b      	lsls	r3, r3, #25
 800b7e4:	f53f af2c 	bmi.w	800b640 <_svfiprintf_r+0x28>
 800b7e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7ea:	b01d      	add	sp, #116	; 0x74
 800b7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f0:	ab03      	add	r3, sp, #12
 800b7f2:	9300      	str	r3, [sp, #0]
 800b7f4:	462a      	mov	r2, r5
 800b7f6:	4b06      	ldr	r3, [pc, #24]	; (800b810 <_svfiprintf_r+0x1f8>)
 800b7f8:	a904      	add	r1, sp, #16
 800b7fa:	4638      	mov	r0, r7
 800b7fc:	f000 f9d4 	bl	800bba8 <_printf_i>
 800b800:	e7eb      	b.n	800b7da <_svfiprintf_r+0x1c2>
 800b802:	bf00      	nop
 800b804:	0800cf28 	.word	0x0800cf28
 800b808:	0800cf32 	.word	0x0800cf32
 800b80c:	00000000 	.word	0x00000000
 800b810:	0800b561 	.word	0x0800b561
 800b814:	0800cf2e 	.word	0x0800cf2e

0800b818 <__sfputc_r>:
 800b818:	6893      	ldr	r3, [r2, #8]
 800b81a:	3b01      	subs	r3, #1
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	b410      	push	{r4}
 800b820:	6093      	str	r3, [r2, #8]
 800b822:	da08      	bge.n	800b836 <__sfputc_r+0x1e>
 800b824:	6994      	ldr	r4, [r2, #24]
 800b826:	42a3      	cmp	r3, r4
 800b828:	db01      	blt.n	800b82e <__sfputc_r+0x16>
 800b82a:	290a      	cmp	r1, #10
 800b82c:	d103      	bne.n	800b836 <__sfputc_r+0x1e>
 800b82e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b832:	f7ff bb79 	b.w	800af28 <__swbuf_r>
 800b836:	6813      	ldr	r3, [r2, #0]
 800b838:	1c58      	adds	r0, r3, #1
 800b83a:	6010      	str	r0, [r2, #0]
 800b83c:	7019      	strb	r1, [r3, #0]
 800b83e:	4608      	mov	r0, r1
 800b840:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b844:	4770      	bx	lr

0800b846 <__sfputs_r>:
 800b846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b848:	4606      	mov	r6, r0
 800b84a:	460f      	mov	r7, r1
 800b84c:	4614      	mov	r4, r2
 800b84e:	18d5      	adds	r5, r2, r3
 800b850:	42ac      	cmp	r4, r5
 800b852:	d101      	bne.n	800b858 <__sfputs_r+0x12>
 800b854:	2000      	movs	r0, #0
 800b856:	e007      	b.n	800b868 <__sfputs_r+0x22>
 800b858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b85c:	463a      	mov	r2, r7
 800b85e:	4630      	mov	r0, r6
 800b860:	f7ff ffda 	bl	800b818 <__sfputc_r>
 800b864:	1c43      	adds	r3, r0, #1
 800b866:	d1f3      	bne.n	800b850 <__sfputs_r+0xa>
 800b868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b86c <_vfiprintf_r>:
 800b86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b870:	460d      	mov	r5, r1
 800b872:	b09d      	sub	sp, #116	; 0x74
 800b874:	4614      	mov	r4, r2
 800b876:	4698      	mov	r8, r3
 800b878:	4606      	mov	r6, r0
 800b87a:	b118      	cbz	r0, 800b884 <_vfiprintf_r+0x18>
 800b87c:	6983      	ldr	r3, [r0, #24]
 800b87e:	b90b      	cbnz	r3, 800b884 <_vfiprintf_r+0x18>
 800b880:	f7ff fd4a 	bl	800b318 <__sinit>
 800b884:	4b89      	ldr	r3, [pc, #548]	; (800baac <_vfiprintf_r+0x240>)
 800b886:	429d      	cmp	r5, r3
 800b888:	d11b      	bne.n	800b8c2 <_vfiprintf_r+0x56>
 800b88a:	6875      	ldr	r5, [r6, #4]
 800b88c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b88e:	07d9      	lsls	r1, r3, #31
 800b890:	d405      	bmi.n	800b89e <_vfiprintf_r+0x32>
 800b892:	89ab      	ldrh	r3, [r5, #12]
 800b894:	059a      	lsls	r2, r3, #22
 800b896:	d402      	bmi.n	800b89e <_vfiprintf_r+0x32>
 800b898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b89a:	f7ff fded 	bl	800b478 <__retarget_lock_acquire_recursive>
 800b89e:	89ab      	ldrh	r3, [r5, #12]
 800b8a0:	071b      	lsls	r3, r3, #28
 800b8a2:	d501      	bpl.n	800b8a8 <_vfiprintf_r+0x3c>
 800b8a4:	692b      	ldr	r3, [r5, #16]
 800b8a6:	b9eb      	cbnz	r3, 800b8e4 <_vfiprintf_r+0x78>
 800b8a8:	4629      	mov	r1, r5
 800b8aa:	4630      	mov	r0, r6
 800b8ac:	f7ff fb8e 	bl	800afcc <__swsetup_r>
 800b8b0:	b1c0      	cbz	r0, 800b8e4 <_vfiprintf_r+0x78>
 800b8b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8b4:	07dc      	lsls	r4, r3, #31
 800b8b6:	d50e      	bpl.n	800b8d6 <_vfiprintf_r+0x6a>
 800b8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8bc:	b01d      	add	sp, #116	; 0x74
 800b8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c2:	4b7b      	ldr	r3, [pc, #492]	; (800bab0 <_vfiprintf_r+0x244>)
 800b8c4:	429d      	cmp	r5, r3
 800b8c6:	d101      	bne.n	800b8cc <_vfiprintf_r+0x60>
 800b8c8:	68b5      	ldr	r5, [r6, #8]
 800b8ca:	e7df      	b.n	800b88c <_vfiprintf_r+0x20>
 800b8cc:	4b79      	ldr	r3, [pc, #484]	; (800bab4 <_vfiprintf_r+0x248>)
 800b8ce:	429d      	cmp	r5, r3
 800b8d0:	bf08      	it	eq
 800b8d2:	68f5      	ldreq	r5, [r6, #12]
 800b8d4:	e7da      	b.n	800b88c <_vfiprintf_r+0x20>
 800b8d6:	89ab      	ldrh	r3, [r5, #12]
 800b8d8:	0598      	lsls	r0, r3, #22
 800b8da:	d4ed      	bmi.n	800b8b8 <_vfiprintf_r+0x4c>
 800b8dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8de:	f7ff fdcc 	bl	800b47a <__retarget_lock_release_recursive>
 800b8e2:	e7e9      	b.n	800b8b8 <_vfiprintf_r+0x4c>
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b8e8:	2320      	movs	r3, #32
 800b8ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8f2:	2330      	movs	r3, #48	; 0x30
 800b8f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bab8 <_vfiprintf_r+0x24c>
 800b8f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8fc:	f04f 0901 	mov.w	r9, #1
 800b900:	4623      	mov	r3, r4
 800b902:	469a      	mov	sl, r3
 800b904:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b908:	b10a      	cbz	r2, 800b90e <_vfiprintf_r+0xa2>
 800b90a:	2a25      	cmp	r2, #37	; 0x25
 800b90c:	d1f9      	bne.n	800b902 <_vfiprintf_r+0x96>
 800b90e:	ebba 0b04 	subs.w	fp, sl, r4
 800b912:	d00b      	beq.n	800b92c <_vfiprintf_r+0xc0>
 800b914:	465b      	mov	r3, fp
 800b916:	4622      	mov	r2, r4
 800b918:	4629      	mov	r1, r5
 800b91a:	4630      	mov	r0, r6
 800b91c:	f7ff ff93 	bl	800b846 <__sfputs_r>
 800b920:	3001      	adds	r0, #1
 800b922:	f000 80aa 	beq.w	800ba7a <_vfiprintf_r+0x20e>
 800b926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b928:	445a      	add	r2, fp
 800b92a:	9209      	str	r2, [sp, #36]	; 0x24
 800b92c:	f89a 3000 	ldrb.w	r3, [sl]
 800b930:	2b00      	cmp	r3, #0
 800b932:	f000 80a2 	beq.w	800ba7a <_vfiprintf_r+0x20e>
 800b936:	2300      	movs	r3, #0
 800b938:	f04f 32ff 	mov.w	r2, #4294967295
 800b93c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b940:	f10a 0a01 	add.w	sl, sl, #1
 800b944:	9304      	str	r3, [sp, #16]
 800b946:	9307      	str	r3, [sp, #28]
 800b948:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b94c:	931a      	str	r3, [sp, #104]	; 0x68
 800b94e:	4654      	mov	r4, sl
 800b950:	2205      	movs	r2, #5
 800b952:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b956:	4858      	ldr	r0, [pc, #352]	; (800bab8 <_vfiprintf_r+0x24c>)
 800b958:	f7f4 fc4a 	bl	80001f0 <memchr>
 800b95c:	9a04      	ldr	r2, [sp, #16]
 800b95e:	b9d8      	cbnz	r0, 800b998 <_vfiprintf_r+0x12c>
 800b960:	06d1      	lsls	r1, r2, #27
 800b962:	bf44      	itt	mi
 800b964:	2320      	movmi	r3, #32
 800b966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b96a:	0713      	lsls	r3, r2, #28
 800b96c:	bf44      	itt	mi
 800b96e:	232b      	movmi	r3, #43	; 0x2b
 800b970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b974:	f89a 3000 	ldrb.w	r3, [sl]
 800b978:	2b2a      	cmp	r3, #42	; 0x2a
 800b97a:	d015      	beq.n	800b9a8 <_vfiprintf_r+0x13c>
 800b97c:	9a07      	ldr	r2, [sp, #28]
 800b97e:	4654      	mov	r4, sl
 800b980:	2000      	movs	r0, #0
 800b982:	f04f 0c0a 	mov.w	ip, #10
 800b986:	4621      	mov	r1, r4
 800b988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b98c:	3b30      	subs	r3, #48	; 0x30
 800b98e:	2b09      	cmp	r3, #9
 800b990:	d94e      	bls.n	800ba30 <_vfiprintf_r+0x1c4>
 800b992:	b1b0      	cbz	r0, 800b9c2 <_vfiprintf_r+0x156>
 800b994:	9207      	str	r2, [sp, #28]
 800b996:	e014      	b.n	800b9c2 <_vfiprintf_r+0x156>
 800b998:	eba0 0308 	sub.w	r3, r0, r8
 800b99c:	fa09 f303 	lsl.w	r3, r9, r3
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	9304      	str	r3, [sp, #16]
 800b9a4:	46a2      	mov	sl, r4
 800b9a6:	e7d2      	b.n	800b94e <_vfiprintf_r+0xe2>
 800b9a8:	9b03      	ldr	r3, [sp, #12]
 800b9aa:	1d19      	adds	r1, r3, #4
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	9103      	str	r1, [sp, #12]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	bfbb      	ittet	lt
 800b9b4:	425b      	neglt	r3, r3
 800b9b6:	f042 0202 	orrlt.w	r2, r2, #2
 800b9ba:	9307      	strge	r3, [sp, #28]
 800b9bc:	9307      	strlt	r3, [sp, #28]
 800b9be:	bfb8      	it	lt
 800b9c0:	9204      	strlt	r2, [sp, #16]
 800b9c2:	7823      	ldrb	r3, [r4, #0]
 800b9c4:	2b2e      	cmp	r3, #46	; 0x2e
 800b9c6:	d10c      	bne.n	800b9e2 <_vfiprintf_r+0x176>
 800b9c8:	7863      	ldrb	r3, [r4, #1]
 800b9ca:	2b2a      	cmp	r3, #42	; 0x2a
 800b9cc:	d135      	bne.n	800ba3a <_vfiprintf_r+0x1ce>
 800b9ce:	9b03      	ldr	r3, [sp, #12]
 800b9d0:	1d1a      	adds	r2, r3, #4
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	9203      	str	r2, [sp, #12]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	bfb8      	it	lt
 800b9da:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9de:	3402      	adds	r4, #2
 800b9e0:	9305      	str	r3, [sp, #20]
 800b9e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bac8 <_vfiprintf_r+0x25c>
 800b9e6:	7821      	ldrb	r1, [r4, #0]
 800b9e8:	2203      	movs	r2, #3
 800b9ea:	4650      	mov	r0, sl
 800b9ec:	f7f4 fc00 	bl	80001f0 <memchr>
 800b9f0:	b140      	cbz	r0, 800ba04 <_vfiprintf_r+0x198>
 800b9f2:	2340      	movs	r3, #64	; 0x40
 800b9f4:	eba0 000a 	sub.w	r0, r0, sl
 800b9f8:	fa03 f000 	lsl.w	r0, r3, r0
 800b9fc:	9b04      	ldr	r3, [sp, #16]
 800b9fe:	4303      	orrs	r3, r0
 800ba00:	3401      	adds	r4, #1
 800ba02:	9304      	str	r3, [sp, #16]
 800ba04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba08:	482c      	ldr	r0, [pc, #176]	; (800babc <_vfiprintf_r+0x250>)
 800ba0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba0e:	2206      	movs	r2, #6
 800ba10:	f7f4 fbee 	bl	80001f0 <memchr>
 800ba14:	2800      	cmp	r0, #0
 800ba16:	d03f      	beq.n	800ba98 <_vfiprintf_r+0x22c>
 800ba18:	4b29      	ldr	r3, [pc, #164]	; (800bac0 <_vfiprintf_r+0x254>)
 800ba1a:	bb1b      	cbnz	r3, 800ba64 <_vfiprintf_r+0x1f8>
 800ba1c:	9b03      	ldr	r3, [sp, #12]
 800ba1e:	3307      	adds	r3, #7
 800ba20:	f023 0307 	bic.w	r3, r3, #7
 800ba24:	3308      	adds	r3, #8
 800ba26:	9303      	str	r3, [sp, #12]
 800ba28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba2a:	443b      	add	r3, r7
 800ba2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba2e:	e767      	b.n	800b900 <_vfiprintf_r+0x94>
 800ba30:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba34:	460c      	mov	r4, r1
 800ba36:	2001      	movs	r0, #1
 800ba38:	e7a5      	b.n	800b986 <_vfiprintf_r+0x11a>
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	3401      	adds	r4, #1
 800ba3e:	9305      	str	r3, [sp, #20]
 800ba40:	4619      	mov	r1, r3
 800ba42:	f04f 0c0a 	mov.w	ip, #10
 800ba46:	4620      	mov	r0, r4
 800ba48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba4c:	3a30      	subs	r2, #48	; 0x30
 800ba4e:	2a09      	cmp	r2, #9
 800ba50:	d903      	bls.n	800ba5a <_vfiprintf_r+0x1ee>
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d0c5      	beq.n	800b9e2 <_vfiprintf_r+0x176>
 800ba56:	9105      	str	r1, [sp, #20]
 800ba58:	e7c3      	b.n	800b9e2 <_vfiprintf_r+0x176>
 800ba5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba5e:	4604      	mov	r4, r0
 800ba60:	2301      	movs	r3, #1
 800ba62:	e7f0      	b.n	800ba46 <_vfiprintf_r+0x1da>
 800ba64:	ab03      	add	r3, sp, #12
 800ba66:	9300      	str	r3, [sp, #0]
 800ba68:	462a      	mov	r2, r5
 800ba6a:	4b16      	ldr	r3, [pc, #88]	; (800bac4 <_vfiprintf_r+0x258>)
 800ba6c:	a904      	add	r1, sp, #16
 800ba6e:	4630      	mov	r0, r6
 800ba70:	f3af 8000 	nop.w
 800ba74:	4607      	mov	r7, r0
 800ba76:	1c78      	adds	r0, r7, #1
 800ba78:	d1d6      	bne.n	800ba28 <_vfiprintf_r+0x1bc>
 800ba7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba7c:	07d9      	lsls	r1, r3, #31
 800ba7e:	d405      	bmi.n	800ba8c <_vfiprintf_r+0x220>
 800ba80:	89ab      	ldrh	r3, [r5, #12]
 800ba82:	059a      	lsls	r2, r3, #22
 800ba84:	d402      	bmi.n	800ba8c <_vfiprintf_r+0x220>
 800ba86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba88:	f7ff fcf7 	bl	800b47a <__retarget_lock_release_recursive>
 800ba8c:	89ab      	ldrh	r3, [r5, #12]
 800ba8e:	065b      	lsls	r3, r3, #25
 800ba90:	f53f af12 	bmi.w	800b8b8 <_vfiprintf_r+0x4c>
 800ba94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba96:	e711      	b.n	800b8bc <_vfiprintf_r+0x50>
 800ba98:	ab03      	add	r3, sp, #12
 800ba9a:	9300      	str	r3, [sp, #0]
 800ba9c:	462a      	mov	r2, r5
 800ba9e:	4b09      	ldr	r3, [pc, #36]	; (800bac4 <_vfiprintf_r+0x258>)
 800baa0:	a904      	add	r1, sp, #16
 800baa2:	4630      	mov	r0, r6
 800baa4:	f000 f880 	bl	800bba8 <_printf_i>
 800baa8:	e7e4      	b.n	800ba74 <_vfiprintf_r+0x208>
 800baaa:	bf00      	nop
 800baac:	0800cee8 	.word	0x0800cee8
 800bab0:	0800cf08 	.word	0x0800cf08
 800bab4:	0800cec8 	.word	0x0800cec8
 800bab8:	0800cf28 	.word	0x0800cf28
 800babc:	0800cf32 	.word	0x0800cf32
 800bac0:	00000000 	.word	0x00000000
 800bac4:	0800b847 	.word	0x0800b847
 800bac8:	0800cf2e 	.word	0x0800cf2e

0800bacc <_printf_common>:
 800bacc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bad0:	4616      	mov	r6, r2
 800bad2:	4699      	mov	r9, r3
 800bad4:	688a      	ldr	r2, [r1, #8]
 800bad6:	690b      	ldr	r3, [r1, #16]
 800bad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800badc:	4293      	cmp	r3, r2
 800bade:	bfb8      	it	lt
 800bae0:	4613      	movlt	r3, r2
 800bae2:	6033      	str	r3, [r6, #0]
 800bae4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bae8:	4607      	mov	r7, r0
 800baea:	460c      	mov	r4, r1
 800baec:	b10a      	cbz	r2, 800baf2 <_printf_common+0x26>
 800baee:	3301      	adds	r3, #1
 800baf0:	6033      	str	r3, [r6, #0]
 800baf2:	6823      	ldr	r3, [r4, #0]
 800baf4:	0699      	lsls	r1, r3, #26
 800baf6:	bf42      	ittt	mi
 800baf8:	6833      	ldrmi	r3, [r6, #0]
 800bafa:	3302      	addmi	r3, #2
 800bafc:	6033      	strmi	r3, [r6, #0]
 800bafe:	6825      	ldr	r5, [r4, #0]
 800bb00:	f015 0506 	ands.w	r5, r5, #6
 800bb04:	d106      	bne.n	800bb14 <_printf_common+0x48>
 800bb06:	f104 0a19 	add.w	sl, r4, #25
 800bb0a:	68e3      	ldr	r3, [r4, #12]
 800bb0c:	6832      	ldr	r2, [r6, #0]
 800bb0e:	1a9b      	subs	r3, r3, r2
 800bb10:	42ab      	cmp	r3, r5
 800bb12:	dc26      	bgt.n	800bb62 <_printf_common+0x96>
 800bb14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb18:	1e13      	subs	r3, r2, #0
 800bb1a:	6822      	ldr	r2, [r4, #0]
 800bb1c:	bf18      	it	ne
 800bb1e:	2301      	movne	r3, #1
 800bb20:	0692      	lsls	r2, r2, #26
 800bb22:	d42b      	bmi.n	800bb7c <_printf_common+0xb0>
 800bb24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb28:	4649      	mov	r1, r9
 800bb2a:	4638      	mov	r0, r7
 800bb2c:	47c0      	blx	r8
 800bb2e:	3001      	adds	r0, #1
 800bb30:	d01e      	beq.n	800bb70 <_printf_common+0xa4>
 800bb32:	6823      	ldr	r3, [r4, #0]
 800bb34:	68e5      	ldr	r5, [r4, #12]
 800bb36:	6832      	ldr	r2, [r6, #0]
 800bb38:	f003 0306 	and.w	r3, r3, #6
 800bb3c:	2b04      	cmp	r3, #4
 800bb3e:	bf08      	it	eq
 800bb40:	1aad      	subeq	r5, r5, r2
 800bb42:	68a3      	ldr	r3, [r4, #8]
 800bb44:	6922      	ldr	r2, [r4, #16]
 800bb46:	bf0c      	ite	eq
 800bb48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb4c:	2500      	movne	r5, #0
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	bfc4      	itt	gt
 800bb52:	1a9b      	subgt	r3, r3, r2
 800bb54:	18ed      	addgt	r5, r5, r3
 800bb56:	2600      	movs	r6, #0
 800bb58:	341a      	adds	r4, #26
 800bb5a:	42b5      	cmp	r5, r6
 800bb5c:	d11a      	bne.n	800bb94 <_printf_common+0xc8>
 800bb5e:	2000      	movs	r0, #0
 800bb60:	e008      	b.n	800bb74 <_printf_common+0xa8>
 800bb62:	2301      	movs	r3, #1
 800bb64:	4652      	mov	r2, sl
 800bb66:	4649      	mov	r1, r9
 800bb68:	4638      	mov	r0, r7
 800bb6a:	47c0      	blx	r8
 800bb6c:	3001      	adds	r0, #1
 800bb6e:	d103      	bne.n	800bb78 <_printf_common+0xac>
 800bb70:	f04f 30ff 	mov.w	r0, #4294967295
 800bb74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb78:	3501      	adds	r5, #1
 800bb7a:	e7c6      	b.n	800bb0a <_printf_common+0x3e>
 800bb7c:	18e1      	adds	r1, r4, r3
 800bb7e:	1c5a      	adds	r2, r3, #1
 800bb80:	2030      	movs	r0, #48	; 0x30
 800bb82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb86:	4422      	add	r2, r4
 800bb88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb90:	3302      	adds	r3, #2
 800bb92:	e7c7      	b.n	800bb24 <_printf_common+0x58>
 800bb94:	2301      	movs	r3, #1
 800bb96:	4622      	mov	r2, r4
 800bb98:	4649      	mov	r1, r9
 800bb9a:	4638      	mov	r0, r7
 800bb9c:	47c0      	blx	r8
 800bb9e:	3001      	adds	r0, #1
 800bba0:	d0e6      	beq.n	800bb70 <_printf_common+0xa4>
 800bba2:	3601      	adds	r6, #1
 800bba4:	e7d9      	b.n	800bb5a <_printf_common+0x8e>
	...

0800bba8 <_printf_i>:
 800bba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbac:	7e0f      	ldrb	r7, [r1, #24]
 800bbae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bbb0:	2f78      	cmp	r7, #120	; 0x78
 800bbb2:	4691      	mov	r9, r2
 800bbb4:	4680      	mov	r8, r0
 800bbb6:	460c      	mov	r4, r1
 800bbb8:	469a      	mov	sl, r3
 800bbba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bbbe:	d807      	bhi.n	800bbd0 <_printf_i+0x28>
 800bbc0:	2f62      	cmp	r7, #98	; 0x62
 800bbc2:	d80a      	bhi.n	800bbda <_printf_i+0x32>
 800bbc4:	2f00      	cmp	r7, #0
 800bbc6:	f000 80d8 	beq.w	800bd7a <_printf_i+0x1d2>
 800bbca:	2f58      	cmp	r7, #88	; 0x58
 800bbcc:	f000 80a3 	beq.w	800bd16 <_printf_i+0x16e>
 800bbd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bbd8:	e03a      	b.n	800bc50 <_printf_i+0xa8>
 800bbda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bbde:	2b15      	cmp	r3, #21
 800bbe0:	d8f6      	bhi.n	800bbd0 <_printf_i+0x28>
 800bbe2:	a101      	add	r1, pc, #4	; (adr r1, 800bbe8 <_printf_i+0x40>)
 800bbe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bbe8:	0800bc41 	.word	0x0800bc41
 800bbec:	0800bc55 	.word	0x0800bc55
 800bbf0:	0800bbd1 	.word	0x0800bbd1
 800bbf4:	0800bbd1 	.word	0x0800bbd1
 800bbf8:	0800bbd1 	.word	0x0800bbd1
 800bbfc:	0800bbd1 	.word	0x0800bbd1
 800bc00:	0800bc55 	.word	0x0800bc55
 800bc04:	0800bbd1 	.word	0x0800bbd1
 800bc08:	0800bbd1 	.word	0x0800bbd1
 800bc0c:	0800bbd1 	.word	0x0800bbd1
 800bc10:	0800bbd1 	.word	0x0800bbd1
 800bc14:	0800bd61 	.word	0x0800bd61
 800bc18:	0800bc85 	.word	0x0800bc85
 800bc1c:	0800bd43 	.word	0x0800bd43
 800bc20:	0800bbd1 	.word	0x0800bbd1
 800bc24:	0800bbd1 	.word	0x0800bbd1
 800bc28:	0800bd83 	.word	0x0800bd83
 800bc2c:	0800bbd1 	.word	0x0800bbd1
 800bc30:	0800bc85 	.word	0x0800bc85
 800bc34:	0800bbd1 	.word	0x0800bbd1
 800bc38:	0800bbd1 	.word	0x0800bbd1
 800bc3c:	0800bd4b 	.word	0x0800bd4b
 800bc40:	682b      	ldr	r3, [r5, #0]
 800bc42:	1d1a      	adds	r2, r3, #4
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	602a      	str	r2, [r5, #0]
 800bc48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc50:	2301      	movs	r3, #1
 800bc52:	e0a3      	b.n	800bd9c <_printf_i+0x1f4>
 800bc54:	6820      	ldr	r0, [r4, #0]
 800bc56:	6829      	ldr	r1, [r5, #0]
 800bc58:	0606      	lsls	r6, r0, #24
 800bc5a:	f101 0304 	add.w	r3, r1, #4
 800bc5e:	d50a      	bpl.n	800bc76 <_printf_i+0xce>
 800bc60:	680e      	ldr	r6, [r1, #0]
 800bc62:	602b      	str	r3, [r5, #0]
 800bc64:	2e00      	cmp	r6, #0
 800bc66:	da03      	bge.n	800bc70 <_printf_i+0xc8>
 800bc68:	232d      	movs	r3, #45	; 0x2d
 800bc6a:	4276      	negs	r6, r6
 800bc6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc70:	485e      	ldr	r0, [pc, #376]	; (800bdec <_printf_i+0x244>)
 800bc72:	230a      	movs	r3, #10
 800bc74:	e019      	b.n	800bcaa <_printf_i+0x102>
 800bc76:	680e      	ldr	r6, [r1, #0]
 800bc78:	602b      	str	r3, [r5, #0]
 800bc7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc7e:	bf18      	it	ne
 800bc80:	b236      	sxthne	r6, r6
 800bc82:	e7ef      	b.n	800bc64 <_printf_i+0xbc>
 800bc84:	682b      	ldr	r3, [r5, #0]
 800bc86:	6820      	ldr	r0, [r4, #0]
 800bc88:	1d19      	adds	r1, r3, #4
 800bc8a:	6029      	str	r1, [r5, #0]
 800bc8c:	0601      	lsls	r1, r0, #24
 800bc8e:	d501      	bpl.n	800bc94 <_printf_i+0xec>
 800bc90:	681e      	ldr	r6, [r3, #0]
 800bc92:	e002      	b.n	800bc9a <_printf_i+0xf2>
 800bc94:	0646      	lsls	r6, r0, #25
 800bc96:	d5fb      	bpl.n	800bc90 <_printf_i+0xe8>
 800bc98:	881e      	ldrh	r6, [r3, #0]
 800bc9a:	4854      	ldr	r0, [pc, #336]	; (800bdec <_printf_i+0x244>)
 800bc9c:	2f6f      	cmp	r7, #111	; 0x6f
 800bc9e:	bf0c      	ite	eq
 800bca0:	2308      	moveq	r3, #8
 800bca2:	230a      	movne	r3, #10
 800bca4:	2100      	movs	r1, #0
 800bca6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bcaa:	6865      	ldr	r5, [r4, #4]
 800bcac:	60a5      	str	r5, [r4, #8]
 800bcae:	2d00      	cmp	r5, #0
 800bcb0:	bfa2      	ittt	ge
 800bcb2:	6821      	ldrge	r1, [r4, #0]
 800bcb4:	f021 0104 	bicge.w	r1, r1, #4
 800bcb8:	6021      	strge	r1, [r4, #0]
 800bcba:	b90e      	cbnz	r6, 800bcc0 <_printf_i+0x118>
 800bcbc:	2d00      	cmp	r5, #0
 800bcbe:	d04d      	beq.n	800bd5c <_printf_i+0x1b4>
 800bcc0:	4615      	mov	r5, r2
 800bcc2:	fbb6 f1f3 	udiv	r1, r6, r3
 800bcc6:	fb03 6711 	mls	r7, r3, r1, r6
 800bcca:	5dc7      	ldrb	r7, [r0, r7]
 800bccc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bcd0:	4637      	mov	r7, r6
 800bcd2:	42bb      	cmp	r3, r7
 800bcd4:	460e      	mov	r6, r1
 800bcd6:	d9f4      	bls.n	800bcc2 <_printf_i+0x11a>
 800bcd8:	2b08      	cmp	r3, #8
 800bcda:	d10b      	bne.n	800bcf4 <_printf_i+0x14c>
 800bcdc:	6823      	ldr	r3, [r4, #0]
 800bcde:	07de      	lsls	r6, r3, #31
 800bce0:	d508      	bpl.n	800bcf4 <_printf_i+0x14c>
 800bce2:	6923      	ldr	r3, [r4, #16]
 800bce4:	6861      	ldr	r1, [r4, #4]
 800bce6:	4299      	cmp	r1, r3
 800bce8:	bfde      	ittt	le
 800bcea:	2330      	movle	r3, #48	; 0x30
 800bcec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bcf0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bcf4:	1b52      	subs	r2, r2, r5
 800bcf6:	6122      	str	r2, [r4, #16]
 800bcf8:	f8cd a000 	str.w	sl, [sp]
 800bcfc:	464b      	mov	r3, r9
 800bcfe:	aa03      	add	r2, sp, #12
 800bd00:	4621      	mov	r1, r4
 800bd02:	4640      	mov	r0, r8
 800bd04:	f7ff fee2 	bl	800bacc <_printf_common>
 800bd08:	3001      	adds	r0, #1
 800bd0a:	d14c      	bne.n	800bda6 <_printf_i+0x1fe>
 800bd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd10:	b004      	add	sp, #16
 800bd12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd16:	4835      	ldr	r0, [pc, #212]	; (800bdec <_printf_i+0x244>)
 800bd18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bd1c:	6829      	ldr	r1, [r5, #0]
 800bd1e:	6823      	ldr	r3, [r4, #0]
 800bd20:	f851 6b04 	ldr.w	r6, [r1], #4
 800bd24:	6029      	str	r1, [r5, #0]
 800bd26:	061d      	lsls	r5, r3, #24
 800bd28:	d514      	bpl.n	800bd54 <_printf_i+0x1ac>
 800bd2a:	07df      	lsls	r7, r3, #31
 800bd2c:	bf44      	itt	mi
 800bd2e:	f043 0320 	orrmi.w	r3, r3, #32
 800bd32:	6023      	strmi	r3, [r4, #0]
 800bd34:	b91e      	cbnz	r6, 800bd3e <_printf_i+0x196>
 800bd36:	6823      	ldr	r3, [r4, #0]
 800bd38:	f023 0320 	bic.w	r3, r3, #32
 800bd3c:	6023      	str	r3, [r4, #0]
 800bd3e:	2310      	movs	r3, #16
 800bd40:	e7b0      	b.n	800bca4 <_printf_i+0xfc>
 800bd42:	6823      	ldr	r3, [r4, #0]
 800bd44:	f043 0320 	orr.w	r3, r3, #32
 800bd48:	6023      	str	r3, [r4, #0]
 800bd4a:	2378      	movs	r3, #120	; 0x78
 800bd4c:	4828      	ldr	r0, [pc, #160]	; (800bdf0 <_printf_i+0x248>)
 800bd4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd52:	e7e3      	b.n	800bd1c <_printf_i+0x174>
 800bd54:	0659      	lsls	r1, r3, #25
 800bd56:	bf48      	it	mi
 800bd58:	b2b6      	uxthmi	r6, r6
 800bd5a:	e7e6      	b.n	800bd2a <_printf_i+0x182>
 800bd5c:	4615      	mov	r5, r2
 800bd5e:	e7bb      	b.n	800bcd8 <_printf_i+0x130>
 800bd60:	682b      	ldr	r3, [r5, #0]
 800bd62:	6826      	ldr	r6, [r4, #0]
 800bd64:	6961      	ldr	r1, [r4, #20]
 800bd66:	1d18      	adds	r0, r3, #4
 800bd68:	6028      	str	r0, [r5, #0]
 800bd6a:	0635      	lsls	r5, r6, #24
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	d501      	bpl.n	800bd74 <_printf_i+0x1cc>
 800bd70:	6019      	str	r1, [r3, #0]
 800bd72:	e002      	b.n	800bd7a <_printf_i+0x1d2>
 800bd74:	0670      	lsls	r0, r6, #25
 800bd76:	d5fb      	bpl.n	800bd70 <_printf_i+0x1c8>
 800bd78:	8019      	strh	r1, [r3, #0]
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	6123      	str	r3, [r4, #16]
 800bd7e:	4615      	mov	r5, r2
 800bd80:	e7ba      	b.n	800bcf8 <_printf_i+0x150>
 800bd82:	682b      	ldr	r3, [r5, #0]
 800bd84:	1d1a      	adds	r2, r3, #4
 800bd86:	602a      	str	r2, [r5, #0]
 800bd88:	681d      	ldr	r5, [r3, #0]
 800bd8a:	6862      	ldr	r2, [r4, #4]
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	4628      	mov	r0, r5
 800bd90:	f7f4 fa2e 	bl	80001f0 <memchr>
 800bd94:	b108      	cbz	r0, 800bd9a <_printf_i+0x1f2>
 800bd96:	1b40      	subs	r0, r0, r5
 800bd98:	6060      	str	r0, [r4, #4]
 800bd9a:	6863      	ldr	r3, [r4, #4]
 800bd9c:	6123      	str	r3, [r4, #16]
 800bd9e:	2300      	movs	r3, #0
 800bda0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bda4:	e7a8      	b.n	800bcf8 <_printf_i+0x150>
 800bda6:	6923      	ldr	r3, [r4, #16]
 800bda8:	462a      	mov	r2, r5
 800bdaa:	4649      	mov	r1, r9
 800bdac:	4640      	mov	r0, r8
 800bdae:	47d0      	blx	sl
 800bdb0:	3001      	adds	r0, #1
 800bdb2:	d0ab      	beq.n	800bd0c <_printf_i+0x164>
 800bdb4:	6823      	ldr	r3, [r4, #0]
 800bdb6:	079b      	lsls	r3, r3, #30
 800bdb8:	d413      	bmi.n	800bde2 <_printf_i+0x23a>
 800bdba:	68e0      	ldr	r0, [r4, #12]
 800bdbc:	9b03      	ldr	r3, [sp, #12]
 800bdbe:	4298      	cmp	r0, r3
 800bdc0:	bfb8      	it	lt
 800bdc2:	4618      	movlt	r0, r3
 800bdc4:	e7a4      	b.n	800bd10 <_printf_i+0x168>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	4632      	mov	r2, r6
 800bdca:	4649      	mov	r1, r9
 800bdcc:	4640      	mov	r0, r8
 800bdce:	47d0      	blx	sl
 800bdd0:	3001      	adds	r0, #1
 800bdd2:	d09b      	beq.n	800bd0c <_printf_i+0x164>
 800bdd4:	3501      	adds	r5, #1
 800bdd6:	68e3      	ldr	r3, [r4, #12]
 800bdd8:	9903      	ldr	r1, [sp, #12]
 800bdda:	1a5b      	subs	r3, r3, r1
 800bddc:	42ab      	cmp	r3, r5
 800bdde:	dcf2      	bgt.n	800bdc6 <_printf_i+0x21e>
 800bde0:	e7eb      	b.n	800bdba <_printf_i+0x212>
 800bde2:	2500      	movs	r5, #0
 800bde4:	f104 0619 	add.w	r6, r4, #25
 800bde8:	e7f5      	b.n	800bdd6 <_printf_i+0x22e>
 800bdea:	bf00      	nop
 800bdec:	0800cf39 	.word	0x0800cf39
 800bdf0:	0800cf4a 	.word	0x0800cf4a

0800bdf4 <__sread>:
 800bdf4:	b510      	push	{r4, lr}
 800bdf6:	460c      	mov	r4, r1
 800bdf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdfc:	f000 f8e6 	bl	800bfcc <_read_r>
 800be00:	2800      	cmp	r0, #0
 800be02:	bfab      	itete	ge
 800be04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be06:	89a3      	ldrhlt	r3, [r4, #12]
 800be08:	181b      	addge	r3, r3, r0
 800be0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be0e:	bfac      	ite	ge
 800be10:	6563      	strge	r3, [r4, #84]	; 0x54
 800be12:	81a3      	strhlt	r3, [r4, #12]
 800be14:	bd10      	pop	{r4, pc}

0800be16 <__swrite>:
 800be16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be1a:	461f      	mov	r7, r3
 800be1c:	898b      	ldrh	r3, [r1, #12]
 800be1e:	05db      	lsls	r3, r3, #23
 800be20:	4605      	mov	r5, r0
 800be22:	460c      	mov	r4, r1
 800be24:	4616      	mov	r6, r2
 800be26:	d505      	bpl.n	800be34 <__swrite+0x1e>
 800be28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be2c:	2302      	movs	r3, #2
 800be2e:	2200      	movs	r2, #0
 800be30:	f000 f870 	bl	800bf14 <_lseek_r>
 800be34:	89a3      	ldrh	r3, [r4, #12]
 800be36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be3e:	81a3      	strh	r3, [r4, #12]
 800be40:	4632      	mov	r2, r6
 800be42:	463b      	mov	r3, r7
 800be44:	4628      	mov	r0, r5
 800be46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be4a:	f000 b817 	b.w	800be7c <_write_r>

0800be4e <__sseek>:
 800be4e:	b510      	push	{r4, lr}
 800be50:	460c      	mov	r4, r1
 800be52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be56:	f000 f85d 	bl	800bf14 <_lseek_r>
 800be5a:	1c43      	adds	r3, r0, #1
 800be5c:	89a3      	ldrh	r3, [r4, #12]
 800be5e:	bf15      	itete	ne
 800be60:	6560      	strne	r0, [r4, #84]	; 0x54
 800be62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be6a:	81a3      	strheq	r3, [r4, #12]
 800be6c:	bf18      	it	ne
 800be6e:	81a3      	strhne	r3, [r4, #12]
 800be70:	bd10      	pop	{r4, pc}

0800be72 <__sclose>:
 800be72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be76:	f000 b81b 	b.w	800beb0 <_close_r>
	...

0800be7c <_write_r>:
 800be7c:	b538      	push	{r3, r4, r5, lr}
 800be7e:	4d07      	ldr	r5, [pc, #28]	; (800be9c <_write_r+0x20>)
 800be80:	4604      	mov	r4, r0
 800be82:	4608      	mov	r0, r1
 800be84:	4611      	mov	r1, r2
 800be86:	2200      	movs	r2, #0
 800be88:	602a      	str	r2, [r5, #0]
 800be8a:	461a      	mov	r2, r3
 800be8c:	f7f6 ffaf 	bl	8002dee <_write>
 800be90:	1c43      	adds	r3, r0, #1
 800be92:	d102      	bne.n	800be9a <_write_r+0x1e>
 800be94:	682b      	ldr	r3, [r5, #0]
 800be96:	b103      	cbz	r3, 800be9a <_write_r+0x1e>
 800be98:	6023      	str	r3, [r4, #0]
 800be9a:	bd38      	pop	{r3, r4, r5, pc}
 800be9c:	20005718 	.word	0x20005718

0800bea0 <abort>:
 800bea0:	b508      	push	{r3, lr}
 800bea2:	2006      	movs	r0, #6
 800bea4:	f000 f8cc 	bl	800c040 <raise>
 800bea8:	2001      	movs	r0, #1
 800beaa:	f7f6 ff79 	bl	8002da0 <_exit>
	...

0800beb0 <_close_r>:
 800beb0:	b538      	push	{r3, r4, r5, lr}
 800beb2:	4d06      	ldr	r5, [pc, #24]	; (800becc <_close_r+0x1c>)
 800beb4:	2300      	movs	r3, #0
 800beb6:	4604      	mov	r4, r0
 800beb8:	4608      	mov	r0, r1
 800beba:	602b      	str	r3, [r5, #0]
 800bebc:	f7f6 ffb3 	bl	8002e26 <_close>
 800bec0:	1c43      	adds	r3, r0, #1
 800bec2:	d102      	bne.n	800beca <_close_r+0x1a>
 800bec4:	682b      	ldr	r3, [r5, #0]
 800bec6:	b103      	cbz	r3, 800beca <_close_r+0x1a>
 800bec8:	6023      	str	r3, [r4, #0]
 800beca:	bd38      	pop	{r3, r4, r5, pc}
 800becc:	20005718 	.word	0x20005718

0800bed0 <_fstat_r>:
 800bed0:	b538      	push	{r3, r4, r5, lr}
 800bed2:	4d07      	ldr	r5, [pc, #28]	; (800bef0 <_fstat_r+0x20>)
 800bed4:	2300      	movs	r3, #0
 800bed6:	4604      	mov	r4, r0
 800bed8:	4608      	mov	r0, r1
 800beda:	4611      	mov	r1, r2
 800bedc:	602b      	str	r3, [r5, #0]
 800bede:	f7f6 ffae 	bl	8002e3e <_fstat>
 800bee2:	1c43      	adds	r3, r0, #1
 800bee4:	d102      	bne.n	800beec <_fstat_r+0x1c>
 800bee6:	682b      	ldr	r3, [r5, #0]
 800bee8:	b103      	cbz	r3, 800beec <_fstat_r+0x1c>
 800beea:	6023      	str	r3, [r4, #0]
 800beec:	bd38      	pop	{r3, r4, r5, pc}
 800beee:	bf00      	nop
 800bef0:	20005718 	.word	0x20005718

0800bef4 <_isatty_r>:
 800bef4:	b538      	push	{r3, r4, r5, lr}
 800bef6:	4d06      	ldr	r5, [pc, #24]	; (800bf10 <_isatty_r+0x1c>)
 800bef8:	2300      	movs	r3, #0
 800befa:	4604      	mov	r4, r0
 800befc:	4608      	mov	r0, r1
 800befe:	602b      	str	r3, [r5, #0]
 800bf00:	f7f6 ffad 	bl	8002e5e <_isatty>
 800bf04:	1c43      	adds	r3, r0, #1
 800bf06:	d102      	bne.n	800bf0e <_isatty_r+0x1a>
 800bf08:	682b      	ldr	r3, [r5, #0]
 800bf0a:	b103      	cbz	r3, 800bf0e <_isatty_r+0x1a>
 800bf0c:	6023      	str	r3, [r4, #0]
 800bf0e:	bd38      	pop	{r3, r4, r5, pc}
 800bf10:	20005718 	.word	0x20005718

0800bf14 <_lseek_r>:
 800bf14:	b538      	push	{r3, r4, r5, lr}
 800bf16:	4d07      	ldr	r5, [pc, #28]	; (800bf34 <_lseek_r+0x20>)
 800bf18:	4604      	mov	r4, r0
 800bf1a:	4608      	mov	r0, r1
 800bf1c:	4611      	mov	r1, r2
 800bf1e:	2200      	movs	r2, #0
 800bf20:	602a      	str	r2, [r5, #0]
 800bf22:	461a      	mov	r2, r3
 800bf24:	f7f6 ffa6 	bl	8002e74 <_lseek>
 800bf28:	1c43      	adds	r3, r0, #1
 800bf2a:	d102      	bne.n	800bf32 <_lseek_r+0x1e>
 800bf2c:	682b      	ldr	r3, [r5, #0]
 800bf2e:	b103      	cbz	r3, 800bf32 <_lseek_r+0x1e>
 800bf30:	6023      	str	r3, [r4, #0]
 800bf32:	bd38      	pop	{r3, r4, r5, pc}
 800bf34:	20005718 	.word	0x20005718

0800bf38 <memmove>:
 800bf38:	4288      	cmp	r0, r1
 800bf3a:	b510      	push	{r4, lr}
 800bf3c:	eb01 0402 	add.w	r4, r1, r2
 800bf40:	d902      	bls.n	800bf48 <memmove+0x10>
 800bf42:	4284      	cmp	r4, r0
 800bf44:	4623      	mov	r3, r4
 800bf46:	d807      	bhi.n	800bf58 <memmove+0x20>
 800bf48:	1e43      	subs	r3, r0, #1
 800bf4a:	42a1      	cmp	r1, r4
 800bf4c:	d008      	beq.n	800bf60 <memmove+0x28>
 800bf4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf52:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf56:	e7f8      	b.n	800bf4a <memmove+0x12>
 800bf58:	4402      	add	r2, r0
 800bf5a:	4601      	mov	r1, r0
 800bf5c:	428a      	cmp	r2, r1
 800bf5e:	d100      	bne.n	800bf62 <memmove+0x2a>
 800bf60:	bd10      	pop	{r4, pc}
 800bf62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf6a:	e7f7      	b.n	800bf5c <memmove+0x24>

0800bf6c <_realloc_r>:
 800bf6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf70:	4680      	mov	r8, r0
 800bf72:	4614      	mov	r4, r2
 800bf74:	460e      	mov	r6, r1
 800bf76:	b921      	cbnz	r1, 800bf82 <_realloc_r+0x16>
 800bf78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf7c:	4611      	mov	r1, r2
 800bf7e:	f7fe be47 	b.w	800ac10 <_malloc_r>
 800bf82:	b92a      	cbnz	r2, 800bf90 <_realloc_r+0x24>
 800bf84:	f7fe fdd8 	bl	800ab38 <_free_r>
 800bf88:	4625      	mov	r5, r4
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf90:	f000 f872 	bl	800c078 <_malloc_usable_size_r>
 800bf94:	4284      	cmp	r4, r0
 800bf96:	4607      	mov	r7, r0
 800bf98:	d802      	bhi.n	800bfa0 <_realloc_r+0x34>
 800bf9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bf9e:	d812      	bhi.n	800bfc6 <_realloc_r+0x5a>
 800bfa0:	4621      	mov	r1, r4
 800bfa2:	4640      	mov	r0, r8
 800bfa4:	f7fe fe34 	bl	800ac10 <_malloc_r>
 800bfa8:	4605      	mov	r5, r0
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	d0ed      	beq.n	800bf8a <_realloc_r+0x1e>
 800bfae:	42bc      	cmp	r4, r7
 800bfb0:	4622      	mov	r2, r4
 800bfb2:	4631      	mov	r1, r6
 800bfb4:	bf28      	it	cs
 800bfb6:	463a      	movcs	r2, r7
 800bfb8:	f7fe fda8 	bl	800ab0c <memcpy>
 800bfbc:	4631      	mov	r1, r6
 800bfbe:	4640      	mov	r0, r8
 800bfc0:	f7fe fdba 	bl	800ab38 <_free_r>
 800bfc4:	e7e1      	b.n	800bf8a <_realloc_r+0x1e>
 800bfc6:	4635      	mov	r5, r6
 800bfc8:	e7df      	b.n	800bf8a <_realloc_r+0x1e>
	...

0800bfcc <_read_r>:
 800bfcc:	b538      	push	{r3, r4, r5, lr}
 800bfce:	4d07      	ldr	r5, [pc, #28]	; (800bfec <_read_r+0x20>)
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	4608      	mov	r0, r1
 800bfd4:	4611      	mov	r1, r2
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	602a      	str	r2, [r5, #0]
 800bfda:	461a      	mov	r2, r3
 800bfdc:	f7f6 feea 	bl	8002db4 <_read>
 800bfe0:	1c43      	adds	r3, r0, #1
 800bfe2:	d102      	bne.n	800bfea <_read_r+0x1e>
 800bfe4:	682b      	ldr	r3, [r5, #0]
 800bfe6:	b103      	cbz	r3, 800bfea <_read_r+0x1e>
 800bfe8:	6023      	str	r3, [r4, #0]
 800bfea:	bd38      	pop	{r3, r4, r5, pc}
 800bfec:	20005718 	.word	0x20005718

0800bff0 <_raise_r>:
 800bff0:	291f      	cmp	r1, #31
 800bff2:	b538      	push	{r3, r4, r5, lr}
 800bff4:	4604      	mov	r4, r0
 800bff6:	460d      	mov	r5, r1
 800bff8:	d904      	bls.n	800c004 <_raise_r+0x14>
 800bffa:	2316      	movs	r3, #22
 800bffc:	6003      	str	r3, [r0, #0]
 800bffe:	f04f 30ff 	mov.w	r0, #4294967295
 800c002:	bd38      	pop	{r3, r4, r5, pc}
 800c004:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c006:	b112      	cbz	r2, 800c00e <_raise_r+0x1e>
 800c008:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c00c:	b94b      	cbnz	r3, 800c022 <_raise_r+0x32>
 800c00e:	4620      	mov	r0, r4
 800c010:	f000 f830 	bl	800c074 <_getpid_r>
 800c014:	462a      	mov	r2, r5
 800c016:	4601      	mov	r1, r0
 800c018:	4620      	mov	r0, r4
 800c01a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c01e:	f000 b817 	b.w	800c050 <_kill_r>
 800c022:	2b01      	cmp	r3, #1
 800c024:	d00a      	beq.n	800c03c <_raise_r+0x4c>
 800c026:	1c59      	adds	r1, r3, #1
 800c028:	d103      	bne.n	800c032 <_raise_r+0x42>
 800c02a:	2316      	movs	r3, #22
 800c02c:	6003      	str	r3, [r0, #0]
 800c02e:	2001      	movs	r0, #1
 800c030:	e7e7      	b.n	800c002 <_raise_r+0x12>
 800c032:	2400      	movs	r4, #0
 800c034:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c038:	4628      	mov	r0, r5
 800c03a:	4798      	blx	r3
 800c03c:	2000      	movs	r0, #0
 800c03e:	e7e0      	b.n	800c002 <_raise_r+0x12>

0800c040 <raise>:
 800c040:	4b02      	ldr	r3, [pc, #8]	; (800c04c <raise+0xc>)
 800c042:	4601      	mov	r1, r0
 800c044:	6818      	ldr	r0, [r3, #0]
 800c046:	f7ff bfd3 	b.w	800bff0 <_raise_r>
 800c04a:	bf00      	nop
 800c04c:	20000034 	.word	0x20000034

0800c050 <_kill_r>:
 800c050:	b538      	push	{r3, r4, r5, lr}
 800c052:	4d07      	ldr	r5, [pc, #28]	; (800c070 <_kill_r+0x20>)
 800c054:	2300      	movs	r3, #0
 800c056:	4604      	mov	r4, r0
 800c058:	4608      	mov	r0, r1
 800c05a:	4611      	mov	r1, r2
 800c05c:	602b      	str	r3, [r5, #0]
 800c05e:	f7f6 fe8f 	bl	8002d80 <_kill>
 800c062:	1c43      	adds	r3, r0, #1
 800c064:	d102      	bne.n	800c06c <_kill_r+0x1c>
 800c066:	682b      	ldr	r3, [r5, #0]
 800c068:	b103      	cbz	r3, 800c06c <_kill_r+0x1c>
 800c06a:	6023      	str	r3, [r4, #0]
 800c06c:	bd38      	pop	{r3, r4, r5, pc}
 800c06e:	bf00      	nop
 800c070:	20005718 	.word	0x20005718

0800c074 <_getpid_r>:
 800c074:	f7f6 be7c 	b.w	8002d70 <_getpid>

0800c078 <_malloc_usable_size_r>:
 800c078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c07c:	1f18      	subs	r0, r3, #4
 800c07e:	2b00      	cmp	r3, #0
 800c080:	bfbc      	itt	lt
 800c082:	580b      	ldrlt	r3, [r1, r0]
 800c084:	18c0      	addlt	r0, r0, r3
 800c086:	4770      	bx	lr

0800c088 <_init>:
 800c088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c08a:	bf00      	nop
 800c08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c08e:	bc08      	pop	{r3}
 800c090:	469e      	mov	lr, r3
 800c092:	4770      	bx	lr

0800c094 <_fini>:
 800c094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c096:	bf00      	nop
 800c098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c09a:	bc08      	pop	{r3}
 800c09c:	469e      	mov	lr, r3
 800c09e:	4770      	bx	lr
